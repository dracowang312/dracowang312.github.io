<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ADO.NET</title>
    <url>/ADO.NET/</url>
    <content><![CDATA[<p>ADO.NET 是 Microsoft .NET 框架中的一组数据访问组件，提供了与各种数据源（如 SQL Server、Oracle、XML 文件等）的连接和交互的功能。它设计用于支持分布式应用程序的数据访问。<span id="more"></span></p>
<h2 id="ADO-NET概述"><a href="#ADO-NET概述" class="headerlink" title="ADO.NET概述"></a>ADO.NET概述</h2><p>ADO.NET 主要由以下几个关键组件组成：</p>
<p><strong>连接（Connection）</strong>：用于建立与数据库的连接。</p>
<p><strong>命令（Command）</strong>：用于执行 SQL 查询或存储过程。</p>
<p><strong>数据读取器（DataReader）</strong>：用于读取数据，提供一种高效的、只进只读的访问方式，不需要占用内存空间。</p>
<p><strong>数据集（DataSet）和数据表（DataTable）</strong>：用于在内存中存储数据，支持离线操作。</p>
<p><strong>数据适配器（DataAdapter）</strong>：用于在数据源和 DataSet 之间传输数据。</p>
<p><strong>数据视图（DataView）</strong>：用于对 DataTable 数据进行排序、筛选和搜索。</p>
<h3 id="Connection-类"><a href="#Connection-类" class="headerlink" title="Connection 类"></a>Connection 类</h3><p>当然，下面是一个示例代码，演示如何在 C# 中新建一个 <code>SqlConnection</code> 对象并连接到 SQL Server 数据库：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data.SqlClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 定义连接字符串</span></span><br><span class="line">        <span class="built_in">string</span> connectionString = <span class="string">&quot;Server=your_server_name;Database=your_database_name;User Id=your_username;Password=your_password;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 SqlConnection 对象</span></span><br><span class="line">        <span class="keyword">using</span> (SqlConnection connection = <span class="keyword">new</span> SqlConnection(connectionString))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 打开连接</span></span><br><span class="line">                connection.Open();</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Connection opened successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 在这里可以执行数据库操作</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 捕获并处理异常</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;An error occurred: &quot;</span> + ex.Message);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 确保连接被关闭</span></span><br><span class="line">                <span class="keyword">if</span> (connection.State == System.Data.ConnectionState.Open)</span><br><span class="line">                &#123;</span><br><span class="line">                    connection.Close();</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Connection closed.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h3><ol>
<li><p><strong>导入命名空间</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data.SqlClient;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>定义连接字符串</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> connectionString = <span class="string">&quot;Server=your_server_name;Database=your_database_name;User Id=your_username;Password=your_password;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>连接字符串包括服务器名称、数据库名称、用户名和密码。请将 <code>your_server_name</code>、<code>your_database_name</code>、<code>your_username</code> 和 <code>your_password</code> 替换为实际值。</p>
</li>
<li><p><strong>创建 <code>SqlConnection</code> 对象并打开连接</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (SqlConnection connection = <span class="keyword">new</span> SqlConnection(connectionString))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 打开连接</span></span><br><span class="line">        connection.Open();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Connection opened successfully.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 捕获并处理异常</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;An error occurred: &quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 确保连接被关闭</span></span><br><span class="line">        <span class="keyword">if</span> (connection.State == System.Data.ConnectionState.Open)</span><br><span class="line">        &#123;</span><br><span class="line">            connection.Close();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Connection closed.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>using</code> 语句确保在代码块执行完毕后自动关闭连接。</p>
</li>
<li><p><strong>执行数据库操作</strong><br>在连接打开后，可以在 <code>try</code> 块中执行各种数据库操作。</p>
</li>
<li><p><strong>异常处理</strong><br>在 <code>catch</code> 块中捕获并处理任何异常。</p>
</li>
<li><p><strong>关闭连接</strong><br>在 <code>finally</code> 块中确保连接被关闭，防止资源泄漏。</p>
</li>
</ol>
<p>这样，你就可以成功地新建一个连接并连接到 SQL Server 数据库了。</p>
<p><strong>常用方法</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">connection.Open(); <span class="comment">// 打开数据库连接</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">connection.Close(); <span class="comment">// 关闭数据库连接</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">connection.BeginTransaction(); <span class="comment">// 开始一个数据库事务</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">connection.CreateCommand(); <span class="comment">// 创建并返回一个与连接相关联的命令对象</span></span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">connection.ConnectionString; <span class="comment">// 获取或设置用于打开数据库的连接字符串</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">connection.State; <span class="comment">// 获取连接的当前状态</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">connection.Database; <span class="comment">// 获取当前数据库的名称或连接打开后要使用的数据库的名称</span></span><br></pre></td></tr></table></figure>

<h3 id="Command-类"><a href="#Command-类" class="headerlink" title="Command 类"></a>Command 类</h3><p><strong>常用方法</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">command.ExecuteReader(); <span class="comment">// 执行命令并返回一个 DataReader 对象</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">command.ExecuteNonQuery(); <span class="comment">// 执行命令并返回受影响的行数</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">command.ExecuteScalar(); <span class="comment">// 执行命令并返回单个值（例如聚合值）</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">command.Prepare(); <span class="comment">// 创建命令的准备好的版本</span></span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">command.CommandText; <span class="comment">// 获取或设置要对数据源执行的文本命令</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">command.CommandType; <span class="comment">// 获取或设置一个值，该值指示如何解释 CommandText 属性</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">command.Parameters; <span class="comment">// 获取命令的参数集合</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">command.Connection; <span class="comment">// 获取或设置 Command 对象所用的连接</span></span><br></pre></td></tr></table></figure>

<h3 id="DataReader-类"><a href="#DataReader-类" class="headerlink" title="DataReader 类"></a>DataReader 类</h3><p>以下是一个使用 <code>DataReader</code> 从数据库中读取数据的简单示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data.SqlClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 定义连接字符串</span></span><br><span class="line">        <span class="built_in">string</span> connectionString = <span class="string">&quot;Server=your_server_name;Database=your_database_name;User Id=your_username;Password=your_password;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义 SQL 查询语句</span></span><br><span class="line">        <span class="built_in">string</span> query = <span class="string">&quot;SELECT StudentID, Name, Age FROM Students&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 SqlConnection 对象</span></span><br><span class="line">        <span class="keyword">using</span> (SqlConnection connection = <span class="keyword">new</span> SqlConnection(connectionString))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建 SqlCommand 对象并设置 SQL 查询和连接</span></span><br><span class="line">            <span class="keyword">using</span> (SqlCommand command = <span class="keyword">new</span> SqlCommand(query, connection))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 打开连接</span></span><br><span class="line">                    connection.Open();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 执行查询并获取一个 DataReader 对象</span></span><br><span class="line">                    <span class="keyword">using</span> (SqlDataReader reader = command.ExecuteReader())</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 检查 DataReader 是否包含行</span></span><br><span class="line">                        <span class="keyword">if</span> (reader.HasRows)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// 读取每一行并输出到控制台</span></span><br><span class="line">                            <span class="keyword">while</span> (reader.Read())</span><br><span class="line">                            &#123;</span><br><span class="line">                                Console.WriteLine(<span class="string">$&quot;StudentID: <span class="subst">&#123;reader[<span class="string">&quot;StudentID&quot;</span>]&#125;</span>, Name: <span class="subst">&#123;reader[<span class="string">&quot;Name&quot;</span>]&#125;</span>, Age: <span class="subst">&#123;reader[<span class="string">&quot;Age&quot;</span>]&#125;</span>&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            Console.WriteLine(<span class="string">&quot;No rows found.&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 捕获并处理异常</span></span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;An error occurred: &quot;</span> + ex.Message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中：</p>
<ul>
<li>我们首先定义了连接字符串和 SQL 查询语句。</li>
<li>然后，我们创建了一个 <code>SqlConnection</code> 对象，并使用 <code>SqlCommand</code> 对象将 SQL 查询语句和连接关联起来。</li>
<li>我们打开了连接，并执行了查询，获得一个 <code>DataReader</code> 对象。</li>
<li>我们检查 <code>DataReader</code> 是否包含行，如果有的话，我们使用 <code>reader.Read()</code> 方法来读取每一行，并输出到控制台。</li>
</ul>
<p>请确保将 “your_server_name”、”your_database_name”、”your_username” 和 “your_password” 替换为实际的连接信息。</p>
<p><strong>常用方法</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataReader.Read(); <span class="comment">// 读取下一行数据，返回布尔值</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataReader.Close(); <span class="comment">// 关闭 DataReader 对象</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataReader.GetInt32(<span class="built_in">int</span> i); <span class="comment">// 获取指定列的 32 位整数值</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataReader.GetString(<span class="built_in">int</span> i); <span class="comment">// 获取指定列的字符串值</span></span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataReader.FieldCount; <span class="comment">// 获取当前行中的列数</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataReader.HasRows; <span class="comment">// 获取一个值，该值指示 DataReader 是否包含一行或多行</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataReader.IsClosed; <span class="comment">// 获取一个值，该值指示 DataReader 是否已关闭</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataReader[i]; <span class="comment">// 获取指定列的值</span></span><br></pre></td></tr></table></figure>

<h3 id="DataSet-类"><a href="#DataSet-类" class="headerlink" title="DataSet 类"></a>DataSet 类</h3><p>当创建一个 <code>DataSet</code> 时，你可以把它想象成一个内存中的数据库，它可以包含多个 <code>DataTable</code> 对象，每个表都有它自己的列和行。下面是一个简单的示例，演示如何创建一个包含两个表的 <code>DataSet</code>：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建一个新的 DataSet</span></span><br><span class="line">        DataSet dataSet = <span class="keyword">new</span> DataSet(<span class="string">&quot;SchoolDataSet&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建第一个 DataTable</span></span><br><span class="line">        DataTable studentTable = <span class="keyword">new</span> DataTable(<span class="string">&quot;Students&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加列到第一个 DataTable</span></span><br><span class="line">        studentTable.Columns.Add(<span class="string">&quot;StudentID&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">int</span>));</span><br><span class="line">        studentTable.Columns.Add(<span class="string">&quot;Name&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">        studentTable.Columns.Add(<span class="string">&quot;Age&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">int</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将第一个 DataTable 添加到 DataSet 中</span></span><br><span class="line">        dataSet.Tables.Add(studentTable);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建第二个 DataTable</span></span><br><span class="line">        DataTable courseTable = <span class="keyword">new</span> DataTable(<span class="string">&quot;Courses&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加列到第二个 DataTable</span></span><br><span class="line">        courseTable.Columns.Add(<span class="string">&quot;CourseID&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">int</span>));</span><br><span class="line">        courseTable.Columns.Add(<span class="string">&quot;Name&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">        courseTable.Columns.Add(<span class="string">&quot;Description&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将第二个 DataTable 添加到 DataSet 中</span></span><br><span class="line">        dataSet.Tables.Add(courseTable);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在控制台中显示 DataSet 结构</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;DataSet Structure:&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (DataTable table <span class="keyword">in</span> dataSet.Tables)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Table Name: <span class="subst">&#123;table.TableName&#125;</span>&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Columns:&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (DataColumn column <span class="keyword">in</span> table.Columns)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;- <span class="subst">&#123;column.ColumnName&#125;</span>: <span class="subst">&#123;column.DataType&#125;</span>&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中：</p>
<ul>
<li>我们首先创建了一个 <code>DataSet</code>，名为 “SchoolDataSet”。</li>
<li>然后，我们创建了两个 <code>DataTable</code>，分别是 “Students” 和 “Courses”。</li>
<li>每个表都有其自己的列，我们使用 <code>Columns.Add()</code> 方法向每个表中添加列。</li>
<li>最后，我们将这两个表添加到 <code>DataSet</code> 中，并在控制台中显示了 <code>DataSet</code> 的结构。</li>
</ul>
<p>这个示例展示了如何创建一个简单的 <code>DataSet</code> 包含两个表，每个表有一些列。</p>
<p><strong>常用方法</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataSet.AcceptChanges(); <span class="comment">// 提交自上次调用 AcceptChanges 以来对 DataSet 所做的所有更改</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataSet.Clear(); <span class="comment">// 清除 DataSet 中的所有数据</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataSet.Clone(); <span class="comment">// 克隆 DataSet 结构，包括所有 DataTable 架构、关系和约束</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataSet.Merge(DataSet dataSet); <span class="comment">// 将指定的 DataSet 与当前 DataSet 合并</span></span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataSet.Tables; <span class="comment">// 获取 DataSet 中所有的 DataTable 对象的集合</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataSet.DataSetName; <span class="comment">// 获取或设置 DataSet 的名称</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataSet.HasChanges(); <span class="comment">// 指示自上次调用 AcceptChanges 以来是否对 DataSet 进行了更改</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataSet.Relations; <span class="comment">// 获取 DataSet 中所有的 DataRelation 对象的集合</span></span><br></pre></td></tr></table></figure>

<h3 id="DataTable-类"><a href="#DataTable-类" class="headerlink" title="DataTable 类"></a>DataTable 类</h3><p><strong>常用方法</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataTable.AcceptChanges(); <span class="comment">// 提交自上次调用 AcceptChanges 以来对 DataTable 所做的所有更改</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataTable.Clear(); <span class="comment">// 清除 DataTable 中的所有数据</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataTable.Clone(); <span class="comment">// 克隆 DataTable 的结构，包括所有架构和约束</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataTable.ImportRow(DataRow row); <span class="comment">// 将 DataRow 的副本导入 DataTable 中</span></span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataTable.Columns; <span class="comment">// 获取 DataTable 中所有的 DataColumn 对象的集合</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataTable.Rows; <span class="comment">// 获取 DataTable 中所有的 DataRow 对象的集合</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataTable.PrimaryKey; <span class="comment">// 获取或设置一个数组，以确定表的主键列</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataTable.TableName; <span class="comment">// 获取或设置 DataTable 的名称</span></span><br></pre></td></tr></table></figure>

<h3 id="DataAdapter-类"><a href="#DataAdapter-类" class="headerlink" title="DataAdapter 类"></a>DataAdapter 类</h3><p><strong>常用方法</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataAdapter.Fill(DataSet dataSet); <span class="comment">// 使用数据源中的数据填充 DataSet</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataAdapter.Update(DataSet dataSet); <span class="comment">// 使用 DataSet 的更改更新数据源</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataAdapter.FillSchema(DataSet dataSet, SchemaType schemaType); <span class="comment">// 将架构信息从数据源添加到 DataSet</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataAdapter.Dispose(); <span class="comment">// 释放 DataAdapter 使用的资源</span></span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataAdapter.SelectCommand; <span class="comment">// 获取或设置用于从数据源中选择记录的命令</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataAdapter.InsertCommand; <span class="comment">// 获取或设置用于向数据源插入记录的命令</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataAdapter.UpdateCommand; <span class="comment">// 获取或设置用于更新数据源中的记录的命令</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataAdapter.DeleteCommand; <span class="comment">// 获取或设置用于删除数据源中记录的命令</span></span><br></pre></td></tr></table></figure>

<h3 id="DataView-类"><a href="#DataView-类" class="headerlink" title="DataView 类"></a>DataView 类</h3><p><strong>常用方法</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataView.Find(<span class="built_in">object</span> key); <span class="comment">// 按主键搜索，并返回相应的 DataRowView</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataView.FindRows(<span class="built_in">object</span> key); <span class="comment">// 按主键搜索，并返回所有匹配的 DataRowView 对象</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataView.Sort = <span class="string">&quot;ColumnName ASC&quot;</span>; <span class="comment">// 对 DataView 中的数据进行排序</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataView.RowFilter = <span class="string">&quot;ColumnName = &#x27;value&#x27;&quot;</span>; <span class="comment">// 筛选 DataView 中的数据</span></span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataView.Table; <span class="comment">// 获取 DataView 所基于的 DataTable</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataView.Count; <span class="comment">// 获取 DataView 中的记录数</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataView.AllowEdit; <span class="comment">// 获取或设置一个值，该值指示是否允许对 DataView 中的行进行编辑</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dataView.AllowNew; <span class="comment">// 获取或设置一个值，该值指示是否允许在 DataView 中添加新行</span></span><br></pre></td></tr></table></figure>

<p>这些代码块展示了每个类的常用方法和属性，可以帮助你更好地理解和使用它们。</p>
<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>.net</tag>
        <tag>ado.net</tag>
      </tags>
  </entry>
  <entry>
    <title>ASP.NET</title>
    <url>/ASP.NET/</url>
    <content><![CDATA[<p>ASP.NET是由微软公司开发的一种用于构建动态网页、应用程序和Web服务的开源服务器端Web应用程序框架。它是Microsoft .NET平台的一部分，提供了一套丰富的工具和库，帮助开发者创建高效、安全且可扩展的Web应用。<span id="more"></span>以下是ASP.NET的一些关键特性和组件：</p>
<ol>
<li><p><strong>框架类型</strong>：</p>
<ul>
<li><strong>Web Forms</strong>：一种基于事件驱动的模型，类似于Windows Forms，适用于快速开发传统的表单提交和回发操作的Web应用。</li>
<li><strong>MVC（Model-View-Controller）</strong>：一种基于MVC设计模式的框架，分离了应用程序的逻辑、用户界面和输入，适用于更复杂和灵活的Web应用。</li>
<li><strong>Razor Pages</strong>：一种页面优先的编程模型，简化了页面级开发，适合于处理简单的页面逻辑。</li>
</ul>
</li>
<li><p><strong>核心特性</strong>：</p>
<ul>
<li><strong>服务器端技术</strong>：ASP.NET应用在服务器上运行，生成HTML并发送到客户端浏览器。</li>
<li><strong>状态管理</strong>：提供了多种状态管理技术，如Session、ViewState和Cookies，帮助管理用户会话数据。</li>
<li><strong>安全性</strong>：内置身份验证和授权功能，包括Windows身份验证、Forms身份验证、OAuth、OpenID Connect等。</li>
<li><strong>数据访问</strong>：支持多种数据访问技术，如ADO.NET、Entity Framework和LINQ，方便与数据库交互。</li>
<li><strong>扩展性</strong>：通过中间件（Middleware）和依赖注入（Dependency Injection），ASP.NET应用可以方便地进行功能扩展和配置。</li>
</ul>
</li>
<li><p><strong>开发工具</strong>：</p>
<ul>
<li><strong>Visual Studio</strong>：微软的集成开发环境（IDE），提供了强大的调试、代码编辑和发布工具，简化了ASP.NET应用的开发过程。</li>
<li><strong>Visual Studio Code</strong>：一个轻量级的、跨平台的代码编辑器，支持多种编程语言和扩展，适合前后端开发。</li>
</ul>
</li>
<li><p><strong>部署与运行</strong>：</p>
<ul>
<li><strong>跨平台支持</strong>：ASP.NET Core，作为ASP.NET的一个跨平台版本，可以在Windows、Linux和macOS上运行。</li>
<li><strong>云支持</strong>：与Azure等云服务紧密集成，方便部署和扩展Web应用。</li>
</ul>
</li>
</ol>
<p>ASP.NET在不断发展演进，从最初的ASP.NET Web Forms到现代化的ASP.NET Core，提供了丰富的功能和灵活的架构，满足了不同规模和复杂度的Web应用需求。</p>
<p>EFcore</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>.net</tag>
        <tag>asp.net</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/HTML/</url>
    <content><![CDATA[<p>HTML（Hypertext Markup Language）是一种用于创建网页的标记语言。它由一系列标签组成，这些标签描述了网页上的各种元素，如标题、段落、链接、图像等。HTML的主要目的是结构化文档并向浏览器传达如何显示文档内容的信息。</p>
<span id="more"></span>

<h2 id="HTML入门"><a href="#HTML入门" class="headerlink" title="HTML入门"></a>HTML入门</h2><p>HTML：超文本标记语言</p>
<p>功能：表示网页的元素，网页图片，标题，表格等。</p>
<h3 id="前端工具的选择"><a href="#前端工具的选择" class="headerlink" title="前端工具的选择"></a>前端工具的选择</h3><p><strong>vscode</strong></p>
<ul>
<li>支持多平台</li>
<li>免费开源</li>
</ul>
<p><strong>HBbuilder</strong></p>
<ul>
<li><p>支持多平台</p>
</li>
<li><p>免费开源</p>
</li>
<li><p>专门开发uni-app</p>
</li>
</ul>
<p><strong>Webstrom</strong></p>
<ul>
<li>收费</li>
<li>前端开发利器</li>
<li>硬件要求高</li>
</ul>
<p>浏览器推荐使用Chrome；开发者工具推荐使用Vscode</p>
<h3 id="VsCode的下载与配置"><a href="#VsCode的下载与配置" class="headerlink" title="VsCode的下载与配置"></a>VsCode的下载与配置</h3><p><strong>VScode的下载</strong></p>
<p><a href="https://code.visualstudio.com/download">VSCode的下载地址</a></p>
<p><strong>VScode快捷键</strong></p>
<ul>
<li><p>新建一个html文档！+ enter</p>
</li>
<li><p>注释：选中然后command+&#x2F;</p>
</li>
</ul>
<p><strong>HTML注释</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是一段注释 --&gt;</span>  </span><br></pre></td></tr></table></figure>

<p><strong>设置</strong></p>
<p>保存时自动格式化：勾选format on save</p>
<p><strong>插件</strong></p>
<ul>
<li>live server</li>
</ul>
<h2 id="HTML5的简介"><a href="#HTML5的简介" class="headerlink" title="HTML5的简介"></a>HTML5的简介</h2><h3 id="网页的基本结构"><a href="#网页的基本结构" class="headerlink" title="网页的基本结构"></a>网页的基本结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>是H5的声明位于文档的最前面，处于标签之前。 他是网页必备的组成部分，避免浏览器的怪异模式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="基础标签"><a href="#基础标签" class="headerlink" title="基础标签"></a>基础标签</h2><h3 id="html标签"><a href="#html标签" class="headerlink" title="html标签"></a>html标签</h3><p><code>&lt;html&gt;</code>定义 HTML 文档，这个元素我们浏览器看到后就明白这是个HTML文档了，所以你的其它元素要包裹在它里面，标签限定了文档的开始点和结束点。</p>
<h3 id="head标签"><a href="#head标签" class="headerlink" title="head标签"></a>head标签</h3><p><code>&lt;head&gt;</code>标签用于定义文档的头部。文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。<br>head标签必须包含在html标签中</p>
<h3 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h3><p><code>&lt;meta&gt;</code>叫元信息&#x2F;元数据标签<br>提供有关页面的元信息, 比如针对搜索引擎和更新频度的描述和关键词,meta标签用来描述一个HTML网页文档的属性，关键词等</p>
<table>
<thead>
<tr>
<th><code>&lt;meta&gt;</code>标签的属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>charset</td>
<td>UTF-8</td>
<td>文档字符编码</td>
</tr>
<tr>
<td>name</td>
<td>charset、http-equiv、viewport</td>
<td>文档级元数据的名称</td>
</tr>
<tr>
<td>content</td>
<td></td>
<td>根据name的取值设置相应的值</td>
</tr>
</tbody></table>
<h3 id="title标签"><a href="#title标签" class="headerlink" title="title标签"></a>title标签</h3><p><code>&lt;title&gt;</code></p>
<ol>
<li>可定义文档的标题。</li>
<li>它显示在浏览器窗口的标题栏或状态栏上。</li>
<li><code>&lt;title&gt; </code>标签是 <code>&lt;head&gt;</code>标签中唯一必须要求包含的东西，就是说写head一定要写title</li>
<li><code>&lt;title&gt;</code>的增加有利于SEO优化</li>
</ol>
<blockquote>
<p>SEO是搜索引擎优化的英文缩写。通过对网站内容调整，满足搜索引擎的排名需求</p>
</blockquote>
<h3 id="body标签"><a href="#body标签" class="headerlink" title="body标签"></a>body标签</h3><p><code>&lt;body&gt;</code>标签定义文档的主体。<br>body 元素包含文档的所有内容（比如文本、超链接、图像、表格和列表等等。）<br>它会直接在页面中显示出来,也就是用户可以直观看到的内容</p>
<blockquote>
<p>body 元素有且只有一个</p>
</blockquote>
<h2 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>一个html文件中只能有一个h1标签，合理使用标签利于SEO</p>
<p>快捷键<code>h$*6</code>快速生成h1-h6六个标签</p>
</blockquote>
<p>** 正确使用标题标签 **</p>
<ul>
<li>请确保将 HTML 标题标签只用于标题。</li>
<li>不要为了让字体变粗变大而使用标题标签</li>
<li>正确使用标题标签有益于ESO</li>
</ul>
<h2 id="媒体标签"><a href="#媒体标签" class="headerlink" title="媒体标签"></a>媒体标签</h2><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><p><code>&lt;img&gt;</code>标签定义 HTML 页面中的图像</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;水果&quot;</span> <span class="attr">title</span>=<span class="string">&quot;苹果&quot;</span> <span class="attr">width</span>=<span class="string">&quot;10px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>图床网站：imgurl.org</p>
<table>
<thead>
<tr>
<th><code>&lt;img&gt;</code>标签的属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>src</td>
<td>路径（图片地址与名字）</td>
</tr>
<tr>
<td>alt</td>
<td>规定图像的替代文本(利于SEO优化)</td>
</tr>
<tr>
<td>width</td>
<td>规定图像的宽度</td>
</tr>
<tr>
<td>height</td>
<td>规定图像的高度</td>
</tr>
<tr>
<td>title</td>
<td>鼠标悬停在图片上给予提示</td>
</tr>
</tbody></table>
<h3 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">loop</span> <span class="attr">autoplay</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>绝对路径是电脑的盘符存储与访问的具体地址</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;E:\itbaizhanCode\1.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>两者相对关系，两者在同⼀路径下可以直接访问</p>
<ul>
<li>⼦级关系: &#x2F;</li>
<li>⽗级关系: ..&#x2F;</li>
<li>同级关系: .&#x2F;</li>
</ul>
<h3 id="网络路径"><a href="#网络路径" class="headerlink" title="网络路径"></a>网络路径</h3><p>具体的⽹络地址: <a href="http://www.baidu.com/">http://www.baidu.com</a></p>
<h2 id="超文本链接"><a href="#超文本链接" class="headerlink" title="超文本链接"></a>超文本链接</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>链接内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;a&gt;</code>标签里可以嵌套别的标签，比如图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./1.img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><code>&lt;a&gt;</code>标签的属性</th>
<th>描述</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>悬停描述文本</td>
<td></td>
</tr>
<tr>
<td>href</td>
<td>目标链接地址</td>
<td></td>
</tr>
<tr>
<td>name</td>
<td>链接名字</td>
<td></td>
</tr>
<tr>
<td>target</td>
<td>规定在何处打开链接文档</td>
<td>_blank</td>
</tr>
</tbody></table>
<h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p>超链接可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。<br>跳转到当前文档的某个部分的形式就是“锚点”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#hello&quot;</span>&gt;</span>跳转到当前页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>文本信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h2><p><code>&lt;p&gt;&lt;/p&gt;</code>段落标签</p>
<p>其他文本标签</p>
<ul>
<li><p><code>&lt;em&gt;</code> 定义着重文字</p>
</li>
<li><p><code>&lt;b&gt;</code> 定义粗体文本</p>
</li>
<li><p><code>&lt;i&gt;</code> 定义斜体子</p>
</li>
<li><p><code>&lt;strong&gt;</code> 定义加重语气</p>
</li>
<li><p><code>&lt;sub&gt;</code> 定义下标字</p>
</li>
<li><p><code>&lt;sup&gt;</code> 定义上标字</p>
</li>
<li><p><code>&lt;del&gt;</code> 定义删除字</p>
</li>
<li><p><code>&lt;span&gt;</code> 元素没有特定的含义</p>
</li>
<li><p><code>&lt;p&gt;&lt;/p&gt;</code>段落标签</p>
</li>
<li><p><code>&lt;br&gt;</code>换行标签 单标签    </p>
</li>
<li><p><code>&lt;hr&gt;</code>水平线标签 单标签</p>
</li>
</ul>
<blockquote>
<p>常用文本标签和段落是不同的，段落代表一段文本，而文本标签一般表示文本词汇</p>
</blockquote>
<h2 id="行、块、行内块元素"><a href="#行、块、行内块元素" class="headerlink" title="行、块、行内块元素"></a>行、块、行内块元素</h2><h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><p>**常见的块元素 **</p>
<p><code>&lt;h1&gt; &lt;h6&gt; &lt;p&gt; &lt;div&gt; &lt;ul&gt; &lt;ol&gt;</code></p>
<p>**特点 **</p>
<ul>
<li>自身独占一行</li>
<li>高度、宽度、内外边距都可以自定义</li>
<li>宽度默认是父元素的100%</li>
<li>块元素里可以放行内、行内块、块元素</li>
</ul>
<h3 id="行块元素"><a href="#行块元素" class="headerlink" title="行块元素"></a>行块元素</h3><p> <code>&lt;img&gt; &lt;input&gt; &lt;td&gt;</code>因为它们具有块元素的特点和行内元素的特点，故称为行内块元素。</p>
<p><strong>特点</strong></p>
<ul>
<li>和相邻的行内元素（包含行内块）在一行上，它们直接会有空白缝隙</li>
<li>一行可以显示多个（行内元素特点）</li>
<li>默认宽度就是内容的宽度（行内元素特点）</li>
</ul>
<p><strong>注意</strong></p>
<blockquote>
<p>段落元素（文字元素）内不能放块元素</p>
<p>例如，p标签里不能放div标签，h1中也不能放div</p>
</blockquote>
<h3 id="行元素"><a href="#行元素" class="headerlink" title="行元素"></a>行元素</h3><p><code>&lt;a&gt; &lt;span&gt; &lt;li&gt;</code></p>
<p><strong>特点</strong></p>
<ul>
<li>相邻行内元素在一行，一行可以显示多个。</li>
<li>高度、宽度的设置无效，只会被文字撑开。</li>
<li>默认宽度就是文本撑开的长度</li>
<li>行内元素只能容纳行内元素和文本</li>
</ul>
<p><strong>注意：</strong></p>
<blockquote>
<p>超链接里不能容纳超链接</p>
<p>超链接可以放块级元素，但是为了代码工整，最好把a标签转换为块元素 </p>
</blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表是一列项目，列表项目使用数字进行标记。 有序列表始于<code>&lt;ol&gt;</code>标签。每个列表项始于<code> &lt;li&gt;</code>标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>水果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>蔬菜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>type属性<code>&lt;ol&gt;</code>的属性type拥有的选项</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">type</span>=<span class="string">&quot;A&quot;</span>&gt;</span>水果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">type</span>=<span class="string">&quot;A&quot;</span>&gt;</span>蔬菜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>有序标签嵌套</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>水果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>蔬菜</span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">type</span>=<span class="string">&quot;A&quot;</span>&gt;</span>青菜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">type</span>=<span class="string">&quot;A&quot;</span>&gt;</span>白菜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">type</span>=<span class="string">&quot;A&quot;</span>&gt;</span>菠菜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>肉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记<br>无序列表始于 <code>&lt;ul&gt;</code> 标签。每个列表项始于<code>&lt;li&gt;</code> 标签。</p>
<p><code>&lt;ul&gt;</code>是块元素，<code>&lt;li&gt;</code>是行内元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>水果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>蔬菜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>常见应用场景</strong></p>
<ul>
<li>无序标签的列表效果</li>
<li>导航效果</li>
</ul>
<h3 id="列表标签之自定义列表"><a href="#列表标签之自定义列表" class="headerlink" title="列表标签之自定义列表"></a>列表标签之自定义列表</h3><p><strong>自定义列表实现</strong><br>自定义列表以 <code>&lt;dl&gt;</code> 标签开始。每个自定义列表项以 <code>&lt;dt&gt;</code> 开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code> 开始。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>数字<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>字母<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>A<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>B<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>应用场景</strong><br>在一些需要对列表进行解释的部分，可以使用自定义列表</p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><p><code>&lt;table&gt;``&lt;tr&gt;</code>表示行<code>&lt;td&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格的标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>01<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>li<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表格元素的子标签"><a href="#表格元素的子标签" class="headerlink" title="表格元素的子标签"></a>表格元素的子标签</h3><ul>
<li>**<code>&lt;position&gt;</code>**表格的标题(用的不多）</li>
<li>**<code>&lt;thead&gt;</code>**表格的头部</li>
<li>**<code>&lt;tbody&gt;</code>**标签表格的本体</li>
<li>**<code>&lt;tfoot&gt;</code>**标签表格底部</li>
<li>**<code>&lt;colgroup&gt;</code>**标签设置列宽（如果table设置了列宽，第三列会自动适配即50px-20px&#x3D;30px）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;50px&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">colgroup</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--设置列宽--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">col</span> <span class="attr">width</span>=<span class="string">&quot;10px&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">col</span> <span class="attr">width</span>=<span class="string">&quot;10px&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">colgroup</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>第一列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>第二列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>第三列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>align</td>
<td>水平对齐方式</td>
<td>left|center|right</td>
</tr>
<tr>
<td>border</td>
<td>表格的边框</td>
<td>0|1</td>
</tr>
<tr>
<td>width</td>
<td>表格的宽度</td>
<td>px|%</td>
</tr>
<tr>
<td>height</td>
<td>表格的高度</td>
<td>px</td>
</tr>
<tr>
<td>cellspacing</td>
<td>单元格间距, 单元格之间的距离</td>
<td>px</td>
</tr>
<tr>
<td>cellpadding</td>
<td>单元格内容和单元格边框的间距</td>
<td>px</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h3><p>标题四合并单元格</p>
<ul>
<li>colspan</li>
<li>rowspan</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>两列合并<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>两行合并<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>功能：交互和收集客户信息</p>
<p>表单由：表单容器和表单元素组成</p>
<h3 id="表单容器"><a href="#表单容器" class="headerlink" title="表单容器"></a>表单容器</h3><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>action</td>
<td>外部链接</td>
</tr>
<tr>
<td>method</td>
<td>get|post</td>
</tr>
</tbody></table>
<h3 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h3><p><strong>输入元素</strong></p>
<p><code>&lt;input&gt;</code></p>
<table>
<thead>
<tr>
<th>type的值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td>单行文本框</td>
</tr>
<tr>
<td>radio</td>
<td>单选框</td>
</tr>
<tr>
<td>cheackbox</td>
<td>复选框</td>
</tr>
<tr>
<td>password</td>
<td>密码框</td>
</tr>
<tr>
<td>number</td>
<td>数字框</td>
</tr>
<tr>
<td>file</td>
<td>文本域</td>
</tr>
<tr>
<td>date</td>
<td>日期框</td>
</tr>
</tbody></table>
<blockquote>
<p>单选框，复选框 checked默认选中</p>
</blockquote>
<p><code>&lt;input&gt;</code>默认样式是单行文本框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">size</span>=<span class="string">&quot;40&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span> <span class="attr">name</span>=<span class="string">&quot;txt&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入xxx&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><code>&lt;input&gt;</code>的属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>size</td>
<td>数值</td>
<td>可视长度</td>
</tr>
<tr>
<td>maxlength</td>
<td>数值</td>
<td>最大可输入的字符长度</td>
</tr>
<tr>
<td>name</td>
<td>文本</td>
<td>名称</td>
</tr>
<tr>
<td>placeholder</td>
<td>本文</td>
<td>提示词</td>
</tr>
</tbody></table>
<p>**多行文本框 **</p>
<p>也叫文本域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tetxarea</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;6&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入...&quot;</span>&gt;</span></span><br><span class="line">输入的内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><code>&lt;textarea&gt;</code>的属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>rows</td>
<td>数值</td>
<td>本文框显示的行</td>
</tr>
<tr>
<td>cols</td>
<td>数值</td>
<td>本文框显示的列</td>
</tr>
<tr>
<td>placeholder</td>
<td>文本</td>
<td>文本框的提示词</td>
</tr>
</tbody></table>
<p><strong>下拉框</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">selected</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>列表框</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">selected</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>按钮</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(我是普通按钮&quot;</span>）</span></span><br><span class="line"><span class="tag">  <span class="attr">普通按钮</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="attr">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--弹出一个对话框显示“我是普通按钮”--&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>type的属性的值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>submit</td>
<td>当点击时，会向服务器发送请求</td>
</tr>
<tr>
<td>reset</td>
<td>还原表单的初始状态</td>
</tr>
<tr>
<td>button</td>
<td>普通按钮</td>
</tr>
</tbody></table>
<p><strong>标记标签</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">“1”</span>&gt;</span>是</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">“2”</span>&gt;</span>否</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS</title>
    <url>/CSS/</url>
    <content><![CDATA[<p>CSS（Cascading Style Sheets）是一种用于样式化网页的标记语言。与HTML一起使用，CSS可以控制网页上各种元素的外观和布局，包括文本样式、颜色、字体、大小、间距、边框、背景等。</p>
<span id="more"></span>

<h2 id="CSS的样式"><a href="#CSS的样式" class="headerlink" title="CSS的样式"></a>CSS的样式</h2><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><p>也叫行内样式</p>
<p>特点：优先级最高</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">“color:red”</span>&gt;</span>example<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过给标签添加属性，修饰目标元素</p>
<h3 id="内嵌样式"><a href="#内嵌样式" class="headerlink" title="内嵌样式"></a>内嵌样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">		* &#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">color</span>:red</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h3><p>外部引入一个<strong>example.css</strong>文件,可以是本地路径或是远程路径</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">“css/examle.css|https://example.com/example.css</span>&quot;&quot;&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ol>
<li>优点级: id &gt; class &gt; tag</li>
<li>通过!important可以设置优先级权重(常规不推荐)</li>
<li>通过行内样式提高优先级</li>
</ol>
<h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><p>匹配所有标签</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><p><strong>ID选择器</strong></p>
<p>选择属性id为name的元素，id是唯一的</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#name</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">“name”</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>类选择器</strong></p>
<p>选择属性class值为name的元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.name</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">“name”</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>标签选择器</strong></p>
<p>选择所有<code>&lt;h2&gt;</code>标签	</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>组合选择器</strong></p>
<p>选择h1和h2两种元素（或）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>选择属性class值为ac且元素为div的元素（且）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.ab</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><p><strong>同辈元素</strong></p>
<p>+和~</p>
<p>name标签同一层级的所有span标签</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#name</span>+<span class="selector-tag">span</span>&#123;&#125;</span><br><span class="line"><span class="selector-id">#name</span>~n <span class="selector-tag">span</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>子元素</strong></p>
<p>name标签下的所有子元素种所有的span标签</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#name</span>&gt;<span class="selector-tag">span</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>后代元素</strong></p>
<p>空格</p>
<p>匹配#name元素层级下的所有span元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#name</span> <span class="selector-tag">span</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p> <strong>包含属性</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span><span class="selector-attr">[title]</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>精准匹配</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span><span class="selector-attr">[title]</span>=name&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>匹配值的第一个为n的属性的h2标签</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span><span class="selector-attr">[title^=n]</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>匹配值的最后一个字为n的属性的h2标签</strong>**</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span><span class="selector-attr">[title$=e]</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>匹配值中有a的属性的h2标签</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span><span class="selector-attr">[title*=a]</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><p><strong>匹配第一个元素</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>匹配最后一个元素</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>匹配第n个元素</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>匹配除classs属性的值为three之外的所有元素</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.three</span>)</span><br></pre></td></tr></table></figure>

<p><strong>匹配前三个元素</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(-n+<span class="number">3</span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>匹配偶数元素</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n)&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>匹配1、4、7..元素</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n+<span class="number">1</span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h3><p><strong>鼠标点击显示的样式</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>选中的单选框样式</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-pseudo">:checked</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>表单有效时</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:valid</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>表单无效时</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:invalid</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p><strong>超链接常用伪类样式</strong></p>
<p><strong>超链接的默认样式</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:black;</span><br><span class="line">	text-:none</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>访问后的样式</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>：red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>鼠标悬停的样式</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>链接激活时样式，点下不送鼠标</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">content</span>:<span class="string">&quot;[&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:after</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">	<span class="attribute">content</span>:<span class="string">&quot;]&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以添加到任意标签上，必须包含content属性，content可以包含文本或图片，加上之后就会出现在网页元素的前或后</p>
</blockquote>
<h2 id="常用样式"><a href="#常用样式" class="headerlink" title="常用样式"></a>常用样式</h2><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><p><strong>font-size：字体大小</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-size</span>:<span class="number">16px</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>chrome浏览器默认font-size为16，web应用推荐使用14px,最小设备12px</p>
</blockquote>
<p><strong>font-family：字体</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: Microsoft YaHei|Gill Sans|Gill Sans MT|Calibri|Trebuchet MS|sans-serif</span><br></pre></td></tr></table></figure>

<blockquote>
<p>windows PC端默认微软雅黑</p>
</blockquote>
<p><strong>font-style：倾斜</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-style</span>: itali</span><br></pre></td></tr></table></figure>

<p><strong>font-weight：粗细</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-weight</span>:<span class="number">100</span>-<span class="number">900</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>400 &gt; normal 700&gt;bold 100&gt; lighter 值必须为100倍数</p>
</blockquote>
<h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><p><strong>color 字体颜色</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">color</span>: red</span><br></pre></td></tr></table></figure>

<blockquote>
<p>值：16进制｜rgb（255,255,255）</p>
<p>递进色：#000 #333 #666 #999</p>
</blockquote>
<p><strong>RGB颜色</strong></p>
<ul>
<li>英文：</li>
<li>16进值数</li>
<li>RGB函数</li>
</ul>
<p><strong>text-align 文本对齐方式</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: lefe|center|right</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：父元素必须为块级元素</p>
</blockquote>
<p><strong>line-height 行高</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">line-height</span>: normal</span><br></pre></td></tr></table></figure>

<blockquote>
<p>值：normal</p>
<p>行高默认由字体决定,</p>
<p>用法：多行文本行与行之间的距离</p>
<p>注：行高可以使文本垂直居中；行高的单位可以是px也可以不加任何单位（相当于font-size的倍数）</p>
</blockquote>
<p><strong>text-decoration 文本修饰</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span>: <span class="built_in">underline</span>(下划线)|line-through（中划线）|over-line（上划线）|<span class="built_in">none</span>(默认值</span><br></pre></td></tr></table></figure>

<p><strong>text- indent 首行缩进</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-indent</span>: <span class="number">10px</span></span><br></pre></td></tr></table></figure>

<h3 id="边框样式"><a href="#边框样式" class="headerlink" title="边框样式"></a>边框样式</h3><p><strong>border 边框</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span></span><br><span class="line">border-width: <span class="number">1px</span></span><br></pre></td></tr></table></figure>

<p><strong>border-radius边框圆角</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span></span><br></pre></td></tr></table></figure>

<p><strong>border-box</strong></p>
<h3 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a>背景样式</h3><p><strong>background-color 背景颜色</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">backgound-<span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>)|<span class="built_in">rgb</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)|red</span><br></pre></td></tr></table></figure>

<blockquote>
<p>值：color|rgb|rgba()</p>
<p>rgba(0,0,0,1)透明度的取值0-1，背景透明，子元素不会透明</p>
<p>元素透明opacity值0-1,当前元素和子元素都会透明</p>
</blockquote>
<p>background-image 设置背景图片</p>
<p>background-image: url(本地路径｜远程路径)</p>
<blockquote>
<p>注：如果图没有填满容器，会重复（平铺）</p>
</blockquote>
<p><strong>backaground-repeat 平铺</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">backgroud-repeat: repeat-x|repeat-y|no-repeat</span><br></pre></td></tr></table></figure>

<blockquote>
<p>值：repeat-x|repeat-y|no-repeat</p>
</blockquote>
<p><strong>background-size 设置背景图片的大小</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: cover|contain|<span class="number">100%</span> <span class="number">100%</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>值：</p>
<ul>
<li>contain:等比例放大，以长边容器为准-</li>
<li>cover：等比例放大，以短边容器为准</li>
<li>100% 100% ：完全填充，如果长宽比不一致，会拉伸</li>
</ul>
</blockquote>
<p><strong>background-position 背景位置</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-position</span><span class="selector-pseudo">:left</span>|<span class="attribute">right</span>|center|<span class="attribute">top</span>|center|<span class="attribute">bottom</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">20px</span> <span class="number">20px</span></span><br></pre></td></tr></table></figure>

<p><strong>padding 内填充</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">40px</span></span><br><span class="line">&#125;</span><br><span class="line">//上下为<span class="number">10px</span>左右为<span class="number">40px</span></span><br><span class="line"><span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span></span><br><span class="line">&#125;</span><br><span class="line">//上<span class="number">10px</span>;右<span class="number">20px</span>;下<span class="number">30px</span>;左<span class="number">40px</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：可以通过padding设置容器内容与边框的距离</p>
<p>默认情况下设置了padding的容器，容器的整个尺寸会发生变化</p>
</blockquote>
<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h3 id="border外边框"><a href="#border外边框" class="headerlink" title="border外边框"></a>border外边框</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> <span class="number">2px</span> <span class="number">3px</span> <span class="number">4px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="margin外边距"><a href="#margin外边距" class="headerlink" title="margin外边距"></a>margin外边距</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin</span>: <span class="number">1px</span> <span class="number">2px</span> <span class="number">3px</span> <span class="number">4px</span>;</span><br></pre></td></tr></table></figure>

<p>margin-left值为auto时，盒子居中</p>
<h3 id="行、块、行块元素的转换"><a href="#行、块、行块元素的转换" class="headerlink" title="行、块、行块元素的转换"></a>行、块、行块元素的转换</h3><p><strong>行、块、行内块元素之间可以互相转换</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">diskplay: <span class="built_in">inline-block</span>(元素变为行块属性)|<span class="built_in">inline</span>(行级元素)|block（块级元素）|<span class="built_in">none</span>(隐藏)</span><br></pre></td></tr></table></figure>

<p><strong>行块元素的留白</strong>          </p>
<p>由于换行符的存在，行内块元素边缘会有4px的留白  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin-left</span>: -<span class="number">8px</span></span><br></pre></td></tr></table></figure>

<p>例如img是一个行块元素，一般直接转换成块元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>:block;</span><br></pre></td></tr></table></figure>

<h3 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h3><ul>
<li><p>有高度的盒子，当内容的高度超出盒子高度，内容溢出</p>
</li>
<li><p>无高度与宽度的盒子，不会出现溢出</p>
</li>
</ul>
<h3 id="盒子模型的计算方式"><a href="#盒子模型的计算方式" class="headerlink" title="盒子模型的计算方式"></a>盒子模型的计算方式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">boxsizing: border-box；</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>默认值 content-box</strong></p>
<ul>
<li>实际空间 &#x3D; width|height + padding + border</li>
</ul>
</li>
<li><p><strong>推荐 border-box</strong></p>
<ul>
<li>实际空间 &#x3D; width+height(包含padding和border)</li>
<li>内容空间&#x3D;width-border-padding</li>
</ul>
</li>
</ul>
<h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p><strong>浮动有左浮动、右浮动、居中</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">float</span>: left|center|right;</span><br></pre></td></tr></table></figure>

<p><strong>清除浮动</strong></p>
<blockquote>
<p>元素使用浮动，父元素必须清除浮动，否则会导致父元素高度的塌缩</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden</span><br></pre></td></tr></table></figure>

<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: static（默认）|absolute|fixed|relative;</span><br></pre></td></tr></table></figure>

<p><strong>相对定位</strong></p>
<p>相对定位:相对自身原始位置, 支持left|top|right|bottom属性</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: relative</span><br><span class="line">left: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">20px</span>;</span><br></pre></td></tr></table></figure>

<p><strong>绝对定位</strong></p>
<ul>
<li><p>父元素有定位(除static),子元素absolute就相对父元素</p>
</li>
<li><p>父元素没有定位, 子元素absolute时就相对body</p>
</li>
</ul>
<p> <strong>示例</strong></p>
<ul>
<li>父元素</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">postion: relative;</span><br></pre></td></tr></table></figure>

<ul>
<li>子元素</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>:<span class="number">20px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">20px</span>;</span><br></pre></td></tr></table></figure>

<p> <strong>居中</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">40px</span>;</span><br><span class="line">  postion: absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>固定定位</strong></p>
<p>不受父元素约束</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">postion: fixed;</span><br></pre></td></tr></table></figure>

<h3 id="Z轴"><a href="#Z轴" class="headerlink" title="Z轴"></a>Z轴</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">z-index</span>: <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>Z轴的值越大，显示在越上层</p>
<p>Z轴的值为负数，显示在主图层下</p>
<h2 id="网页设计技巧"><a href="#网页设计技巧" class="headerlink" title="网页设计技巧"></a>网页设计技巧</h2><h3 id="初始化样式"><a href="#初始化样式" class="headerlink" title="初始化样式"></a>初始化样式</h3><p><strong>初始化全局样式</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>清除浮动</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>初始化body</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">   &lt;!--最小宽度设置为<span class="number">1080px</span>--&gt;</span><br><span class="line">   <span class="attribute">min-width</span>: <span class="number">1080px</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">   <span class="attribute">font-family</span>: <span class="string">&quot;microsoft-Yahei&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>清除列表默认样式</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>清除a标签默认样式</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">	<span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>设置改变margin样式的类</strong></p>
<p>CSS中提前设置一个类的样式，在HTML文件中直接引用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">m-t-<span class="number">16</span>&#123;</span><br><span class="line">  <span class="attribute">margin-top</span>:<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h3><p><strong>鼠标指针变化</strong></p>
<p>鼠标指针放在元素上会变为手</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: pointer;</span><br></pre></td></tr></table></figure>

<p><strong>元素水平居中</strong></p>
<ul>
<li>只能对块元素使用，让子元素居中，且子元素必须为行元素；若子元素为块元素，转换为行元素</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: center；</span><br></pre></td></tr></table></figure>

<ul>
<li>让块级元素本身居中</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br></pre></td></tr></table></figure>

<ul>
<li>边距的值为负的宽度的一半</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: abosolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>；</span><br><span class="line">margion-left: -<span class="number">20px</span>; </span><br></pre></td></tr></table></figure>

<h2 id="CSS-3新特性"><a href="#CSS-3新特性" class="headerlink" title="CSS 3新特性"></a>CSS 3新特性</h2><h3 id="关于CSS的版本"><a href="#关于CSS的版本" class="headerlink" title="关于CSS的版本"></a>关于CSS的版本</h3><ul>
<li>CSS 1</li>
<li>CSS 2 优点兼容性好 缺点功能有限</li>
<li>CSS 3 主流版本 兼容性针对IE浏览器差</li>
</ul>
<blockquote>
<p>caniuse.com 查询css版本兼容情况</p>
</blockquote>
<p>CSS3新特性</p>
<ul>
<li>丰富的选择器</li>
<li>丰富的样式</li>
<li>弹性布局</li>
<li>网格布局</li>
<li>响应式布局</li>
<li>过渡与动画</li>
</ul>
<h3 id="服务器字体"><a href="#服务器字体" class="headerlink" title="服务器字体"></a>服务器字体</h3><p><strong>字体的生成</strong></p>
<ul>
<li>客户端字体：浏览器所在系统的字体</li>
<li>服务端字体: 浏览网页时先下载字体文件，再渲染</li>
</ul>
<p><strong>图标</strong></p>
<ul>
<li><p>使用小图片设置为背景图片</p>
<ul>
<li>不利于维护</li>
<li>占用带宽</li>
<li>放大会失真（位图）</li>
</ul>
</li>
<li><p>雪碧图或者叫精灵图</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.font</span>&#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../img/icon.png</span>)</span><br><span class="line">	background-size: <span class="number">32px</span> <span class="number">32px</span>;</span><br><span class="line">	<span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">32px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用服务器字体图标<ul>
<li>矢量图，不失真</li>
<li>占用资源少</li>
<li>利于维护</li>
</ul>
</li>
</ul>
<p>下载文件，保留字体文件和css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./iconfont<span class="selector-class">.css</span>&quot;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">awsomefont</span><br><span class="line">&lt;<span class="selector-tag">i</span> class=&quot;fa fa-xxx&quot;&gt;&lt;/<span class="selector-tag">i</span>&gt;</span><br><span class="line">阿里巴巴矢量图库</span><br><span class="line">&lt;<span class="selector-tag">i</span> class=&quot;iconfont <span class="attribute">icon</span>-xxx&quot;&gt;&lt;/<span class="selector-tag">i</span>&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="http://fontawesome.com/">http://fontawesome.com</a><br><a href="http://www.iconfont.cn/%EF%BC%88%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%BA%93%EF%BC%89">http://www.iconfont.cn/（阿里巴巴矢量图库）</a></p>
</blockquote>
<h3 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h3><ul>
<li>浮动布局特点<ul>
<li>优点：兼容性CSS1</li>
<li>缺点：清除浮动<ul>
<li>水平居中不方便</li>
<li>元素底部对齐</li>
</ul>
</li>
</ul>
</li>
<li>弹性布局 (flex布局)<ul>
<li>优点：简洁</li>
<li>缺点：ie浏览器不兼容</li>
<li>场景：水平或垂直均分</li>
</ul>
</li>
</ul>
<p><strong>用法</strong></p>
<p> <strong>父元素</strong></p>
<ul>
<li>display:flex</li>
<li>flex-wrap: wrap</li>
<li>flex-direction：方向，决定主轴和辅粙<ul>
<li>row : 水平方向为主轴，垂直方向为辅轴(默认)</li>
<li>column：垂直方向为主轴，水平方向为辅轴</li>
</ul>
</li>
<li>justify-content: 主轴对齐方式,默认水平方向为主</li>
<li>align-items: 辅轴对齐方式</li>
</ul>
<p> <strong>子元素</strong></p>
<ul>
<li>flex<ul>
<li>水平或垂直平均分配</li>
<li>取值: flex:整数(份数)</li>
</ul>
</li>
<li>width+flex<ul>
<li>一边固定 ，一边自适应</li>
<li>先渲染带有width的元素，剩下给flex元素</li>
</ul>
</li>
<li>width<ul>
<li>水平排列并换行</li>
</ul>
</li>
<li>align-self<ul>
<li>子元素辅轴的对齐方式</li>
<li>覆盖父元素align-items的值</li>
</ul>
</li>
</ul>
<blockquote>
<p>子元素flex和width只能设置一个</p>
</blockquote>
<h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p>响应式网站：一个网站不同的设备使用不同的分辨率</p>
<p>自适应网站：不同的终端加载不同的网站</p>
<p>意义</p>
<ul>
<li>缩短开发周期</li>
<li>降低开发成本</li>
</ul>
<p>解决方法</p>
<ul>
<li>媒体查询（Media Queries）</li>
<li>Respond.js<br>媒体查询（Media Queries）是CSS3引入的一种功能，允许开发者根据不同的设备特性（如屏幕大小、分辨率、方向等）应用不同的样式。这在响应式设计（Responsive Design）中尤为重要，因为它使得网页能够根据设备的特性进行适配，从而提供更好的用户体验。</li>
</ul>
<h4 id="媒体查询的基本语法"><a href="#媒体查询的基本语法" class="headerlink" title="媒体查询的基本语法"></a>媒体查询的基本语法</h4><p>媒体查询的基本语法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> media-type <span class="keyword">and</span> (media-feature) &#123;</span><br><span class="line">    <span class="comment">/* CSS rules */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>media-type</code>：指定媒体类型，如<code>screen</code>（屏幕设备）、<code>print</code>（打印设备）等。可以省略，默认为<code>all</code>。</li>
<li><code>media-feature</code>：指定媒体特性，如宽度、高度、分辨率等。</li>
</ul>
<h4 id="常用的媒体特性"><a href="#常用的媒体特性" class="headerlink" title="常用的媒体特性"></a>常用的媒体特性</h4><ol>
<li><p><strong>宽度和高度</strong>：</p>
<ul>
<li><code>width</code>、<code>min-width</code>、<code>max-width</code>：视口宽度</li>
<li><code>height</code>、<code>min-height</code>、<code>max-height</code>：视口高度</li>
</ul>
</li>
<li><p><strong>设备宽度和高度</strong>：</p>
<ul>
<li><code>device-width</code>、<code>min-device-width</code>、<code>max-device-width</code>：设备的宽度</li>
<li><code>device-height</code>、<code>min-device-height</code>、<code>max-device-height</code>：设备的高度</li>
</ul>
</li>
<li><p><strong>方向</strong>：</p>
<ul>
<li><code>orientation</code>：设备方向，可取值<code>portrait</code>（纵向）或<code>landscape</code>（横向）</li>
</ul>
</li>
<li><p><strong>分辨率</strong>：</p>
<ul>
<li><code>resolution</code>、<code>min-resolution</code>、<code>max-resolution</code>：设备分辨率，通常以dpi（每英寸点数）或dppx（每像素密度）为单位</li>
</ul>
</li>
</ol>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h4 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 适用于所有设备 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当视口宽度大于等于600px时应用 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当视口宽度小于600px时应用 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">599px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightcoral;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="复杂的媒体查询"><a href="#复杂的媒体查询" class="headerlink" title="复杂的媒体查询"></a>复杂的媒体查询</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 当视口宽度在600px到800px之间且设备方向为纵向时应用 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">600px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">800px</span>) <span class="keyword">and</span> (<span class="attribute">orientation</span>: portrait) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightyellow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当设备分辨率为2dppx或更高时应用 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-resolution</span>: <span class="number">2dppx</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightpink;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="媒体查询在响应式设计中的应用"><a href="#媒体查询在响应式设计中的应用" class="headerlink" title="媒体查询在响应式设计中的应用"></a>媒体查询在响应式设计中的应用</h4><p>媒体查询在响应式设计中非常重要，它允许我们针对不同的设备和屏幕尺寸进行优化，以提供最佳的用户体验。</p>
<h4 id="1-响应式布局"><a href="#1-响应式布局" class="headerlink" title="1. 响应式布局"></a>1. 响应式布局</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 默认样式：适用于移动设备 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 平板设备样式：适用于视口宽度大于等于768px */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 桌面设备样式：适用于视口宽度大于等于1024px */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1024px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-图片响应"><a href="#2-图片响应" class="headerlink" title="2. 图片响应"></a>2. 图片响应</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 默认图片样式 */</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 高清屏幕样式：适用于设备分辨率为2dppx或更高 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-resolution</span>: <span class="number">2dppx</span>) &#123;</span><br><span class="line">    <span class="selector-tag">img</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="built_in">url</span>(<span class="string">&#x27;high-resolution-image.png&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="媒体查询的常见用法"><a href="#媒体查询的常见用法" class="headerlink" title="媒体查询的常见用法"></a>媒体查询的常见用法</h4><h4 id="1-针对不同设备的媒体查询"><a href="#1-针对不同设备的媒体查询" class="headerlink" title="1. 针对不同设备的媒体查询"></a>1. 针对不同设备的媒体查询</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 移动设备 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">767px</span>) &#123;</span><br><span class="line">    <span class="comment">/* CSS rules */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 平板设备 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1023px</span>) &#123;</span><br><span class="line">    <span class="comment">/* CSS rules */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 桌面设备 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1024px</span>) &#123;</span><br><span class="line">    <span class="comment">/* CSS rules */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-针对打印的媒体查询"><a href="#2-针对打印的媒体查询" class="headerlink" title="2. 针对打印的媒体查询"></a>2. 针对打印的媒体查询</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">    <span class="comment">/* 打印时应用的CSS规则 */</span></span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">12pt</span>;</span><br><span class="line">        <span class="attribute">color</span>: black;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用媒体查询的最佳实践"><a href="#使用媒体查询的最佳实践" class="headerlink" title="使用媒体查询的最佳实践"></a>使用媒体查询的最佳实践</h3><ol>
<li><p><strong>移动优先</strong>：</p>
<ul>
<li>优先设计移动设备的样式，然后使用媒体查询针对较大的屏幕进行调整。这样可以确保在移动设备上有良好的基础样式。</li>
<li>例如：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 移动设备样式 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 较大屏幕的样式 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>避免使用设备特定的查询</strong>：</p>
<ul>
<li>尽量使用视口宽度而不是设备宽度，以确保在各种设备上都能很好地展示。</li>
</ul>
</li>
<li><p><strong>保持简单和组织性</strong>：</p>
<ul>
<li>尽量减少嵌套的媒体查询，保持代码简单易读。</li>
<li>使用注释和有意义的类名来组织和标识不同的媒体查询。</li>
</ul>
</li>
</ol>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>媒体查询是实现响应式设计的核心工具，能够根据不同设备的特性动态地应用不同的样式。通过合理地使用媒体查询，开发者可以创建出适应各种设备的流畅而直观的用户界面，提升用户体验。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Linq</title>
    <url>/Linq/</url>
    <content><![CDATA[<p>Language Integrated Query（LINQ）是由微软引入的一组技术，用于在.NET编程语言中实现对数据的查询和操作。LINQ提供了一种一致的方式来访问和操作不同类型的数据源，例如数据库、XML文档、内存中的数据集合等，使得数据查询操作能够直接在编程语言（如C#和VB.NET）中以类似SQL的语法进行。<span id="more"></span>以下是LINQ的一些关键特性和组件：</p>
<ol>
<li><p><strong>统一的查询语法</strong>：</p>
<ul>
<li>LINQ使用统一的语法来查询不同的数据源，使得开发者无需为不同的数据源学习不同的查询语言。例如，查询数据库、XML文件或内存中的集合可以使用相同的LINQ语法。</li>
</ul>
</li>
<li><p><strong>类型安全和智能感知</strong>：</p>
<ul>
<li>LINQ查询在编译时进行类型检查，这减少了运行时错误的可能性。使用Visual Studio等IDE时，LINQ还提供了智能感知（IntelliSense）功能，帮助开发者编写查询。</li>
</ul>
</li>
<li><p><strong>延迟执行</strong>：</p>
<ul>
<li>LINQ支持延迟执行，意味着查询不会立即执行，而是在对查询结果进行迭代时才执行。这有助于优化性能，避免不必要的数据提取。</li>
</ul>
</li>
<li><p><strong>LINQ的实现</strong>：</p>
<ul>
<li><strong>LINQ to Objects</strong>：用于查询内存中的对象集合，如数组、List等。</li>
<li><strong>LINQ to SQL</strong>：用于查询SQL Server数据库，将LINQ查询翻译为T-SQL语句。</li>
<li><strong>LINQ to Entities（Entity Framework）</strong>：用于查询数据库，支持多种数据库提供商，提供了更高级的数据访问和操作功能。</li>
<li><strong>LINQ to XML</strong>：用于查询和操作XML文档，提供了对XML元素、属性和节点的强类型支持。</li>
<li><strong>PLINQ（Parallel LINQ）</strong>：用于并行查询，利用多核处理器提高查询性能。</li>
</ul>
</li>
<li><p><strong>基础组件</strong>：</p>
<ul>
<li><strong>查询操作符</strong>：LINQ提供了一组标准的查询操作符，如<code>Select</code>、<code>Where</code>、<code>OrderBy</code>、<code>GroupBy</code>、<code>Join</code>等，用于筛选、排序、分组和关联数据。</li>
<li><strong>查询表达式</strong>：使用类似SQL的查询表达式（Query Expression），或者方法链（Method Syntax）来编写LINQ查询。</li>
</ul>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LINQ to Objects 示例</span></span><br><span class="line"><span class="built_in">int</span>[] numbers = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> evenNumbers = <span class="keyword">from</span> num <span class="keyword">in</span> numbers</span><br><span class="line">                  <span class="keyword">where</span> num % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">                  <span class="keyword">select</span> num;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法链语法</span></span><br><span class="line"><span class="keyword">var</span> evenNumbersMethodSyntax = numbers.Where(num =&gt; num % <span class="number">2</span> == <span class="number">0</span>).Select(num =&gt; num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> num <span class="keyword">in</span> evenNumbers)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(num);  <span class="comment">// 输出 2, 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>LINQ通过提供一致的查询体验和强类型支持，提高了代码的可读性和可维护性，是.NET生态系统中一个强大的工具。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>linq</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript</title>
    <url>/JavaScript/</url>
    <content><![CDATA[<p>JavaScript（简称JS）是一种轻量级、解释型或即时编译型的编程语言，主要用于Web开发。它是一种基于原型的、动态类型的语言，支持面向对象、命令式和函数式编程风格。<span id="more"></span>以下是JavaScript的一些关键特性和组件：</p>
<h2 id="JavaScript入门"><a href="#JavaScript入门" class="headerlink" title="JavaScript入门"></a>JavaScript入门</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>JavaScript是一个跨平台，面对对象的脚本语言</p>
<p>脚本语言：没有专门的编译器，宿主在浏览器端，</p>
<p>主流的浏览器都支持js，代码由浏览器解释执行的方式</p>
<h3 id="JavaScript的历史"><a href="#JavaScript的历史" class="headerlink" title="JavaScript的历史"></a>JavaScript的历史</h3><p>netScape推出了livescript，后与SUM公司合并，改名为Javascript</p>
<h3 id="JavaScript的组成部分"><a href="#JavaScript的组成部分" class="headerlink" title="JavaScript的组成部分"></a>JavaScript的组成部分</h3><ul>
<li><p>ECMAScript</p>
<ul>
<li>脚本语言的规范</li>
</ul>
</li>
<li><p>BOM</p>
<ul>
<li>浏览器的对象模型，和浏览器交互</li>
</ul>
</li>
<li><p>DOM</p>
<ul>
<li>文档对象模型</li>
</ul>
</li>
</ul>
<h3 id="在html中使用js的方式有哪些"><a href="#在html中使用js的方式有哪些" class="headerlink" title="在html中使用js的方式有哪些"></a>在html中使用js的方式有哪些</h3><ul>
<li><p>行内脚本：</p>
<ul>
<li>页面中使用的脚本</li>
</ul>
</li>
<li><p>内部脚本：</p>
<ul>
<li>在<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>中通过<code>&lt;script&gt;</code>标签添加的脚本</li>
<li>缺点：不适合多张页面的脚本复用</li>
</ul>
</li>
<li><p>外部脚本：<code> &lt;script src=&quot;js/test.js&quot;&gt;&lt;/script&gt;</code></p>
<ul>
<li><p>需要单独创建一个拓展名为.js的文件</p>
</li>
<li><p>优点：单独维护一个脚本的文件</p>
</li>
<li><p>代码的复用</p>
</li>
<li><p>启用缓存</p>
</li>
</ul>
</li>
</ul>
<h3 id="Javascript的编写规范"><a href="#Javascript的编写规范" class="headerlink" title="Javascript的编写规范"></a>Javascript的编写规范</h3><ul>
<li>区分大小写</li>
<li>建议语句以;结尾</li>
<li>使用英文输入法</li>
<li><h2 id="注释-单行注释：-多行注释："><a href="#注释-单行注释：-多行注释：" class="headerlink" title="注释- 单行注释：//- 多行注释：/**/"></a>注释<br>- 单行注释：<code>//</code><br>- 多行注释：<code>/**/</code></h2></li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量的基本使用JavaScript-的变量"><a href="#变量的基本使用JavaScript-的变量" class="headerlink" title="变量的基本使用JavaScript 的变量"></a>变量的基本使用JavaScript 的变量</h3><p>JavaScript 是一种广泛使用的编程语言，尤其在网页开发中。变量是编程的基础概念之一，用于存储和操作数据。下面将详细介绍 JavaScript 中的变量。</p>
<p><strong>变量声明</strong></p>
<p>在 JavaScript 中，有三种方式声明变量：<code>var</code>、<code>let</code> 和 <code>const</code>。</p>
<p><code>var</code></p>
<ul>
<li>作用域：函数作用域（function scope）</li>
<li>特点：变量可以在其声明之前使用（提升 hoisting）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// undefined</span></span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">example</span>();</span><br></pre></td></tr></table></figure>

<p><code>let</code></p>
<ul>
<li>作用域：块作用域（block scope）</li>
<li>特点：声明前使用会导致错误，不提升</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// ReferenceError: y is not defined</span></span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>const</code></p>
<ul>
<li>作用域：块作用域（block scope）</li>
<li>特点：声明后不能重新赋值，必须初始化</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> z = <span class="number">30</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(z); <span class="comment">// 30</span></span><br><span class="line">  z = <span class="number">40</span>; <span class="comment">// TypeError: Assignment to constant variable.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>变量提升（Hoisting）</strong></p>
<p><code>var</code> 声明的变量会被提升到其所在函数的顶部，但不会初始化。这意味着你可以在声明之前使用这些变量，但它们的值为 <code>undefined</code>。<code>let</code> 和 <code>const</code> 则不会提升。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// ReferenceError: b is not defined</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p><strong>变量作用域</strong></p>
<ul>
<li>全局作用域：在任何函数或块外声明的变量都属于全局作用域，可以在整个程序中访问。</li>
<li>函数作用域：在函数内部声明的变量只能在该函数内访问。</li>
<li>块作用域：用 <code>let</code> 或 <code>const</code> 在 <code>&#123;&#125;</code> 内声明的变量只能在这对 <code>&#123;&#125;</code> 内访问。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> globalVar = <span class="string">&quot;I&#x27;m global&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> functionVar = <span class="string">&quot;I&#x27;m local to foo&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(globalVar); <span class="comment">// &quot;I&#x27;m global&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(functionVar); <span class="comment">// &quot;I&#x27;m local to foo&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(functionVar); <span class="comment">// ReferenceError: functionVar is not defined</span></span><br></pre></td></tr></table></figure>

<p><strong>常量</strong></p>
<p>使用 <code>const</code> 声明的变量是常量，值不能被重新赋值，但对于对象和数组，其属性或元素可以被修改。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;John&quot;</span>&#125;;</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;Doe&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="数据类型JavaScript-的数据类型"><a href="#数据类型JavaScript-的数据类型" class="headerlink" title="数据类型JavaScript 的数据类型"></a>数据类型JavaScript 的数据类型</h3><p>JavaScript 是一种动态类型语言，变量可以保存不同类型的数据。JavaScript 的数据类型主要分为两类：原始类型（Primitive types）和对象类型（Object types）。以下是 JavaScript 中的各种数据类型的详细说明。</p>
<p><strong>原始类型</strong></p>
<p>原始类型是不可变的值，包括以下几种：</p>
<ul>
<li><p>**<code>Number</code>**：用于表示数字，包括整数和浮点数。JavaScript 中没有单独的整数类型，所有数字都用 <code>Number</code> 类型表示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> integer = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">let</span> float = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**<code>String</code>**：表示文本数据。字符串可以使用单引号、双引号或反引号（模板字符串）定义。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> singleQuoteString = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> doubleQuoteString = <span class="string">&quot;World&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> templateString = <span class="string">`Hello, <span class="subst">$&#123;doubleQuoteString&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**<code>Boolean</code>**：表示真（<code>true</code>）或假（<code>false</code>）两个值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isTrue = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> isFalse = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**<code>Null</code>**：表示一个空值，指示一个变量没有值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> emptyValue = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**<code>Undefined</code>**：表示一个变量未定义或未赋值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> notAssigned;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(notAssigned); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**<code>Symbol</code>**：表示唯一且不可变的值，常用于对象属性的唯一标识。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> symbol1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;description&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> symbol2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;description&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbol1 === symbol2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**<code>BigInt</code>**：表示任意精度的整数，用于处理大整数。BigInt 值可以通过在整数后加 <code>n</code> 或调用 <code>BigInt</code> 函数来创建。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> bigIntNumber = <span class="number">1234567890123456789012345678901234567890n</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>对象类型</strong></p>
<p>对象类型用于存储集合和复杂的实体。</p>
<ul>
<li><p>**<code>Object</code>**：JavaScript 中的对象是键值对的集合。对象可以包含其他对象、数组、函数等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**<code>Array</code>**：表示有序的值集合。数组可以包含不同类型的数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> mixedArray = [<span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>, <span class="literal">true</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>&#125;, [<span class="number">5</span>, <span class="number">6</span>]];</span><br></pre></td></tr></table></figure>
</li>
<li><p>**<code>Function</code>**：函数是 JavaScript 的一等对象，可以存储在变量中，作为参数传递，或作为其他对象的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, World!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sayHello = greet;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**<code>Date</code>**：表示日期和时间。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>**<code>RegExp</code>**：表示正则表达式，用于模式匹配。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/ab+c/</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**<code>Map</code>**：表示键值对的集合，其中键可以是任意类型的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="number">42</span>, <span class="string">&#x27;answer&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>**<code>Set</code>**：表示值的集合，其中每个值唯一。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">2</span>); <span class="comment">// 该值不会重复添加</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>JavaScript 支持隐式和显式的类型转换。</p>
<p><strong>隐式转换</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="string">&#x27;5&#x27;</span> + <span class="number">2</span>; <span class="comment">// &quot;52&quot;（字符串拼接）</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="string">&#x27;5&#x27;</span> * <span class="number">2</span>; <span class="comment">// 10（字符串转换为数字）</span></span><br></pre></td></tr></table></figure>

<p><strong>显式转换</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="title class_">Number</span>(str); <span class="comment">// 123</span></span><br><span class="line"><span class="keyword">let</span> bool = <span class="title class_">Boolean</span>(<span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> strNum = <span class="title class_">String</span>(<span class="number">456</span>); <span class="comment">// &quot;456&quot;</span></span><br></pre></td></tr></table></figure>

<p>了解 JavaScript 的数据类型及其特性，对于编写健壮、可维护的代码至关重要。</p>
<h3 id="JavaScript-的运算符"><a href="#JavaScript-的运算符" class="headerlink" title="JavaScript 的运算符"></a>JavaScript 的运算符</h3><p>运算符是执行程序中各类操作的符号或关键字。JavaScript 提供了丰富的运算符，包括算术运算符、比较运算符、逻辑运算符、赋值运算符、字符串运算符、条件（三元）运算符和类型运算符等。下面是对这些运算符的详细介绍。</p>
<p><strong>算术运算符</strong></p>
<p>用于进行数学计算。</p>
<ul>
<li><p><code>+</code>：加法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">5</span> + <span class="number">2</span>; <span class="comment">// 7</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-</code>：减法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> difference = <span class="number">5</span> - <span class="number">2</span>; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>*</code>：乘法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> product = <span class="number">5</span> * <span class="number">2</span>; <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>/</code>：除法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> quotient = <span class="number">5</span> / <span class="number">2</span>; <span class="comment">// 2.5</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>%</code>：取模（余数）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> remainder = <span class="number">5</span> % <span class="number">2</span>; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>++</code>：自增</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">x++; <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>--</code>：自减</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> y = <span class="number">5</span>;</span><br><span class="line">y--; <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>比较运算符</strong></p>
<p>用于比较两个值，返回一个布尔值。</p>
<ul>
<li><p><code>==</code>：等于（类型转换）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isEqual = <span class="number">5</span> == <span class="string">&#x27;5&#x27;</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>===</code>：全等于（严格比较）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isStrictEqual = <span class="number">5</span> === <span class="string">&#x27;5&#x27;</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>!=</code>：不等于（类型转换）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isNotEqual = <span class="number">5</span> != <span class="string">&#x27;5&#x27;</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>!==</code>：不全等于（严格比较）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isStrictNotEqual = <span class="number">5</span> !== <span class="string">&#x27;5&#x27;</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&gt;</code>：大于</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isGreater = <span class="number">5</span> &gt; <span class="number">2</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;</code>：小于</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isLess = <span class="number">5</span> &lt; <span class="number">2</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&gt;=</code>：大于等于</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isGreaterOrEqual = <span class="number">5</span> &gt;= <span class="number">2</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;=</code>：小于等于</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isLessOrEqual = <span class="number">5</span> &lt;= <span class="number">2</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>逻辑运算符</strong></p>
<p>用于进行逻辑操作，返回一个布尔值。</p>
<ul>
<li><p><code>&amp;&amp;</code>：逻辑与</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> andResult = <span class="literal">true</span> &amp;&amp; <span class="literal">false</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>||</code>：逻辑或</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> orResult = <span class="literal">true</span> || <span class="literal">false</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>!</code>：逻辑非</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> notResult = !<span class="literal">true</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>赋值运算符</strong></p>
<p>用于给变量赋值。</p>
<ul>
<li><p><code>=</code>：赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>+=</code>：加法赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">5</span>;</span><br><span class="line">b += <span class="number">2</span>; <span class="comment">// 7</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-=</code>：减法赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="number">5</span>;</span><br><span class="line">c -= <span class="number">2</span>; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>*=</code>：乘法赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="number">5</span>;</span><br><span class="line">d *= <span class="number">2</span>; <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>/=</code>：除法赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> e = <span class="number">5</span>;</span><br><span class="line">e /= <span class="number">2</span>; <span class="comment">// 2.5</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>%=</code>：取模赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="number">5</span>;</span><br><span class="line">f %= <span class="number">2</span>; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>字符串运算符</strong></p>
<ul>
<li><p><code>+</code>：字符串拼接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;Hello, &#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;world!&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> greeting = str1 + str2; <span class="comment">// &quot;Hello, world!&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>+=</code>：拼接赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line">message += <span class="string">&#x27;, world!&#x27;</span>; <span class="comment">// &quot;Hello, world!&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>条件（三元）运算符</strong></p>
<p>根据条件表达式的结果返回不同的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> isAdult = age &gt;= <span class="number">18</span> ? <span class="string">&#x27;Yes&#x27;</span> : <span class="string">&#x27;No&#x27;</span>; <span class="comment">// &quot;Yes&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>类型运算符</strong></p>
<p>用于检查或转换数据类型。</p>
<ul>
<li><p><code>typeof</code>：返回数据类型的字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> g = <span class="number">42</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> g); <span class="comment">// &quot;number&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>instanceof</code>：检测对象是否为某个类的实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> h = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(h <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>in</code>：检测属性是否在对象中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> obj); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>位运算符</strong></p>
<p>用于对整数在其二进制形式上进行操作。</p>
<ul>
<li><p><code>&amp;</code>：按位与</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">5</span> &amp; <span class="number">1</span>; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>|</code>：按位或</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> j = <span class="number">5</span> | <span class="number">1</span>; <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>^</code>：按位异或</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> k = <span class="number">5</span> ^ <span class="number">1</span>; <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>~</code>：按位非</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> l = ~<span class="number">5</span>; <span class="comment">// -6</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;&lt;</code>：左移</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="number">5</span> &lt;&lt; <span class="number">1</span>; <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&gt;&gt;</code>：右移</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">5</span> &gt;&gt; <span class="number">1</span>; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&gt;&gt;&gt;</code>：无符号右移</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o = <span class="number">5</span> &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>以上是 JavaScript 中常用的运算符及其用法。这些运算符是编写 JavaScript 代码的基础，对于理解和实现各种逻辑操作至关重要。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数是 JavaScript 中的基本构建块之一，用于封装可重复使用的代码块。函数可以接收输入参数，执行特定的任务，并返回结果。以下是关于 JavaScript 函数的详细说明。</p>
<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>在 JavaScript 中，可以通过 <code>function</code> 关键字来定义函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>定义函数后，可以通过函数名来调用它。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">greet</span>(); <span class="comment">// 输出：Hello!</span></span><br></pre></td></tr></table></figure>

<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>函数可以接收输入参数，这些参数允许在函数内部执行操作时传递数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&#x27;John&#x27;</span>); <span class="comment">// 输出：Hello, John!</span></span><br></pre></td></tr></table></figure>

<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>函数可以返回一个值作为结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">3</span>, <span class="number">4</span>); <span class="comment">// result 的值为 7</span></span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>JavaScript 也支持匿名函数，即没有函数名的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> greet = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&#x27;John&#x27;</span>); <span class="comment">// 输出：Hello, John!</span></span><br></pre></td></tr></table></figure>

<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数是 ES6 新增的一种函数定义方式，简洁明了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">greet</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&#x27;John&#x27;</span>); <span class="comment">// 输出：Hello, John!</span></span><br></pre></td></tr></table></figure>

<h3 id="函数作为参数"><a href="#函数作为参数" class="headerlink" title="函数作为参数"></a>函数作为参数</h3><p>在 JavaScript 中，函数可以作为参数传递给其他函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">operation</span>(<span class="params">a, b, func</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">func</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = <span class="title function_">operation</span>(<span class="number">3</span>, <span class="number">4</span>, add); <span class="comment">// result1 的值为 7</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title function_">operation</span>(<span class="number">3</span>, <span class="number">4</span>, multiply); <span class="comment">// result2 的值为 12</span></span><br></pre></td></tr></table></figure>

<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包是指函数能够记住并访问其词法作用域，即使该函数在其词法作用域之外执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter = <span class="title function_">outer</span>();</span><br><span class="line"><span class="title function_">counter</span>(); <span class="comment">// 输出：1</span></span><br><span class="line"><span class="title function_">counter</span>(); <span class="comment">// 输出：2</span></span><br></pre></td></tr></table></figure>

<h3 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h3><p>函数可以调用自身，这种方式称为递归。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n * <span class="title function_">factorial</span>(n - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">factorial</span>(<span class="number">5</span>); <span class="comment">// result 的值为 120</span></span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组创建方式"><a href="#数组创建方式" class="headerlink" title="数组创建方式"></a>数组创建方式</h3><ul>
<li><p>使用 <code>new</code> 操作符创建数组对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array1 = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">var</span> array2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>); <span class="comment">// 定义长度为 10 的数组，但未初始化元素</span></span><br><span class="line"><span class="keyword">var</span> array3 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>, <span class="number">52</span>, <span class="number">85</span>, <span class="number">96</span>, <span class="number">78</span>); <span class="comment">// 初始化数组</span></span><br><span class="line"><span class="keyword">var</span> array4 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;jack&quot;</span>); <span class="comment">// 包含一个元素的数组</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用数组字面量创建数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array5 = [];</span><br><span class="line"><span class="keyword">var</span> array6 = [<span class="number">10</span>, <span class="number">52</span>, <span class="number">96</span>, <span class="number">85</span>, <span class="number">78</span>]; <span class="comment">// 声明并初始化数组</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="数组对象常用方法"><a href="#数组对象常用方法" class="headerlink" title="数组对象常用方法"></a>数组对象常用方法</h3><ul>
<li><p><code>length</code>：获取数组长度。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> length = array.<span class="property">length</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>push()</code>：向数组末尾添加一个或多个元素，并返回新的长度。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array.<span class="title function_">push</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>pop()</code>：删除并返回数组的最后一个元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lastElement = array.<span class="title function_">pop</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>shift()</code>：删除并返回数组的第一个元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> firstElement = array.<span class="title function_">shift</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>unshift()</code>：向数组的开头添加一个或多个元素，并返回新的长度。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array.<span class="title function_">unshift</span>(-<span class="number">1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>splice()</code>：从数组中添加&#x2F;删除元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// 在索引为 2 的位置添加 &#x27;a&#x27; 和 &#x27;b&#x27;</span></span><br><span class="line">array.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// 从索引为 2 的位置删除 2 个元素</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>slice()</code>：返回一个从指定开始到结束（不包括结束）的新数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = array.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">// 返回索引为 1 到 2 的元素组成的新数组</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>concat()</code>：连接两个或更多数组，并返回结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = array.<span class="title function_">concat</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>indexOf()</code>：返回指定元素在数组中首次出现的位置，如果没有找到则返回 -1。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> index = array.<span class="title function_">indexOf</span>(<span class="number">52</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>includes()</code>：判断数组是否包含某个元素，返回布尔值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isInclude = array.<span class="title function_">includes</span>(<span class="number">52</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><p><strong>for 循环</strong></p>
<p>使用传统的 <code>for</code> 循环可以对数组进行遍历。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(array[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>for…of 循环</strong></p>
<p>ES6 引入的 <code>for...of</code> 循环可以更简洁地遍历数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> element <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>forEach 方法</strong></p>
<p>数组的 <code>forEach</code> 方法可以对每个元素执行指定的操作，它接受一个函数作为参数，该函数会被传入当前遍历的元素、当前元素的索引和整个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">array.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">element, index, arr</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>map 方法</strong></p>
<p>数组的 <code>map</code> 方法会返回一个新数组，新数组的每个元素都是原数组经过某种操作后的结果，可以用于对数组中的每个元素进行处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArray = array.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">element, index, arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> element * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray); <span class="comment">// 输出：[2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>

<p><strong>filter 方法</strong></p>
<p>数组的 <code>filter</code> 方法会返回一个新数组，新数组中包含满足条件的元素，可以用于过滤数组中的元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filteredArray = array.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">element, index, arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> element % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filteredArray); <span class="comment">// 输出：[2, 4]</span></span><br></pre></td></tr></table></figure>

<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象的概念"><a href="#对象的概念" class="headerlink" title="对象的概念"></a>对象的概念</h3><p><strong>对象的定义</strong></p>
<ul>
<li>对象是 JavaScript 中一种数据类型，用于存储键值对和更复杂的实体。</li>
<li>对象类似于现实世界中的物体，具有属性和方法。</li>
</ul>
<p><strong>对象的特点</strong></p>
<ul>
<li>可以包含多个键值对，每个键对应一个值。</li>
<li>可以动态添加、修改或删除属性。</li>
</ul>
<h3 id="创建对象的方法"><a href="#创建对象的方法" class="headerlink" title="创建对象的方法"></a>创建对象的方法</h3><p><strong>对象字面量</strong></p>
<ul>
<li>使用大括号 <code>&#123;&#125;</code> 来定义对象，键值对用冒号 <code>:</code> 分隔。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">job</span>: <span class="string">&#x27;Developer&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>构造函数</strong></p>
<ul>
<li>使用构造函数创建对象，可以使用内置的 <code>Object</code> 构造函数或自定义构造函数。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line">person.<span class="property">age</span> = <span class="number">30</span>;</span><br><span class="line">person.<span class="property">job</span> = <span class="string">&#x27;Developer&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>工厂函数</strong></p>
<ul>
<li>使用函数返回对象。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name, age, job</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">name</span>: name,</span><br><span class="line">        <span class="attr">age</span>: age,</span><br><span class="line">        <span class="attr">job</span>: job</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="title function_">createPerson</span>(<span class="string">&#x27;John&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;Developer&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>ES6 类</strong></p>
<ul>
<li>使用 <code>class</code> 语法定义对象模板。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age, job</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;John&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;Developer&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="对象的属性和方法"><a href="#对象的属性和方法" class="headerlink" title="对象的属性和方法"></a>对象的属性和方法</h3><p><strong>访问属性</strong></p>
<ul>
<li>使用点符号或方括号访问对象的属性。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// 使用点符号</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="string">&#x27;age&#x27;</span>]); <span class="comment">// 使用方括号</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>添加和修改属性</strong></p>
<ul>
<li>可以动态添加新属性或修改现有属性的值。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.<span class="property">city</span> = <span class="string">&#x27;New York&#x27;</span>; <span class="comment">// 添加新属性</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">31</span>; <span class="comment">// 修改现有属性</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>删除属性</strong></p>
<ul>
<li>使用 <code>delete</code> 操作符删除对象的属性。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> person.<span class="property">job</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>定义方法</strong></p>
<ul>
<li>对象的方法是定义在对象中的函数。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">person.<span class="title function_">greet</span>(); <span class="comment">// 调用方法</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><p><strong>使用 for…in 循环</strong></p>
<ul>
<li><code>for...in</code> 循环用于遍历对象的所有可枚举属性。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27;: &#x27;</span> + person[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>使用 Object.keys()</strong></p>
<ul>
<li><code>Object.keys()</code> 返回一个包含对象所有键的数组。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(person);</span><br><span class="line">keys.<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27;: &#x27;</span> + person[key]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>使用 Object.entries()</strong></p>
<ul>
<li><code>Object.entries()</code> 返回一个包含对象所有键值对的数组。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(person);</span><br><span class="line">entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27;: &#x27;</span> + value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><ul>
<li><p><strong>创建Date对象</strong></p>
<p>使用<code>new Date()</code>构造函数可以创建一个表示当前时间的Date对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> currentDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>指定日期和时间创建Date对象</strong></p>
<p>可以向<code>new Date()</code>构造函数传递年、月、日、小时、分钟、秒等参数来创建特定日期和时间的Date对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> specificDate = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2024</span>, <span class="number">4</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取Date对象的各个部分</strong></p>
<p>使用Date对象的方法可以获取日期的年、月、日、小时、分钟、秒等部分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> year = specificDate.<span class="title function_">getFullYear</span>();</span><br><span class="line"><span class="keyword">let</span> month = specificDate.<span class="title function_">getMonth</span>(); <span class="comment">// 月份从0开始，所以5月是4</span></span><br><span class="line"><span class="keyword">let</span> day = specificDate.<span class="title function_">getDate</span>();</span><br><span class="line"><span class="keyword">let</span> hours = specificDate.<span class="title function_">getHours</span>();</span><br><span class="line"><span class="keyword">let</span> minutes = specificDate.<span class="title function_">getMinutes</span>();</span><br><span class="line"><span class="keyword">let</span> seconds = specificDate.<span class="title function_">getSeconds</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>日期和时间格式化</strong></p>
<p>Date对象的方法可以将日期和时间格式化为字符串，也可以将字符串解析为Date对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> formattedDate = specificDate.<span class="title function_">toDateString</span>();</span><br><span class="line"><span class="keyword">let</span> formattedTime = specificDate.<span class="title function_">toTimeString</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>日期和时间操作</strong></p>
<p>Date对象提供了一些方法来进行日期和时间的操作，如增加、减少天数、小时等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">specificDate.<span class="title function_">setDate</span>(specificDate.<span class="title function_">getDate</span>() + <span class="number">1</span>); <span class="comment">// 增加一天</span></span><br><span class="line">specificDate.<span class="title function_">setHours</span>(specificDate.<span class="title function_">getHours</span>() - <span class="number">2</span>); <span class="comment">// 减少两小时</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>比较日期</strong></p>
<p>可以使用Date对象的方法来比较两个日期的大小。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> date1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2024-05-28&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> date2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2024-05-30&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (date1 &lt; date2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;date1 在 date2 之前&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (date1 &gt; date2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;date1 在 date2 之后&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;date1 和 date2 相同&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取当前时间戳</strong></p>
<p>可以使用<code>Date.now()</code>方法获取当前时间的时间戳。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> timestamp = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p><strong>常用数学常数</strong></p>
<ul>
<li><p><strong>π（圆周率）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pi = <span class="title class_">Math</span>.<span class="property">PI</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>e（自然对数的底）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> e = <span class="title class_">Math</span>.<span class="property">E</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>常用数学方法</strong></p>
<ul>
<li><p><strong>取绝对值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> absoluteValue = <span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>取最大值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> maxNumber = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>取最小值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> minNumber = <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>取整</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> roundedNumber = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">4.7</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>向上取整</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ceilNumber = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">4.2</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>向下取整</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> floorNumber = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">4.8</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>计算平方根</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> squareRoot = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">64</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>计算幂</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> powerResult = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>生成随机数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> randomNumber = <span class="title class_">Math</span>.<span class="title function_">random</span>(); <span class="comment">// 生成0到1之间的随机数</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>常用三角函数</strong></p>
<ul>
<li><p><strong>正弦函数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sineValue = <span class="title class_">Math</span>.<span class="title function_">sin</span>(<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>); <span class="comment">// 正弦函数参数为弧度值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>余弦函数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cosineValue = <span class="title class_">Math</span>.<span class="title function_">cos</span>(<span class="title class_">Math</span>.<span class="property">PI</span>); <span class="comment">// 余弦函数参数为弧度值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>正切函数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tangentValue = <span class="title class_">Math</span>.<span class="title function_">tan</span>(<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">4</span>); <span class="comment">// 正切函数参数为弧度值</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>对数和指数函数</strong></p>
<ul>
<li><p><strong>自然对数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> naturalLogarithm = <span class="title class_">Math</span>.<span class="title function_">log</span>(<span class="number">10</span>); <span class="comment">// 计算以e为底的自然对数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>以2为底的对数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> logBase2 = <span class="title class_">Math</span>.<span class="title function_">log2</span>(<span class="number">16</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>以10为底的对数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> logBase10 = <span class="title class_">Math</span>.<span class="title function_">log10</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>其他常用方法</strong></p>
<ul>
<li><p><strong>将弧度转换为角度</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> degrees = <span class="title class_">Math</span>.<span class="title function_">degrees</span>(<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>将角度转换为弧度</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> radians = <span class="title class_">Math</span>.<span class="title function_">radians</span>(<span class="number">90</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h3><ul>
<li><p><strong>使用对象字面量创建自定义对象</strong></p>
<p>可以使用对象字面量语法快速创建自定义对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, my name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">greet</span>(); <span class="comment">// 输出: Hello, my name is John</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用构造函数创建自定义对象</strong></p>
<p>使用构造函数可以创建多个具有相同属性和方法的对象实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">greet</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, my name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;John&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Alice&#x27;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">greet</span>(); <span class="comment">// 输出: Hello, my name is John</span></span><br><span class="line">person2.<span class="title function_">greet</span>(); <span class="comment">// 输出: Hello, my name is Alice</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用构造函数和原型创建自定义对象</strong></p>
<p>通过将方法添加到构造函数的原型，可以为所有实例共享方法，从而节省内存。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">greet</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, my name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;John&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Alice&#x27;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">greet</span>(); <span class="comment">// 输出: Hello, my name is John</span></span><br><span class="line">person2.<span class="title function_">greet</span>(); <span class="comment">// 输出: Hello, my name is Alice</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>为自定义对象添加方法</strong></p>
<p>可以随时为自定义对象添加新的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person1.<span class="property">sayAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am &#x27;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&#x27; years old.&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">sayAge</span>(); <span class="comment">// 输出: I am 30 years old.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对象继承</strong></p>
<p>通过原型链实现对象继承，使得子对象可以继承父对象的属性和方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;My name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name, breed</span>) &#123;</span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name); <span class="comment">// 调用父对象构造函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Dog</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Woof! Woof!&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;Buddy&#x27;</span>, <span class="string">&#x27;Labrador&#x27;</span>);</span><br><span class="line">dog.<span class="title function_">sayName</span>(); <span class="comment">// 输出: My name is Buddy</span></span><br><span class="line">dog.<span class="title function_">bark</span>();    <span class="comment">// 输出: Woof! Woof!</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对象混入（Mixin）</strong></p>
<p>通过混入可以将多个对象的属性和方法合并到一个对象中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> canEat = &#123;</span><br><span class="line">    <span class="attr">eat</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Eating&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> canWalk = &#123;</span><br><span class="line">    <span class="attr">walk</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Walking&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>, canEat, canWalk);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;John&#x27;</span>);</span><br><span class="line">person.<span class="title function_">eat</span>();  <span class="comment">// 输出: Eating</span></span><br><span class="line">person.<span class="title function_">walk</span>(); <span class="comment">// 输出: Walking</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>这些方法展示了如何创建和使用JavaScript中的自定义对象，充分利用了JavaScript的灵活性和原型继承机制。</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件属性与addeventListener绑定的区别是：如果有多次绑定，事件属性是一种覆盖的模式，是使用最后的处理程序，</p>
<p>而addeventKitener是一次进行绑定，按顺序依次触法。是一种追加模式</p>
<p>e.keycode按下对应的编码值</p>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>WinForm</title>
    <url>/WinForm/</url>
    <content><![CDATA[<p>Windows Forms（WinForms）是一个用于构建 Windows 桌面应用程序的图形用户界面（GUI）框架。它是 .NET 框架的一部分，提供了一套丰富的类库和控件，用于创建具有图形界面的应用程序。</p>
<span id="more"></span>

<h3 id="Windows-Forms-的特点"><a href="#Windows-Forms-的特点" class="headerlink" title="Windows Forms 的特点"></a>Windows Forms 的特点</h3><ol>
<li><p><strong>事件驱动编程</strong>：WinForms 采用事件驱动的编程模型，用户界面的交互通过事件来处理，例如按钮点击、鼠标移动等。</p>
</li>
<li><p><strong>控件丰富</strong>：提供了许多内置控件，如按钮（Button）、标签（Label）、文本框（TextBox）、列表框（ListBox）、数据网格（DataGridView）等，方便快速构建用户界面。</p>
</li>
<li><p><strong>设计器支持</strong>：Visual Studio 提供了强大的设计器工具，可以通过拖放控件来快速设计用户界面，自动生成相应的代码。</p>
</li>
<li><p><strong>GDI+ 支持</strong>：WinForms 使用 GDI+（图形设备接口）来绘制图形和文本，提供丰富的绘图功能。</p>
</li>
</ol>
<h3 id="创建一个简单的-Windows-Forms-应用程序"><a href="#创建一个简单的-Windows-Forms-应用程序" class="headerlink" title="创建一个简单的 Windows Forms 应用程序"></a>创建一个简单的 Windows Forms 应用程序</h3><p>下面是一个使用 C# 创建简单的 Windows Forms 应用程序的详细步骤。</p>
<h4 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h4><ul>
<li>打开 Visual Studio。</li>
<li>创建一个新的项目，选择“Windows Forms App (.NET Framework)”，并为项目命名。</li>
</ul>
<h4 id="2-设计用户界面"><a href="#2-设计用户界面" class="headerlink" title="2. 设计用户界面"></a>2. 设计用户界面</h4><ul>
<li>在设计器中，拖放控件到窗体上。例如，添加一个按钮和一个标签。</li>
<li>通过属性窗口，可以设置控件的属性，如文本、位置、大小等。</li>
</ul>
<h4 id="3-编写事件处理代码"><a href="#3-编写事件处理代码" class="headerlink" title="3. 编写事件处理代码"></a>3. 编写事件处理代码</h4><p>双击按钮控件，Visual Studio 会自动生成按钮的点击事件处理方法。在生成的代码中，添加改变标签文本的代码。</p>
<h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><p>以下是一个完整的示例代码，展示如何创建一个带有按钮和标签的简单 Windows Forms 应用程序。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WinFormsApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            label1.Text = <span class="string">&quot;Hello, Windows Forms!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>Form1.Designer.cs</code> 文件中，Visual Studio 生成的代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WinFormsApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> System.ComponentModel.IContainer components = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> System.Windows.Forms.Button button1;</span><br><span class="line">        <span class="keyword">private</span> System.Windows.Forms.Label label1;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"><span class="built_in">bool</span> disposing</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (disposing &amp;&amp; (components != <span class="literal">null</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                components.Dispose();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">base</span>.Dispose(disposing);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitializeComponent</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.button1 = <span class="keyword">new</span> System.Windows.Forms.Button();</span><br><span class="line">            <span class="keyword">this</span>.label1 = <span class="keyword">new</span> System.Windows.Forms.Label();</span><br><span class="line">            <span class="keyword">this</span>.SuspendLayout();</span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="comment">// button1</span></span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="keyword">this</span>.button1.Location = <span class="keyword">new</span> System.Drawing.Point(<span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line">            <span class="keyword">this</span>.button1.Name = <span class="string">&quot;button1&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.button1.Size = <span class="keyword">new</span> System.Drawing.Size(<span class="number">75</span>, <span class="number">23</span>);</span><br><span class="line">            <span class="keyword">this</span>.button1.TabIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.button1.Text = <span class="string">&quot;Click Me&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.button1.UseVisualStyleBackColor = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.button1.Click += <span class="keyword">new</span> System.EventHandler(<span class="keyword">this</span>.button1_Click);</span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="comment">// label1</span></span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="keyword">this</span>.label1.AutoSize = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.label1.Location = <span class="keyword">new</span> System.Drawing.Point(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">            <span class="keyword">this</span>.label1.Name = <span class="string">&quot;label1&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.label1.Size = <span class="keyword">new</span> System.Drawing.Size(<span class="number">0</span>, <span class="number">13</span>);</span><br><span class="line">            <span class="keyword">this</span>.label1.TabIndex = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="comment">// Form1</span></span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="keyword">this</span>.AutoScaleDimensions = <span class="keyword">new</span> System.Drawing.SizeF(<span class="number">6F</span>, <span class="number">13F</span>);</span><br><span class="line">            <span class="keyword">this</span>.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;</span><br><span class="line">            <span class="keyword">this</span>.ClientSize = <span class="keyword">new</span> System.Drawing.Size(<span class="number">284</span>, <span class="number">261</span>);</span><br><span class="line">            <span class="keyword">this</span>.Controls.Add(<span class="keyword">this</span>.label1);</span><br><span class="line">            <span class="keyword">this</span>.Controls.Add(<span class="keyword">this</span>.button1);</span><br><span class="line">            <span class="keyword">this</span>.Name = <span class="string">&quot;Form1&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.Text = <span class="string">&quot;Form1&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.ResumeLayout(<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">this</span>.PerformLayout();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-运行应用程序"><a href="#4-运行应用程序" class="headerlink" title="4. 运行应用程序"></a>4. 运行应用程序</h4><p>按 F5 或点击“启动”按钮运行应用程序，您会看到一个带有按钮和标签的窗体。当您点击按钮时，标签的文本会改变。</p>
<h3 id="Windows-Forms-的主要控件"><a href="#Windows-Forms-的主要控件" class="headerlink" title="Windows Forms 的主要控件"></a>Windows Forms 的主要控件</h3><p>以下是一些常用的 WinForms 控件：</p>
<ol>
<li><strong>Button</strong>：表示一个可点击的按钮。</li>
<li><strong>Label</strong>：用于显示文本。</li>
<li><strong>TextBox</strong>：用于输入文本。</li>
<li><strong>ListBox</strong>：用于显示一个列表。</li>
<li><strong>ComboBox</strong>：用于显示一个下拉列表。</li>
<li><strong>CheckBox</strong>：表示一个复选框。</li>
<li><strong>RadioButton</strong>：表示一个单选按钮。</li>
<li><strong>DataGridView</strong>：用于显示和编辑表格数据。</li>
<li><strong>PictureBox</strong>：用于显示图像。</li>
<li><strong>Panel</strong>：用于容纳其他控件的容器。</li>
</ol>
<h3 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h3><h4 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h4><p>WinForms 支持数据绑定，可以将数据源（如数据库、集合）绑定到控件，实现数据的显示和交互。</p>
<h4 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a>自定义控件</h4><p>您可以创建自定义控件，通过继承现有控件或从头编写控件，添加特定的功能和外观。</p>
<h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><p>为了确保用户界面响应及时，WinForms 提供了多线程支持，可以使用 <code>BackgroundWorker</code> 或 <code>Task</code> 来执行耗时操作，并在完成后更新 UI。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Windows Forms 是一个功能强大且易于使用的框架，用于构建 Windows 桌面应用程序。它提供了丰富的控件、设计工具和功能，适合快速开发高质量的桌面应用。虽然近年来 WPF 和 UWP 等新技术的出现提供了更多选择，但 WinForms 仍然是许多企业和开发者构建桌面应用的重要工具。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>.net</tag>
        <tag>winform</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery</title>
    <url>/jQuery/</url>
    <content><![CDATA[<p>jQuery 是一个广泛使用的 JavaScript 库，旨在简化 HTML 文档的操作、事件处理、动画效果和 Ajax 交互。由 John Resig 于 2006 年发布，它的设计理念是“写得更少，做得更多”，通过简洁的语法实现复杂的功能。以下是 jQuery 的一些主要特性：</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>SqlServer</title>
    <url>/SQLServer/</url>
    <content><![CDATA[<p>SQL Server 是微软公司开发的关系型数据库管理系统（RDBMS），用于存储和管理数据。它提供了一种可靠的、安全的和高效的方式来管理大型数据集合，并提供了许多功能和工具，使开发人员能够轻松地创建和管理数据库应用程序。</p>
<span id="more"></span>

<h2 id="初识数据库"><a href="#初识数据库" class="headerlink" title="初识数据库"></a>初识数据库</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><strong>数据库是按照数据模型存储在专门的存储器中。</strong><br><strong>特点</strong></p>
<ul>
<li><p>数据尽量不重复</p>
</li>
<li><p>以最优的方式为应用程序提供服务</p>
</li>
<li><p>通过专门的数据库软件管理数据，提供增删改查操作</p>
</li>
</ul>
<h3 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h3><p><strong>实体(Entity):</strong></p>
<p>客观存在的，可以被描述的事物称为实体。<br><strong>数据模型</strong></p>
<ul>
<li>层次模型<br>用树型结构描述实体和实体间的联系</li>
<li>网状模型<br>用有向图结构描述实体和实体间的联系</li>
<li>关系模型<br>用二维表描述实体和实体间的联系</li>
<li>键值对</li>
</ul>
<p><strong>数据库通常有两个主要部分</strong></p>
<ul>
<li>一个是保存数据库的物理文件</li>
<li>一个是应用程序用于访问数据的管理系统(DBMS:Data Base Management System),是应用程序和数据库之间的桥梁</li>
</ul>
<h3 id="常见的数据库产品"><a href="#常见的数据库产品" class="headerlink" title="常见的数据库产品"></a>常见的数据库产品</h3><p><strong>关系型数据库（RDB)</strong></p>
<ul>
<li>Oracle:大型</li>
<li>Sql Server:中大型</li>
<li>MySql:中小型</li>
</ul>
<p><strong>非关系型数据库（NoSql)</strong></p>
<ul>
<li>Redis</li>
<li>MongoDB</li>
</ul>
<h3 id="SQL的组成"><a href="#SQL的组成" class="headerlink" title="SQL的组成"></a>SQL的组成</h3><p>SQL（Structured Query Language）包含以下几个部分：</p>
<p><strong>DDL（Data Definition Language）数据定义语言</strong></p>
<p>DDL用于定义数据库的结构或模式，包括创建、修改和删除数据库对象，如表、索引等。常见的DDL命令包括CREATE、ALTER和DROP等。</p>
<p><strong>DML（Data Manipulation Language）数据操作语言</strong></p>
<p>DML用于对数据库中的数据进行操作，包括查询、插入、更新和删除数据。常见的DML命令包括SELECT、INSERT、UPDATE和DELETE等。</p>
<p><strong>DCL（Data Control Language）数据控制语言</strong></p>
<p>DCL用于控制数据库的访问权限和安全性，包括授权和撤销访问权限。常见的DCL命令包括GRANT和REVOKE等。</p>
<p><strong>TCL（Transaction Control Language）事务控制语言</strong></p>
<p>TCL用于管理数据库中的事务，包括事务的提交和回滚。常见的TCL命令包括COMMIT、ROLLBACK和SAVEPOINT等。</p>
<p>这些部分构成了SQL语言的基本框架，每个部分都有特定的功能和用途，用于不同层次和方面的数据库操作和管理。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>SQL中的数据类型用于定义表中列的数据类型。不同的数据库管理系统可能支持不同的数据类型，以下是一些常见的SQL数据类型：</p>
<p><strong>整数类型（Integer Types）</strong>：</p>
<ul>
<li>INT（整数类型）</li>
<li>SMALLINT（小整数类型）</li>
<li>BIGINT（大整数类型）</li>
</ul>
<p><strong>浮点数类型（Floating-Point Types）</strong>：</p>
<ul>
<li>FLOAT(n)（浮点数类型，可指定精度）</li>
<li>REAL（单精度浮点数）</li>
<li>DOUBLE PRECISION（双精度浮点数）</li>
</ul>
<p><strong>定点数类型（Fixed-Point Types）</strong>：</p>
<ul>
<li>DECIMAL(p, s) &#x2F; NUMERIC(p, s)（定点数类型，p为精度，s为小数位数）</li>
<li>MONEY（货币类型）</li>
</ul>
<p><strong>字符类型（Character Types）</strong>：</p>
<ul>
<li>CHAR(n)（固定长度字符类型）</li>
<li>VARCHAR(n)（可变长度字符类型）</li>
<li>TEXT（长文本类型）</li>
</ul>
<p><strong>日期与时间类型（Date and Time Types）</strong>：</p>
<ul>
<li>DATE（日期类型）</li>
<li>TIME（时间类型）</li>
<li>DATETIME（日期时间类型）</li>
<li>TIMESTAMP（时间戳类型）</li>
</ul>
<p><strong>布尔类型（Boolean Types）</strong>：</p>
<ul>
<li>BOOL（布尔类型）</li>
<li>BOOLEAN（布尔类型）</li>
</ul>
<p><strong>二进制类型（Binary Types）</strong>：</p>
<ul>
<li>BINARY(n)（固定长度二进制类型）</li>
<li>VARBINARY(n)（可变长度二进制类型）</li>
<li>BLOB（二进制大对象类型）</li>
</ul>
<p><strong>其他类型</strong>：</p>
<ul>
<li>ARRAY（数组类型）</li>
<li>JSON（JSON类型，用于存储JSON数据）</li>
</ul>
<p>这只是SQL中常见的一些数据类型，具体的数据类型还取决于所使用的数据库管理系统和版本。</p>
<h3 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h3><h3 id="Ubuntu安装SQLservice"><a href="#Ubuntu安装SQLservice" class="headerlink" title="Ubuntu安装SQLservice"></a>Ubuntu安装SQLservice</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -e &quot;ACCEPT_EULA=Y&quot; -e &quot;SA_PASSWORD=Abc@12332100&quot; -p 1433:1433 -v /home/sqlserver/data:/var/opt/mssql/data -v /home/sqlserver/log:/var/opt/mssql/log --name sqlserver -d mcr.microsoft.com/mssql/server</span><br><span class="line"></span><br><span class="line">scp ~/documents/CompanyDB.mdf  draco@xjbxjb.tpddns.cn:/home/draco/sqlserver/data</span><br><span class="line">scp ~/documents/CompanyDB_log.ldf draco@xjbxjb.tpddns.cn:/home/draco/sqlserver/data</span><br><span class="line"></span><br><span class="line">scp ~/documents/script.sql draco@xjbxjb.tpddns.cn:/home/draco/sqlserver/data</span><br><span class="line">StudentDB20240508.mdf</span><br><span class="line">scp ~/StudentDB20240508.mdf draco@xjbxjb.tpddns.cn:/home/draco/sqlserver/data</span><br><span class="line">StudentDB20240508.ldf</span><br><span class="line">scp ~/StudentDB20240508.ldf draco@xjbxjb.tpddns.cn:/home/draco/sqlserver/data</span><br></pre></td></tr></table></figure>



<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database StudentDB20240508</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">primary</span></span><br><span class="line">(</span><br><span class="line">	name<span class="operator">=</span><span class="string">&#x27;StudentDB20240508.mdf&#x27;</span>,</span><br><span class="line">	filename<span class="operator">=</span><span class="string">&#x27;G:\20240325班级\3-Sql Server\Day01-5.8\DB\StudentDB20240508.mdf&#x27;</span>,</span><br><span class="line">	size<span class="operator">=</span><span class="number">8</span>mb,</span><br><span class="line">	filegrowth<span class="operator">=</span><span class="number">10</span>mb</span><br><span class="line">)</span><br><span class="line">log <span class="keyword">on</span></span><br><span class="line">(</span><br><span class="line">	name<span class="operator">=</span><span class="string">&#x27;StudentDB20240508.ldf&#x27;</span>,</span><br><span class="line">	filename<span class="operator">=</span><span class="string">&#x27;G:\20240325班级\3-Sql Server\Day01-5.8\DB\StudentDB20240508.ldf&#x27;</span>,</span><br><span class="line">	size<span class="operator">=</span><span class="number">5</span>mb,</span><br><span class="line">	maxsize<span class="operator">=</span><span class="number">100</span>mb,</span><br><span class="line">	filegrowth<span class="operator">=</span><span class="number">10</span><span class="operator">%</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database StudentDB20240508</span><br><span class="line"></span><br><span class="line"><span class="comment">--设置可用数据库</span></span><br><span class="line">use StudentDB20240508</span><br></pre></td></tr></table></figure>

<h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>过程：</p>
<ul>
<li>确定表中有哪些列</li>
<li>确定列的数据类型</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--创建学生表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students</span><br><span class="line">(</span><br><span class="line">	sno <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,			 <span class="comment">--学号</span></span><br><span class="line">	sname <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,		 <span class="comment">--姓名</span></span><br><span class="line">	sex bit <span class="keyword">not</span> <span class="keyword">null</span>,				 <span class="comment">--性别</span></span><br><span class="line">	birthday <span class="type">date</span>,					 <span class="comment">--出生日期</span></span><br><span class="line">	phoneNo <span class="type">char</span>(<span class="number">11</span>),				 <span class="comment">--手机号码</span></span><br><span class="line">	email <span class="type">varchar</span>(<span class="number">50</span>),               <span class="comment">--电子邮箱</span></span><br><span class="line">	personID <span class="type">char</span>(<span class="number">18</span>)                <span class="comment">--身份证</span></span><br><span class="line">)</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="comment">--修改表结构</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students</span><br><span class="line"><span class="keyword">add</span> address <span class="type">varchar</span>(<span class="number">50</span>)  <span class="comment">--增加列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">column</span> address <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>  <span class="comment">--修改列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">column</span> address    <span class="comment">--删除列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--创建班级表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> classes</span><br><span class="line">(</span><br><span class="line">	classId <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,  <span class="comment">--班级编号</span></span><br><span class="line">	className <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,  <span class="comment">--班级名称</span></span><br><span class="line">	beginDate <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="comment">--开班日期	</span></span><br><span class="line">)</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students</span><br><span class="line"><span class="keyword">add</span>  classId <span class="type">int</span></span><br></pre></td></tr></table></figure>

<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> classes</span><br></pre></td></tr></table></figure>

<h3 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h3><p><strong>实体完整性</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--主键(primary key)约束:不能为空，且不能重复</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> pk_sno <span class="keyword">primary</span> key(sno)</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> classes</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> pk_classId <span class="keyword">primary</span> key(classId)</span><br><span class="line"></span><br><span class="line"><span class="comment">--唯一约束：可以为空，但不能重复</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> uq_personId <span class="keyword">unique</span>(personID)</span><br><span class="line"></span><br><span class="line"><span class="comment">--标识列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--创建课程表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> courses</span><br><span class="line">(</span><br><span class="line">	courseId <span class="type">int</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key,</span><br><span class="line">	courseName <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">)</span><br><span class="line">go</span><br></pre></td></tr></table></figure>

<p><strong>域完整性</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--数据类型</span></span><br><span class="line"><span class="comment">--检查约束(Check)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> ck_phoneNo <span class="keyword">check</span>(len(phoneNo)<span class="operator">=</span><span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> ck_email <span class="keyword">check</span>(email <span class="keyword">like</span> <span class="string">&#x27;_%@_%.com&#x27;</span>)</span><br><span class="line"><span class="comment">--drop constraint ck_email  --删除约束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--非空约束 </span></span><br><span class="line"><span class="comment">--默认值</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> df_sex <span class="keyword">default</span>(<span class="number">1</span>) <span class="keyword">for</span> sex</span><br><span class="line"></span><br><span class="line"><span class="comment">--外键约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> fk_classId <span class="keyword">foreign</span> key(classId) <span class="keyword">references</span> classes(classId)</span><br><span class="line"></span><br><span class="line"><span class="comment">--注：创建了外键约束以后，</span></span><br><span class="line"><span class="comment">--新增数据时，先向主表中插入，再向子表中插入</span></span><br><span class="line"><span class="comment">--删除数据时，先从子表中删除数据，再从主表中删除数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-----创建表的同时添加约束</span></span><br><span class="line"><span class="comment">--创建班级表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> classes</span><br><span class="line">(</span><br><span class="line">	classId <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key,  <span class="comment">--班级编号</span></span><br><span class="line">	className <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,  <span class="comment">--班级名称</span></span><br><span class="line">	beginDate <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="comment">--开班日期	</span></span><br><span class="line">)</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--创建学生表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students</span><br><span class="line">(</span><br><span class="line">	sno <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key,			 <span class="comment">--学号</span></span><br><span class="line">	sname <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,					<span class="comment">--姓名</span></span><br><span class="line">	sex bit <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span>(<span class="number">1</span>),				 <span class="comment">--性别</span></span><br><span class="line">	birthday <span class="type">date</span>,								<span class="comment">--出生日期</span></span><br><span class="line">	phoneNo <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">check</span>(len(phoneNo)<span class="operator">=</span><span class="number">11</span>),				 <span class="comment">--手机号码</span></span><br><span class="line">	email <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">check</span>(email <span class="keyword">like</span> <span class="string">&#x27;_%@_%.com&#x27;</span>),               <span class="comment">--电子邮箱</span></span><br><span class="line">	personID <span class="type">char</span>(<span class="number">18</span>) <span class="keyword">check</span>(len(personID)<span class="operator">=</span><span class="number">18</span>),                <span class="comment">--身份证</span></span><br><span class="line">	classId <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">references</span> classes(classId)</span><br><span class="line">)</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建成绩表：保存考试的学员，每次考试的科目的成绩</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> scores</span><br><span class="line">(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">primary</span> key,   <span class="comment">--标识列</span></span><br><span class="line">	sno <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">references</span> students(sno), <span class="comment">--考试的学员学号</span></span><br><span class="line">	cId <span class="type">int</span> <span class="keyword">references</span> courses(courseId),   <span class="comment">--考试的课程号</span></span><br><span class="line">	score <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>                      <span class="comment">--分数</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="增加、更改、删除"><a href="#增加、更改、删除" class="headerlink" title="增加、更改、删除"></a>增加、更改、删除</h2><p>DML（数据操作语言）是用于操作数据库中存储的数据的语言。</p>
<h3 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--单行数据新增</span></span><br><span class="line"><span class="comment">--省略列名：值列表的个数和列的个数相同，数据类型要匹配</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> classes <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;java一班&#x27;</span>,<span class="string">&#x27;2024-5-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--加上列名：值的顺序和列的顺序 一致</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> classes(className,classId,beginDate) <span class="keyword">VALUES</span>(<span class="string">&#x27;java二班&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2024-5-2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--不能违反非空约束</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> classes(classId,className) <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;java三班&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students(sno,sname,sex,classId) <span class="keyword">VALUES</span>(<span class="string">&#x27;s001&#x27;</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--不能违反主键约束</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students(sno,sname,sex,classId) <span class="keyword">VALUES</span>(<span class="string">&#x27;s001&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students(sno,sname,sex,classId) <span class="keyword">VALUES</span>(<span class="string">&#x27;s002&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--不能违反检查约束</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students <span class="keyword">VALUES</span>(<span class="string">&#x27;s003&#x27;</span>,<span class="string">&#x27;rose&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;1995-9-8&#x27;</span>,<span class="string">&#x27;15858586969&#x27;</span>,<span class="string">&#x27;rose@163.com&#x27;</span>,<span class="string">&#x27;111222555888555777&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--使用默认值</span></span><br><span class="line"><span class="comment">--省略列名</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students(sno,sname,birthday,classId) <span class="keyword">VALUES</span>(<span class="string">&#x27;s004&#x27;</span>,<span class="string">&#x27;tonny&#x27;</span>,<span class="string">&#x27;1997-8-1&#x27;</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">--使用default作为默认值</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students(sno,sname,sex,birthday,classId) <span class="keyword">VALUES</span>(<span class="string">&#x27;s005&#x27;</span>,<span class="string">&#x27;edwin&#x27;</span>,<span class="keyword">default</span>,<span class="string">&#x27;1996-8-1&#x27;</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--不能违反外键约束</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students(sno,sname,birthday,classId) <span class="keyword">VALUES</span>(<span class="string">&#x27;s006&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;1994-8-1&#x27;</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--不能显示设置标识列的值</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> courses <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;C#&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> courses <span class="keyword">VALUES</span>(<span class="string">&#x27;C#&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> courses <span class="keyword">VALUES</span>(<span class="string">&#x27;HTML&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--多行数据新增</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> courses</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;Sql Server&#x27;</span> <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;LINQ&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> courses</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;ADO.NET&#x27;</span>),(<span class="string">&#x27;三层架构&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--UNION:合并结果集，去除重复的记录</span></span><br><span class="line"><span class="comment">--UNION ALL:合并结果集，不去除重复的记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>,<span class="string">&#x27;Sql Server&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>,<span class="string">&#x27;Sql Server&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> scores</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;s001&#x27;</span>,<span class="number">1</span>,<span class="number">56</span>),</span><br><span class="line">(<span class="string">&#x27;s001&#x27;</span>,<span class="number">2</span>,<span class="number">62</span>),</span><br><span class="line">(<span class="string">&#x27;s001&#x27;</span>,<span class="number">3</span>,<span class="number">71</span>),</span><br><span class="line">(<span class="string">&#x27;s001&#x27;</span>,<span class="number">4</span>,<span class="number">69</span>),</span><br><span class="line">(<span class="string">&#x27;s002&#x27;</span>,<span class="number">1</span>,<span class="number">53</span>),</span><br><span class="line">(<span class="string">&#x27;s002&#x27;</span>,<span class="number">2</span>,<span class="number">68</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ul>
<li>插入行时，行中有自动生成的列时，不要加上这个列名</li>
<li>用了nvarchar，中文字符会出现乱码，要值的前面加上N</li>
</ul>
<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students</span><br><span class="line"></span><br><span class="line"><span class="keyword">add</span> school <span class="type">varchar</span>(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--更新所有数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--修改所有学员的学校名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> school<span class="operator">=</span><span class="string">&#x27;苏州极客营软件培训中心&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--更新部分数据，同时更新多列的值，用逗号分隔</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--修改学号为s001的邮箱和手机号码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> phoneNo<span class="operator">=</span><span class="string">&#x27;15854741525&#x27;</span>,email<span class="operator">=</span><span class="string">&#x27;jack@163.com&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> sno<span class="operator">=</span><span class="string">&#x27;s001&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--将不及格的学员成绩提高5分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> scores <span class="keyword">SET</span> score<span class="operator">=</span>score<span class="operator">+</span><span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> score<span class="operator">&lt;</span><span class="number">60</span></span><br></pre></td></tr></table></figure>

<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--删除数据时不能违反外键约束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> courses</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除所有的数据时，标识列不会重置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> scores</span><br><span class="line"></span><br><span class="line"><span class="comment">--截断整张表的数据，在功能上和DELETE FROM scores 相同</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> scores</span><br><span class="line"></span><br><span class="line"><span class="comment">--注意：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--(1)DELETE FROM scores ，标识列不重置，继续增加；TRUNCATE TABLE scores，标识列重置为标识种子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--(2)对于有引用关系的表，即使没有数据的引用，也无法使用TRUNCATE TABLE courses删除；但可以使用DELETE FROM courses</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> courses</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> courses</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> scores</span><br><span class="line"></span><br><span class="line"><span class="comment">--drop constraint  FK__scores__cId__5070F446</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> FK__scores__cId__5070F446 <span class="keyword">foreign</span> key(cId) <span class="keyword">references</span> courses(courseId)</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除部分数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--删除不及格的学员成绩</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> score<span class="operator">&lt;</span><span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--删除班级编号为1的男生的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students </span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> classId<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> sex<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p><strong>查询全部的行和列</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--*：匹配所有的列</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure>

<p><strong>查询部分列</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查询学生的学号，姓名和性别</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,sname,sex</span><br><span class="line"><span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure>

<p><strong>查询部分行</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查询所有男生的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询班级编号是1的所有男生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> classId<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>给列命名</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno <span class="keyword">AS</span> <span class="string">&#x27;学号&#x27;</span>,sname <span class="keyword">AS</span> <span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;性别&#x27;</span><span class="operator">=</span>sex,sno<span class="operator">+</span><span class="string">&#x27;.&#x27;</span><span class="operator">+</span>sname <span class="keyword">AS</span> <span class="string">&#x27;学号和姓名&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure>

<p><strong>使用常量列</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>,<span class="string">&#x27;苏州极客营&#x27;</span> <span class="keyword">AS</span> <span class="string">&#x27;学校&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure>

<p><strong>限制行数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">3</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">30</span> <span class="keyword">percent</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure>

<p><strong>模糊查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查询姓名以t打头的学员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> sname <span class="keyword">like</span> <span class="string">&#x27;t%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询姓名包含t的学员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> sname <span class="keyword">like</span> <span class="string">&#x27;%t%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询学号是s001-s003</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">like</span> <span class="string">&#x27;s00[1-3]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">like</span> <span class="string">&#x27;s00[^1-3]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">&#x27;s00[1-3]&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>查询字段值为空的</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查询邮箱为空的学员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>

<p><strong>查询指定范围内的</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查询成绩在90-100之间的成绩信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">WHERE</span> score<span class="operator">&gt;=</span><span class="number">90</span> <span class="keyword">AND</span> score<span class="operator">&lt;=</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">WHERE</span> score <span class="keyword">BETWEEN</span> <span class="number">90</span> <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">WHERE</span> score <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">90</span> <span class="keyword">AND</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

<p><strong>查询在指定查询内容列表中的</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查询班级是1号或3号或4号的学员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> classId<span class="operator">=</span><span class="number">1</span> <span class="keyword">OR</span> classId<span class="operator">=</span><span class="number">3</span> <span class="keyword">OR</span> classId<span class="operator">=</span><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> classId <span class="keyword">IN</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p><strong>IN的指定内容列表，也可以是另一个子查询的结果</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查询课程名称为C#或HTML的考试成绩信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">WHERE</span> cId <span class="keyword">IN</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> courseId</span><br><span class="line">	<span class="keyword">FROM</span> courses</span><br><span class="line">	<span class="keyword">WHERE</span> courseName <span class="keyword">IN</span>(<span class="string">&#x27;C#&#x27;</span>,<span class="string">&#x27;HTML&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">WHERE</span> cId <span class="keyword">NOT</span> <span class="keyword">IN</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> courseId</span><br><span class="line">	<span class="keyword">FROM</span> courses</span><br><span class="line">	<span class="keyword">WHERE</span> courseName <span class="keyword">IN</span>(<span class="string">&#x27;C#&#x27;</span>,<span class="string">&#x27;HTML&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询jack的考试成绩信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="operator">=</span>(</span><br><span class="line">  <span class="keyword">SELECT</span> sno</span><br><span class="line">  <span class="keyword">FROM</span> students</span><br><span class="line">  <span class="keyword">WHERE</span> sname<span class="operator">=</span><span class="string">&#x27;jack&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> birthday <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询学号为s001的学员的考试成绩，并按成绩降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">WHERE</span> sno<span class="operator">=</span><span class="string">&#x27;s001&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询出课程编号为1号的前三名的考试成绩</span></span><br><span class="line"><span class="comment">--WITH TIES:是TOP N 的可选项，表示可以查询到和最后一个排序的值相同的也能查询到</span></span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">3</span> <span class="keyword">WITH</span> TIES <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>,score<span class="operator">+</span><span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score<span class="operator">+</span><span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><strong>按多列排序</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cId,score <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<h3 id="表连接查询"><a href="#表连接查询" class="headerlink" title="表连接查询"></a>表连接查询</h3><ul>
<li><p>当查询数据时，需要从多张表中获得数据，使用表连接查询实现。</p>
</li>
<li><p>表连接的分类</p>
<ul>
<li><p>内连接</p>
</li>
<li><p>外连接（左外连接，右外连接）</p>
</li>
</ul>
</li>
</ul>
<p><strong>内连接</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--按照连接条件，把两张表中满足连接条件的记录合并生成一条记录</span></span><br><span class="line"><span class="comment">--查询考试学员的姓名，以及考试的课程号和成绩</span></span><br><span class="line"><span class="comment">--姓名：Students</span></span><br><span class="line"><span class="comment">--课程号和成绩：Scores</span></span><br><span class="line"><span class="comment">--连接条件：两张表的学号相同</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sname,sc.cId,sc.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> scores sc</span><br><span class="line"><span class="keyword">ON</span> s.sno<span class="operator">=</span>sc.sno</span><br><span class="line"><span class="comment">--改变表的顺序，不影响结果</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sname,sc.cId,sc.score</span><br><span class="line"><span class="keyword">FROM</span> scores sc</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> students s</span><br><span class="line"><span class="keyword">ON</span> sc.sno<span class="operator">=</span>s.sno</span><br><span class="line"><span class="comment">--另一种内连接的语法：</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sname,sc.cId,sc.score</span><br><span class="line"><span class="keyword">FROM</span> students s,scores sc</span><br><span class="line"><span class="keyword">WHERE</span> s.sno<span class="operator">=</span>sc.sno</span><br><span class="line"><span class="comment">--查询哪些课程被学员考试，显示课程名，考试的学号和成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> c.courseName , sc.sno,sc.score</span><br><span class="line"><span class="keyword">FROM</span> courses c, scores sc</span><br><span class="line"><span class="keyword">WHERE</span> c.courseId<span class="operator">=</span>sc.cId</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> sc.cId</span><br><span class="line"><span class="comment">--查询考试学员的姓名，考试的课程名称，成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sname,c.courseName,sc.score</span><br><span class="line"><span class="keyword">FROM</span> students s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> scores sc <span class="keyword">ON</span> s.sno<span class="operator">=</span>sc.sno</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> courses c <span class="keyword">ON</span> sc.cId<span class="operator">=</span>c.courseId</span><br><span class="line"><span class="keyword">SELECT</span> s.sname,c.courseName,sc.score</span><br><span class="line"><span class="keyword">FROM</span> students s,courses c,scores sc</span><br><span class="line"><span class="keyword">WHERE</span> s.sno<span class="operator">=</span>sc.sno <span class="keyword">AND</span> c.courseId<span class="operator">=</span>sc.cId</span><br><span class="line"><span class="comment">--查询参加了考试的学员姓名，考试的科目数以及平均分</span></span><br><span class="line"><span class="comment">--物理表连接虚拟表</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sname,temp.count,temp.avg</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> sno,count<span class="operator">=</span><span class="built_in">COUNT</span>(sno),avg<span class="operator">=</span><span class="built_in">AVG</span>(score)</span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line">)temp</span><br><span class="line"><span class="keyword">ON</span> s.sno<span class="operator">=</span>temp.sno</span><br><span class="line"><span class="comment">--查询参加了1号和2号课程考试的学号</span></span><br><span class="line"><span class="comment">--两张表自连接</span></span><br><span class="line"><span class="keyword">SELECT</span> sc.sno</span><br><span class="line"><span class="keyword">FROM</span> scores sc</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> scores sc1 <span class="keyword">ON</span> sc.sno<span class="operator">=</span>sc1.sno</span><br><span class="line"><span class="keyword">WHERE</span> sc.cId<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> sc1.cId<span class="operator">=</span><span class="number">2</span></span><br><span class="line"><span class="comment">--查询参加了1号和2号课程考试的学员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> sc.sno</span><br><span class="line"><span class="keyword">FROM</span> scores sc</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> scores sc1 <span class="keyword">ON</span> sc.sno<span class="operator">=</span>sc1.sno</span><br><span class="line"><span class="keyword">WHERE</span> sc.cId<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> sc1.cId<span class="operator">=</span><span class="number">2</span></span><br><span class="line">) temp <span class="keyword">ON</span> s.sno<span class="operator">=</span>temp.sno</span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">WHERE</span> s.sno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> sc.sno</span><br><span class="line"><span class="keyword">FROM</span> scores sc</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> scores sc1 <span class="keyword">ON</span> sc.sno<span class="operator">=</span>sc1.sno</span><br><span class="line"><span class="keyword">WHERE</span> sc.cId<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> sc1.cId<span class="operator">=</span><span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p><strong>左外连接</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--SELECT 查询的列</span></span><br><span class="line"><span class="comment">--FROM 表1</span></span><br><span class="line"><span class="comment">--LEFT JOIN 表2 ON 连接条件</span></span><br><span class="line"><span class="comment">--返回表1中的所有数据，如果和表2没有符合连接条件的记录，则表2中的列以NULL返回</span></span><br><span class="line"><span class="comment">--查询所有学员的姓名，以及考试的课程号和成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sname,sc.cId,sc.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> scores sc</span><br><span class="line"><span class="keyword">ON</span> s.sno<span class="operator">=</span>sc.sno</span><br></pre></td></tr></table></figure>

<p><strong>外连接，表的顺序不能改变</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sname,sc.cId,sc.score</span><br><span class="line"><span class="keyword">FROM</span>  scores sc</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> students s</span><br><span class="line"><span class="keyword">ON</span> s.sno<span class="operator">=</span>sc.sno</span><br><span class="line"><span class="comment">--查询没有参加考试的学员姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sname</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> scores sc</span><br><span class="line"><span class="keyword">ON</span> s.sno<span class="operator">=</span>sc.sno</span><br><span class="line"><span class="keyword">WHERE</span> sc.cId <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sname</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">WHERE</span> s.sno <span class="keyword">NOT</span> <span class="keyword">IN</span>(<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sno <span class="keyword">FROM</span> scores)</span><br></pre></td></tr></table></figure>

<p><strong>右外连接</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--SELECT 查询的列</span></span><br><span class="line"><span class="comment">--FROM 表1</span></span><br><span class="line"><span class="comment">--RIGHT JOIN 表2 ON 连接条件</span></span><br><span class="line"><span class="comment">--返回表2中的所有数据，如果和表1没有符合连接条件的记录，则表1中的列以NULL返回</span></span><br><span class="line"><span class="keyword">SELECT</span> s.sname,sc.cId,sc.score</span><br><span class="line"><span class="keyword">FROM</span>  scores sc</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> students s</span><br><span class="line"><span class="keyword">ON</span> s.sno<span class="operator">=</span>sc.sno</span><br></pre></td></tr></table></figure>

<p><strong>外连接案例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE BankDB</span><br><span class="line">GO</span><br><span class="line">USE BankDB</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users</span><br><span class="line">(</span><br><span class="line">cardId <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">userName <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">)</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> accounts</span><br><span class="line">(</span><br><span class="line">countID <span class="type">int</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">primary</span> key,</span><br><span class="line">cardId <span class="type">int</span> <span class="keyword">references</span> users(cardId),</span><br><span class="line">balance money</span><br><span class="line">)</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">16</span>,<span class="string">&#x27;张三&#x27;</span>),(<span class="number">23</span>,<span class="string">&#x27;李四&#x27;</span>),(<span class="number">25</span>,<span class="string">&#x27;王五&#x27;</span>),(<span class="number">29</span>,<span class="string">&#x27;赵六&#x27;</span>),(<span class="number">30</span>,<span class="string">&#x27;钱七&#x27;</span>)</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> accounts</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">16</span>,<span class="number">50</span>),(<span class="number">25</span>,<span class="number">300</span>),(<span class="number">29</span>,<span class="number">160</span>)</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts</span><br><span class="line"><span class="comment">--将查询到数据插入到账户表中</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> accounts</span><br><span class="line"><span class="keyword">SELECT</span> u.cardId,<span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> users u</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> accounts a</span><br><span class="line"><span class="keyword">on</span> u.cardId<span class="operator">=</span>a.cardId</span><br><span class="line"><span class="keyword">WHERE</span> a.cardId <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>


<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>嵌套在另一个SQL语句的查询称为子查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br><span class="line"><span class="comment">--查询比tom学员年龄大的学员信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--（1步）先查询tom的年龄</span></span><br><span class="line"><span class="keyword">SELECT</span> age<span class="operator">=</span>DATEDIFF(<span class="keyword">YEAR</span>,birthday,GETDATE())</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> sname<span class="operator">=</span><span class="string">&#x27;tom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--(2步) 再筛选出出tom大的学员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>,DATEDIFF(<span class="keyword">YEAR</span>,birthday,GETDATE())</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> DATEDIFF(<span class="keyword">YEAR</span>,birthday,GETDATE())<span class="operator">&gt;</span></span><br><span class="line">(</span><br><span class="line">    <span class="comment">--子查询</span></span><br><span class="line">    <span class="keyword">SELECT</span> age<span class="operator">=</span>DATEDIFF(<span class="keyword">YEAR</span>,birthday,GETDATE())</span><br><span class="line">    <span class="keyword">FROM</span> students</span><br><span class="line">    <span class="keyword">WHERE</span> sname<span class="operator">=</span><span class="string">&#x27;tom&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="简单子查询"><a href="#简单子查询" class="headerlink" title="简单子查询"></a>简单子查询</h3><p>使用比较运算符将子查询和外层查询结合在一起的，这种子查询称为简单子查询<br>特点：保证子查询返回的值不能多于一个</p>
<h3 id="IN子查询"><a href="#IN子查询" class="headerlink" title="IN子查询"></a>IN子查询</h3><p>使用IN运算符将子查询和外层查询结合中一起的。<br>特点：保证子查询返回的列不能多于一个</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询考试成绩刚好及格的学员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> sno</span><br><span class="line">    <span class="keyword">FROM</span> scores</span><br><span class="line">    <span class="keyword">WHERE</span> score<span class="operator">=</span><span class="number">60</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询没有被学员考试的课程信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> courses </span><br><span class="line"><span class="keyword">WHERE</span> courseId <span class="keyword">NOT</span> <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> cId</span><br><span class="line">    <span class="keyword">FROM</span> scores</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除没有参加考试的学员信息</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">NOT</span> <span class="keyword">IN</span>(<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sno <span class="keyword">FROM</span> scores)</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询参加考试的学员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> scores sc</span><br><span class="line"><span class="keyword">ON</span> s.sno<span class="operator">=</span>sc.sno</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">IN</span>(<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sno <span class="keyword">FROM</span> scores)</span><br></pre></td></tr></table></figure>

<p>总结：简单子查询和IN子查询的查询过程：</p>
<ul>
<li>先执行子查询，并将查询结果缓存</li>
<li>再执行外层的查询</li>
</ul>
<h3 id="EXISTS子查询"><a href="#EXISTS子查询" class="headerlink" title="EXISTS子查询"></a>EXISTS子查询</h3><p>检查子查询是否至少返回一条记录，如果返回了记录，则EXISTS条件 成立，否则EXISTS条件不成立</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sysdatabases <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;StudentDB20240508&#x27;</span>)</span><br><span class="line">    PRINT <span class="string">&#x27;数据库存在&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">    PRINT <span class="string">&#x27;数据库不存在&#x27;</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">USE StudentDB20240508</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">IF <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sysobjects <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;students&#x27;</span>)</span><br><span class="line">    PRINT <span class="string">&#x27;学生表已存在&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> </span><br><span class="line">    PRINT <span class="string">&#x27;学生表不存在&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询参加了考试了学员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> scores sc <span class="keyword">WHERE</span> s.sno<span class="operator">=</span>sc.sno)</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询参加了1号和2号课程考试的学员信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores sc</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores sc <span class="keyword">WHERE</span> s.sno<span class="operator">=</span>sc.sno <span class="keyword">AND</span> sc.cId<span class="operator">=</span><span class="number">1</span>) <span class="comment">--学员考了1号课程</span></span><br><span class="line"><span class="keyword">AND</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores sc1 <span class="keyword">WHERE</span> s.sno<span class="operator">=</span>sc1.sno <span class="keyword">AND</span> sc1.cId<span class="operator">=</span><span class="number">2</span>) <span class="comment">--同一个学员考了2号课程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询没有参加考试的学员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores sc <span class="keyword">WHERE</span> s.sno<span class="operator">=</span>sc.sno)</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--SUM()</span></span><br><span class="line"><span class="comment">--查询学号为s001的学员的总成绩</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(score) <span class="keyword">AS</span> <span class="string">&#x27;总分&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">WHERE</span> sno<span class="operator">=</span><span class="string">&#x27;s001&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--注意：</span></span><br><span class="line"><span class="comment">--(1)如果SELECT中使用了聚合函数，那么除了聚合函数以外的其它列也要使用聚合函数或分组</span></span><br><span class="line"><span class="comment">--(2)聚合不应出现在 WHERE 子句中</span></span><br><span class="line"><span class="keyword">SELECT</span> sno, <span class="built_in">SUM</span>(score) <span class="keyword">AS</span> <span class="string">&#x27;总分&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">WHERE</span> sno<span class="operator">=</span><span class="string">&#x27;s001&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--MAX():最大值</span></span><br><span class="line"><span class="comment">--MIN():最小值</span></span><br><span class="line"><span class="comment">--AVG():平均值</span></span><br><span class="line"><span class="comment">--COUNT():个数</span></span><br><span class="line"><span class="comment">--查询1号课程的最高分，最低分和平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;最高分&#x27;</span><span class="operator">=</span><span class="built_in">MAX</span>(score),<span class="string">&#x27;最低分&#x27;</span><span class="operator">=</span><span class="built_in">MIN</span>(score),<span class="string">&#x27;平均分&#x27;</span><span class="operator">=</span><span class="built_in">AVG</span>(score),<span class="string">&#x27;次数&#x27;</span><span class="operator">=</span><span class="built_in">COUNT</span>(cId)</span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询1号课程最高分的考试成绩信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> score<span class="operator">=</span><span class="built_in">MAX</span>(score)  <span class="comment">--聚合不应出现在 WHERE 子句中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> score<span class="operator">=</span>(<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(score) <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询1号课程最高分的学员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students </span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="operator">=</span></span><br><span class="line">(</span><br><span class="line">	<span class="keyword">SELECT</span> sno</span><br><span class="line">	<span class="keyword">FROM</span> scores </span><br><span class="line">	<span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> score<span class="operator">=</span></span><br><span class="line">	(</span><br><span class="line">		<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(score) <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">1</span></span><br><span class="line">	)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询所有男生的人数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(sno)</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(sno)</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查询男生和女生的人数</span></span><br><span class="line"><span class="keyword">SELECT</span> sex,<span class="built_in">COUNT</span>(sno) <span class="keyword">AS</span> <span class="string">&#x27;人数&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sex</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 人数 <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询每个学员的最高分和平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,<span class="built_in">MAX</span>(score) <span class="keyword">AS</span> <span class="string">&#x27;最高分&#x27;</span>,<span class="built_in">AVG</span>(score) <span class="keyword">AS</span> <span class="string">&#x27;平均分&#x27;</span>,<span class="built_in">COUNT</span>(sno) <span class="keyword">AS</span> <span class="string">&#x27;次数&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询每个学员每门课程的考试次数</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,cId,<span class="built_in">COUNT</span>(sno) <span class="keyword">AS</span> <span class="string">&#x27;次数&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sno,cId</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> sno</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询参加了补考的学员信息</span></span><br><span class="line"><span class="comment">--HAVING是GROUP BY的可选子句</span></span><br><span class="line"><span class="comment">--分组之后的筛选，可以使用聚合函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> sno <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line">	<span class="keyword">SELECT</span> sno</span><br><span class="line">	<span class="keyword">FROM</span> scores</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> sno,cId</span><br><span class="line">	<span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(sno)<span class="operator">&gt;</span><span class="number">1</span>  </span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> cId,<span class="built_in">AVG</span>(score)</span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cId</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> cId,<span class="built_in">AVG</span>(score)</span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line"><span class="keyword">WHERE</span> score<span class="operator">&gt;</span><span class="number">60</span>    <span class="comment">--(1)</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cId      <span class="comment">--(2)</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(cId)<span class="operator">=</span><span class="number">1</span><span class="comment">--(3)</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--1.CHARINDEX:查找字符串在另一个字符串中第一次出现的位置，从1开始，如果没有查找到，则返回0</span></span><br><span class="line"><span class="keyword">SELECT</span> CHARINDEX(<span class="string">&#x27;C#&#x27;</span>,<span class="string">&#x27;C#程序设计&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> CHARINDEX(<span class="string">&#x27;C#&#x27;</span>,<span class="string">&#x27;C#程序设计&#x27;</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询姓名以t打头的学员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> CHARINDEX(<span class="string">&#x27;t&#x27;</span>,sname)<span class="operator">=</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--2.LEN:返回字符串的长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询学员姓名长度超过4个字符的学员姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> sname,LEN(sname) <span class="keyword">AS</span> <span class="string">&#x27;长度&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> LEN(sname)<span class="operator">&gt;</span><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--3.LOWER():小写</span></span><br><span class="line"><span class="comment">--UPPER():大写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(sname)</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"></span><br><span class="line"><span class="comment">--4.LTRIM():去除左边空格</span></span><br><span class="line"><span class="comment">--RTRIM():去除右边空格</span></span><br><span class="line"><span class="keyword">SELECT</span> RTRIM(sno)<span class="operator">+</span><span class="string">&#x27;.&#x27;</span><span class="operator">+</span>sname</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"></span><br><span class="line"><span class="comment">--5.LEFT():从字符串左边返回指定数目的字符</span></span><br><span class="line"><span class="comment">--RIGHT():从字符串右边返回指定数目的字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">&#x27;江苏省苏州市&#x27;</span>,<span class="number">2</span>),<span class="keyword">RIGHT</span>(<span class="string">&#x27;江苏省苏州市&#x27;</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--6.REPLACE():替换一个字符串中的字符</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;苏州极客营软件培训中心&#x27;</span>,<span class="string">&#x27;极客营&#x27;</span>,<span class="string">&#x27;igeekhome&#x27;</span>)</span><br><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> school<span class="operator">=</span>REPLACE(school,<span class="string">&#x27;极客营&#x27;</span>,<span class="string">&#x27;igeekhome&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--7.STUFF():在一个字符串中，删除指定长度的字符，并在该位置插入一个新的字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> STUFF(<span class="string">&#x27;苏州极客营软件培训中心&#x27;</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--1.GETDATE():取得当前的系统日期</span></span><br><span class="line"><span class="keyword">SELECT</span> GETDATE()</span><br><span class="line"></span><br><span class="line"><span class="comment">--2.DATEDIFF():两个日期之间的指定日期部分的区别</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(YYYY,<span class="string">&#x27;1995-5-9&#x27;</span>,GETDATE())</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询学员的年龄</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>,<span class="string">&#x27;年龄&#x27;</span><span class="operator">=</span>DATEDIFF(MM,birthday,GETDATE())</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"></span><br><span class="line"><span class="comment">--3.DATEADD():将指定的数值添加到指定的日期部分后的日期</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEADD(<span class="keyword">YEAR</span>,<span class="number">-2</span>,GETDATE())</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> DATEADD(<span class="keyword">MONTH</span>,<span class="number">12</span>,GETDATE())</span><br><span class="line"></span><br><span class="line"><span class="comment">--4.DATEPART():日期中指定日期部分的整数形式</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEPART(YYYY,GETDATE())</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询本月过生日的学员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> DATEPART(<span class="keyword">MONTH</span>,GETDATE())<span class="operator">=</span>DATEPART(<span class="keyword">MONTH</span>,birthday)</span><br><span class="line"></span><br><span class="line"><span class="comment">--5.DATENAME():日期中指定日期部分的字符串形式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> DATENAME(WEEKDAY,GETDATE())</span><br></pre></td></tr></table></figure>

<h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--1.ABS():绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--2.CEILING():向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">43.05</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--3.FLOOR()：向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">43.9999</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--4.ROUND():四舍五入</span></span><br><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">43.05</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--5.POWER():取数值表达式的幂值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">POWER</span>(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--6.Sign():符号</span></span><br><span class="line"><span class="keyword">SELECT</span> SIGN(<span class="number">-10</span>),SIGN(<span class="number">10</span>),SIGN(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--7.Sqrt():平方根</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SQRT</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--1.CONVERT()</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">10</span>),<span class="number">100</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">50</span>),GETDATE(),<span class="number">101</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">50</span>),GETDATE(),<span class="number">102</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">50</span>),GETDATE(),<span class="number">110</span>)</span><br><span class="line"><span class="comment">--2.DATALENGTH():返回字节数</span></span><br><span class="line"><span class="keyword">SELECT</span> DATALENGTH(<span class="string">&#x27;Sql查询&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> sname,DATALENGTH(sname),sno,DATALENGTH(sno)</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="comment">--3.CURRENT_USER:dbo(database owner)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_USER</span></span><br><span class="line"><span class="comment">--4.HOST_NAME</span></span><br><span class="line"><span class="keyword">SELECT</span> HOST_NAME()</span><br><span class="line"><span class="comment">--5.SYSTEM_USER</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SYSTEM_USER</span></span><br></pre></td></tr></table></figure>

<h2 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h2><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--声明局部变量,可以同时声明多个变量，用逗号分隔</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@name</span> <span class="type">VARCHAR</span>(<span class="number">10</span>),<span class="variable">@age</span> <span class="type">INT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--使用SET给变量赋值，只能给一个变量赋值</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@name</span><span class="operator">=</span><span class="string">&#x27;jack&#x27;</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@age</span><span class="operator">=</span><span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--使用SELECT给变量赋值，可以将查询的结果赋值给变量，也可以将常量值赋值给变量，可以同时给多个变量赋值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@name</span><span class="operator">=</span><span class="string">&#x27;JACK&#x27;</span>,<span class="variable">@age</span><span class="operator">=</span><span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--使用变量</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@name</span></span><br><span class="line">PRINT <span class="string">&#x27;姓名：&#x27;</span><span class="operator">+</span><span class="variable">@name</span></span><br><span class="line">GO   <span class="comment">--批处理标志</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询出比jack年龄大的学员信息</span></span><br><span class="line"><span class="comment">--声明变量保存jack的年龄</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@age</span> <span class="type">INT</span>,<span class="variable">@sno</span> <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--将查询到的数据保存在变量中</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@age</span><span class="operator">=</span>DATEDIFF(<span class="keyword">YEAR</span>,birthday,GETDATE()),<span class="variable">@sno</span><span class="operator">=</span>sno</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> sname<span class="operator">=</span><span class="string">&#x27;jack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@sno</span>,<span class="variable">@age</span></span><br><span class="line"></span><br><span class="line">PRINT <span class="string">&#x27;jack的年龄是：&#x27;</span><span class="operator">+</span><span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">10</span>),<span class="variable">@age</span>)</span><br><span class="line">PRINT <span class="string">&#x27;比jack年龄大的学员有：&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> DATEDIFF(<span class="keyword">YEAR</span>,birthday,GETDATE())<span class="operator">&gt;</span><span class="variable">@age</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>由系统声明和维护，只能使用，不能修改它的值</p>
<p><strong>@@ERROR</strong><br>最后一个T-SQL错误的错误号<br>@@ERROR之前的T-SQL语句的错误号，没有错误，则返回0，有错误则返回错误号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> sno<span class="operator">=</span><span class="string">&#x27;s001&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br><span class="line">PRINT @<span class="variable">@ERROR</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure>
<p><strong>@@ROWCOUNT</strong><br>受上一个SQL语句影响的行数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> sno<span class="operator">=</span><span class="string">&#x27;s001&#x27;</span></span><br><span class="line">PRINT @<span class="variable">@ROWCOUNT</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p><strong>@@IDENTITY</strong><br>最后一次插入的标识值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO scores VALUES(&#x27;s004&#x27;,1,85),(&#x27;s004&#x27;,2,70)</span><br><span class="line">PRINT @@ROWCOUNT</span><br><span class="line">PRINT @@IDENTITY</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p><strong>@@LANGUAGE</strong><br>当前使用的语言的名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">PRINT @<span class="variable">@LANGUAGE</span></span><br></pre></td></tr></table></figure>

<p><strong>@@MAX_CONNECTIONS</strong><br>可以创建的同时连接的最大数目</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">PRINT @<span class="variable">@MAX_CONNECTIONS</span></span><br></pre></td></tr></table></figure>

<p><strong>@@SERVERNAME</strong><br>本地服务器的名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">PRINT @<span class="variable">@SERVERNAME</span></span><br></pre></td></tr></table></figure>

<p><strong>@@VERSION</strong><br>SQL Server的版本信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">PRINT @<span class="variable">@VERSION</span></span><br></pre></td></tr></table></figure>

<h3 id="IF…ELSE"><a href="#IF…ELSE" class="headerlink" title="IF…ELSE"></a>IF…ELSE</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--统计出C#课程的平均分，如果平均分在80以上，则显示成绩优秀， 并显示出考试的前三名成绩信息；否则显示成绩一般，并显示出后三名成绩信息</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@courseId</span> <span class="type">INT</span>,<span class="variable">@avgScore</span> <span class="type">INT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询c#的课程号，保存在变量中</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@courseId</span><span class="operator">=</span>courseId</span><br><span class="line"><span class="keyword">FROM</span> courses  <span class="keyword">WHERE</span> courseName<span class="operator">=</span><span class="string">&#x27;C#&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询c#的平均分，保存在变量中</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="variable">@avgScore</span><span class="operator">=</span><span class="built_in">AVG</span>(score) <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="variable">@courseId</span></span><br><span class="line"></span><br><span class="line">PRINT <span class="string">&#x27;c#的平均分是：&#x27;</span><span class="operator">+</span><span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>),<span class="variable">@avgScore</span>)</span><br><span class="line"></span><br><span class="line">IF <span class="variable">@avgScore</span><span class="operator">&gt;</span><span class="number">80</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    PRINT <span class="string">&#x27;成绩优秀&#x27;</span></span><br><span class="line">    <span class="keyword">SELECT</span> TOP <span class="number">3</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="variable">@courseId</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    PRINT <span class="string">&#x27;成绩一般&#x27;</span></span><br><span class="line">    <span class="keyword">SELECT</span> TOP <span class="number">3</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="variable">@courseId</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">ASC</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<h3 id="CASE－END多分支语句"><a href="#CASE－END多分支语句" class="headerlink" title="CASE－END多分支语句"></a>CASE－END多分支语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--显示学员信息，性别显示为男或女</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,sname,sex<span class="operator">=</span><span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex<span class="operator">=</span><span class="number">1</span> <span class="keyword">THEN</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">WHEN</span> sex<span class="operator">=</span><span class="number">0</span> <span class="keyword">THEN</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">END</span>,birthday</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line">GO</span><br><span class="line"><span class="comment">--等值判断</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,sname,sex<span class="operator">=</span><span class="keyword">CASE</span> sex <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">END</span>,birthday</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line">GO</span><br><span class="line"><span class="comment">--显示学员的考试成绩，并根据考试成绩显示等级</span></span><br><span class="line"><span class="comment">--90（包含）-100    A</span></span><br><span class="line"><span class="comment">--80(包含）-90     B</span></span><br><span class="line"><span class="comment">--70(包含）-80     C</span></span><br><span class="line"><span class="comment">--60(包含）-70     D</span></span><br><span class="line"><span class="comment">--低于60          E</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>,level<span class="operator">=</span><span class="keyword">CASE</span> <span class="keyword">WHEN</span> score<span class="operator">&gt;=</span><span class="number">90</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">                    <span class="keyword">WHEN</span> score<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">                    <span class="keyword">WHEN</span> score<span class="operator">&gt;=</span><span class="number">70</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">                    <span class="keyword">WHEN</span> score<span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">THEN</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line">                    <span class="keyword">ELSE</span> <span class="string">&#x27;E&#x27;</span> <span class="keyword">END</span></span><br><span class="line"><span class="keyword">FROM</span> scores</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="comment">--更新数据</span></span><br><span class="line"><span class="comment">--90（包含）-100    </span></span><br><span class="line"><span class="comment">--80(包含）-90     +2</span></span><br><span class="line"><span class="comment">--70(包含）-80     +3</span></span><br><span class="line"><span class="comment">--60(包含）-70     +4</span></span><br><span class="line"><span class="comment">--低于60          +5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> scores <span class="keyword">SET</span> score<span class="operator">=</span><span class="keyword">CASE</span> <span class="keyword">WHEN</span> score<span class="operator">&gt;=</span><span class="number">90</span> <span class="keyword">THEN</span> score</span><br><span class="line">                             <span class="keyword">WHEN</span> score<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">THEN</span> score<span class="operator">+</span><span class="number">2</span></span><br><span class="line">                             <span class="keyword">WHEN</span> score<span class="operator">&gt;=</span><span class="number">70</span> <span class="keyword">THEN</span> score<span class="operator">+</span><span class="number">3</span></span><br><span class="line">                             <span class="keyword">WHEN</span> score<span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">THEN</span> score<span class="operator">+</span><span class="number">4</span></span><br><span class="line">                             <span class="keyword">ELSE</span> score<span class="operator">+</span><span class="number">5</span> <span class="keyword">END</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure>
<h3 id="WHILE循环"><a href="#WHILE循环" class="headerlink" title="WHILE循环"></a>WHILE循环</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--由于1号课程较难，成绩较低，现在要对1号课程进行提分，确保每个学员都能及格，</span></span><br><span class="line"><span class="comment">--先每个加2分，判断是否有人不及格，如果还有人不及格，继续加2分，直到所有人都及格</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">1</span></span><br><span class="line">GO</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@noPassCount</span> <span class="type">INT</span> ,<span class="variable">@count</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@count</span><span class="operator">=</span><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> scores <span class="keyword">SET</span> score<span class="operator">=</span>score<span class="operator">+</span><span class="number">2</span> </span><br><span class="line"><span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@count</span><span class="operator">=</span><span class="variable">@count</span><span class="operator">+</span><span class="number">1</span></span><br><span class="line">PRINT <span class="string">&#x27;提分次数：&#x27;</span><span class="operator">+</span><span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>),<span class="variable">@count</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@noPassCount</span><span class="operator">=</span><span class="built_in">COUNT</span>(cId) <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> score<span class="operator">&lt;</span><span class="number">60</span> <span class="keyword">AND</span> cId<span class="operator">=</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line">WHILE <span class="variable">@noPassCount</span><span class="operator">&gt;</span><span class="number">0</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">UPDATE</span> scores <span class="keyword">SET</span> score<span class="operator">=</span>score<span class="operator">+</span><span class="number">2</span> </span><br><span class="line">    <span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">1</span></span><br><span class="line">    <span class="keyword">SET</span> <span class="variable">@count</span><span class="operator">=</span><span class="variable">@count</span><span class="operator">+</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line">    PRINT <span class="string">&#x27;提分次数：&#x27;</span><span class="operator">+</span><span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>),<span class="variable">@count</span>)</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="variable">@noPassCount</span><span class="operator">=</span><span class="built_in">COUNT</span>(cId) <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> score<span class="operator">&lt;</span><span class="number">60</span> <span class="keyword">AND</span> cId<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-----</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@noPassCount</span> <span class="type">INT</span> ,<span class="variable">@count</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@count</span><span class="operator">=</span><span class="number">0</span></span><br><span class="line">WHILE <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">UPDATE</span> scores <span class="keyword">SET</span> score<span class="operator">=</span>score<span class="operator">+</span><span class="number">2</span> </span><br><span class="line">    <span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">1</span></span><br><span class="line">    <span class="keyword">SET</span> <span class="variable">@count</span><span class="operator">=</span><span class="variable">@count</span><span class="operator">+</span><span class="number">1</span></span><br><span class="line">    PRINT <span class="string">&#x27;提分次数：&#x27;</span><span class="operator">+</span><span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>),<span class="variable">@count</span>)</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">1</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="variable">@noPassCount</span><span class="operator">=</span><span class="built_in">COUNT</span>(cId) <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> score<span class="operator">&lt;</span><span class="number">60</span> <span class="keyword">AND</span> cId<span class="operator">=</span><span class="number">1</span></span><br><span class="line">    IF <span class="variable">@noPassCount</span><span class="operator">=</span><span class="number">0</span> </span><br><span class="line">        BREAK</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="comment">--根据如下规则对2号课程的考试成绩进行反复加分，直到2号课程的平均分超过85分为止。请编写T-SQL语句实现。</span></span><br><span class="line"><span class="comment">--90分以上：   不加分</span></span><br><span class="line"><span class="comment">--80－89分：   加1分</span></span><br><span class="line"><span class="comment">--70－79分：   加2分</span></span><br><span class="line"><span class="comment">--60－69分：   加3分</span></span><br><span class="line"><span class="comment">--60分以下：   加5分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@avgScore</span> <span class="type">INT</span> ,<span class="variable">@count</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@count</span><span class="operator">=</span><span class="number">0</span></span><br><span class="line">WHILE <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">UPDATE</span> scores <span class="keyword">SET</span> score<span class="operator">=</span><span class="keyword">CASE</span> <span class="keyword">WHEN</span> score<span class="operator">&gt;=</span><span class="number">90</span> <span class="keyword">THEN</span> score</span><br><span class="line">                             <span class="keyword">WHEN</span> score<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">THEN</span> score<span class="operator">+</span><span class="number">1</span></span><br><span class="line">                             <span class="keyword">WHEN</span> score<span class="operator">&gt;=</span><span class="number">70</span> <span class="keyword">THEN</span> score<span class="operator">+</span><span class="number">2</span></span><br><span class="line">                             <span class="keyword">WHEN</span> score<span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">THEN</span> score<span class="operator">+</span><span class="number">3</span></span><br><span class="line">                             <span class="keyword">ELSE</span> score<span class="operator">+</span><span class="number">5</span> <span class="keyword">END</span></span><br><span class="line">    <span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">SET</span> <span class="variable">@count</span><span class="operator">=</span><span class="variable">@count</span><span class="operator">+</span><span class="number">1</span></span><br><span class="line">    PRINT <span class="string">&#x27;提分次数：&#x27;</span><span class="operator">+</span><span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>),<span class="variable">@count</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="variable">@avgScore</span><span class="operator">=</span><span class="built_in">AVG</span>(score) <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="number">2</span></span><br><span class="line">    IF <span class="variable">@avgScore</span><span class="operator">&gt;</span><span class="number">85</span></span><br><span class="line">        BREAK</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><h2 id="事务、索引、视图"><a href="#事务、索引、视图" class="headerlink" title="事务、索引、视图"></a>事务、索引、视图</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务(TRANSACTION)是作为单个逻辑工作单元执行的一系列操作<br>这些操作作为一个整体一起向系统提交，要么都执行、要么都不执行<br>事务是一个不可分割的工作逻辑单元 </p>
<p><strong>显式事务</strong></p>
<ul>
<li>开启事务：BEGIN TRANSACTION</li>
<li>提交事务：COMMIT TRANSACTION</li>
<li>回滚事务：ROLLBACK TRANSACTION</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRANSACTION</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@TRANCOUNT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--COMMIT TRANSACTION</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> TRANSACTION</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@TRANCOUNT</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p><strong>使用事务解决转账</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--从张三账户转账1000到李四账户</span></span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">BEGIN</span> TRANSACTION  <span class="comment">--开启事务</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@sumERROR</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@sumERROR</span><span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">UPDATE</span> bank <span class="keyword">SET</span> currentMoney<span class="operator">-</span><span class="operator">=</span><span class="number">500</span> <span class="keyword">WHERE</span> customerName<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@sumERROR</span><span class="operator">+</span><span class="operator">=</span>@<span class="variable">@ERROR</span></span><br><span class="line"><span class="keyword">UPDATE</span> bank <span class="keyword">SET</span> currentMoney<span class="operator">+</span><span class="operator">=</span><span class="number">500</span> <span class="keyword">WHERE</span> customerName<span class="operator">=</span><span class="string">&#x27;李四&#x27;</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@sumERROR</span><span class="operator">+</span><span class="operator">=</span>@<span class="variable">@ERROR</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> bank</span><br><span class="line"></span><br><span class="line">IF <span class="variable">@sumERROR</span><span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">COMMIT</span> TRANSACTION</span><br><span class="line">    PRINT <span class="string">&#x27;转账成功&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">ROLLBACK</span> TRANSACTION</span><br><span class="line">    PRINT <span class="string">&#x27;转账失败&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line">PRINT <span class="string">&#x27;转账之后的账户：&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> bank</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">USE StudentDB20240508</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p><strong>按照姓名创建索引</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX IX_sname <span class="keyword">ON</span> students(sname) <span class="keyword">WITH</span> FILLFACTOR<span class="operator">=</span><span class="number">70</span></span><br></pre></td></tr></table></figure>
<p><strong>删除索引</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX students.IX_sname</span><br><span class="line"></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> NONCLUSTERED INDEX IX_sname <span class="keyword">ON</span> students(sname) <span class="keyword">WITH</span> FILLFACTOR<span class="operator">=</span><span class="number">70</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> sno<span class="operator">=</span><span class="string">&#x27;s111&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>查询时无需指定使用哪个索引，系统会自动优化查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">with</span>(INDEX<span class="operator">=</span>IX_sname)</span><br><span class="line"><span class="keyword">WHERE</span> sname<span class="operator">=</span><span class="string">&#x27;tom&#x27;</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure>
<p><strong>创建索引的注意事项：</strong></p>
<ul>
<li>表中有大量的数据</li>
<li>选择用于搜索和排序的列</li>
<li>列不能有大量重复的值</li>
</ul>
<p>优点：</p>
<ul>
<li>加强行的唯一性</li>
<li>提高 查询 速度</li>
</ul>
<p>缺点：</p>
<ul>
<li>由于索引页也需要存储 ，所以需要更多的存储空间</li>
<li>数据的操作，索引也需要调整，所以时间可能更长</li>
</ul>
<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图：筛选数据表中的数据，从一张表或多张表中获得一些综合数据<br>视图不存储数据，视图中的数据是虚拟，来自于创建视图时引用的基表的数据。</p>
<p><strong>创建视图，保存学员的学号，姓名，考试的课程名和成绩</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> VW_stu</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line">    <span class="keyword">SELECT</span> s.sno,s.sname,c.courseName,sc.score</span><br><span class="line">    <span class="keyword">FROM</span> students s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> scores sc <span class="keyword">ON</span> s.sno<span class="operator">=</span>sc.sno </span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> courses c <span class="keyword">ON</span> sc.cId<span class="operator">=</span>c.courseId</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p><strong>从视图中查询数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> VW_stu</span><br></pre></td></tr></table></figure>

<p><strong>更新视图，实际上是更新视图所引用的基表中的数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> VW_stu <span class="keyword">SET</span> score<span class="operator">=</span><span class="number">100</span> <span class="keyword">WHERE</span> sno<span class="operator">=</span><span class="string">&#x27;s001&#x27;</span> <span class="keyword">AND</span> courseName<span class="operator">=</span><span class="string">&#x27;C#&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>视图中的数据不能删除</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> VW_stu</span><br></pre></td></tr></table></figure>

<p><strong>删除视图</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> VW_stu</span><br></pre></td></tr></table></figure>

<h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>存储过程可以将对数据库的一些业务规则统一保存在存储过程中，可以包含对数据库的各种操作，也可以包含数据库编程语句。<br>优点</p>
<ul>
<li>复用代码，实现代码的模块化设计</li>
<li>执行速度更快</li>
<li>降低网络的流量</li>
<li>代码安全性更高</li>
</ul>
<p>存储过程分为</p>
<ul>
<li>系统存储过程：由系统定义的存储过程，保存在master数据库中</li>
<li>自定义存储过程：由用户根据业务需求自定义的存储过程</li>
</ul>
<h3 id="系统存储过程"><a href="#系统存储过程" class="headerlink" title="系统存储过程"></a>系统存储过程</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> sp_databases    <span class="comment">--列出所有的数据库</span></span><br><span class="line"><span class="keyword">EXEC</span> sp_helptext <span class="variable">@objname</span><span class="operator">=</span><span class="string">&#x27;sp_help&#x27;</span>  <span class="comment">--显示创建存储过程的文本</span></span><br><span class="line"><span class="keyword">EXEC</span> sp_tables <span class="variable">@table_name</span><span class="operator">=</span><span class="string">&#x27;Employee&#x27;</span>   <span class="comment">--列出当前环境下可查询的对象列表</span></span><br><span class="line"><span class="keyword">EXEC</span> sp_renamedb <span class="variable">@dbname</span><span class="operator">=</span><span class="string">&#x27;BankDB&#x27;</span>,<span class="variable">@newname</span><span class="operator">=</span><span class="string">&#x27;BandDB1&#x27;</span> <span class="comment">--修改数据库名称</span></span><br><span class="line"><span class="keyword">EXEC</span> sp_password <span class="variable">@new</span><span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>,<span class="variable">@loginame</span><span class="operator">=</span><span class="string">&#x27;sa&#x27;</span>  <span class="comment">--修改登录账号的密码</span></span><br><span class="line"><span class="keyword">EXEC</span> sp_help <span class="variable">@objname</span><span class="operator">=</span><span class="string">&#x27;Scores&#x27;</span>  <span class="comment">--列出指定对象的帮助信息</span></span><br><span class="line"><span class="keyword">EXEC</span> sp_stored_procedures   <span class="comment">--列出当前环境下的可用存储过程</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义存储过程"><a href="#自定义存储过程" class="headerlink" title="自定义存储过程"></a>自定义存储过程</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> scores2</span><br><span class="line">(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">primary</span> key,</span><br><span class="line">    sno <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,   </span><br><span class="line">    writtenExam <span class="type">int</span>,</span><br><span class="line">    labExam <span class="type">int</span></span><br><span class="line">)</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> scores2</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> scores2</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;s001&#x27;</span>,<span class="number">58</span>,<span class="number">92</span> <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;s002&#x27;</span>,<span class="number">74</span>,<span class="number">51</span> <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;s003&#x27;</span>,<span class="number">64</span>,<span class="number">78</span> <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;s004&#x27;</span>,<span class="number">55</span>,<span class="number">79</span> <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;s005&#x27;</span>,<span class="number">69</span>,<span class="number">56</span> </span><br><span class="line"></span><br><span class="line">GO</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores2</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>
<h3 id="无参的存储过程"><a href="#无参的存储过程" class="headerlink" title="无参的存储过程"></a>无参的存储过程</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">创建存储过程，查看考试的平均分，以及未通过考试的信息</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_getavg</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(writtenExam) <span class="keyword">FROM</span> scores2 </span><br><span class="line"></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span>  <span class="keyword">FROM</span> scores2 <span class="keyword">WHERE</span> writtenExam<span class="operator">&lt;</span><span class="number">60</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="comment">--调用存储过程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXEC</span> proc_getavg</span><br><span class="line">GO</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="带有输入参数的存储过程"><a href="#带有输入参数的存储过程" class="headerlink" title="带有输入参数的存储过程"></a>带有输入参数的存储过程</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_getavg2</span><br><span class="line"><span class="variable">@courseId</span> <span class="type">INT</span>  <span class="comment">--输入参数</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">    PRINT <span class="string">&#x27;考试平均分：&#x27;</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(score) <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> cId<span class="operator">=</span><span class="variable">@courseId</span></span><br><span class="line"></span><br><span class="line">    PRINT <span class="string">&#x27;未通过考试的成绩信息：&#x27;</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores <span class="keyword">WHERE</span> score<span class="operator">&lt;</span><span class="number">60</span> <span class="keyword">AND</span> cId<span class="operator">=</span><span class="variable">@courseId</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXEC</span> proc_getavg2 <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXEC</span> proc_getavg2 <span class="variable">@courseId</span><span class="operator">=</span><span class="number">2</span></span><br><span class="line">GO</span><br><span class="line"><span class="comment">--根据考试的验易程度，设置不同的考试及格线，查询所有未通过考试的成绩信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> proc_getnopassscores</span><br><span class="line"><span class="variable">@writtenExam</span> <span class="type">int</span>,  <span class="comment">--笔试及格线</span></span><br><span class="line"><span class="variable">@labExam</span> <span class="type">int</span>  <span class="comment">--机试及格线</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">    PRINT <span class="string">&#x27;笔试及格线：&#x27;</span><span class="operator">+</span><span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>),<span class="variable">@writtenExam</span>)</span><br><span class="line">    PRINT <span class="string">&#x27;机试及格线：&#x27;</span><span class="operator">+</span><span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>),<span class="variable">@labExam</span>)</span><br><span class="line">    PRINT <span class="string">&#x27;未通过成绩信息：&#x27;</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores2 <span class="keyword">WHERE</span> writtenExam<span class="operator">&lt;</span><span class="variable">@writtenExam</span> <span class="keyword">OR</span> labExam<span class="operator">&lt;</span><span class="variable">@labExam</span>    </span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXEC</span> proc_getnopassscores <span class="variable">@writtenExam</span><span class="operator">=</span><span class="number">60</span>,<span class="variable">@labExam</span><span class="operator">=</span><span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXEC</span> proc_getnopassscores <span class="variable">@writtenExam</span><span class="operator">=</span><span class="number">56</span>,<span class="variable">@labExam</span><span class="operator">=</span><span class="number">55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--创建存储过程，统计指定年和月的工资报表</span></span><br><span class="line"></span><br><span class="line">USE CompanyDB</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> PROC_GETSalary</span><br><span class="line"><span class="variable">@year</span> <span class="type">INT</span>,<span class="comment">--年</span></span><br><span class="line"><span class="variable">@month</span> <span class="type">INT</span> <span class="comment">--月</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@i</span> <span class="type">INT</span>,<span class="variable">@count</span> <span class="type">INT</span>,<span class="variable">@sumAbsenceMoney</span> money, <span class="variable">@salary</span> money</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@i</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@count</span><span class="operator">=</span><span class="built_in">MAX</span>(EmpID) <span class="keyword">FROM</span> Employee</span><br><span class="line">WHILE(<span class="variable">@i</span><span class="operator">&lt;=</span><span class="variable">@count</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SET</span> <span class="variable">@sumAbsenceMoney</span><span class="operator">=</span><span class="number">0</span></span><br><span class="line">    IF <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Employee <span class="keyword">WHERE</span> EmpID<span class="operator">=</span><span class="variable">@i</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="comment">--查询基本工资</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="variable">@salary</span><span class="operator">=</span>Salary <span class="keyword">FROM</span> Employee <span class="keyword">WHERE</span> EmpID<span class="operator">=</span><span class="variable">@i</span></span><br><span class="line">        <span class="comment">--查询请假扣除的工资</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="variable">@sumAbsenceMoney</span><span class="operator">=</span>ISNULL(<span class="built_in">SUM</span>(at.AbMoney),<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">FROM</span> Absence a <span class="keyword">inner</span> <span class="keyword">join</span> AbsenceType <span class="keyword">at</span> <span class="keyword">on</span> a.AbsenceTypeID<span class="operator">=</span>at.AbsenceTypeID</span><br><span class="line">        <span class="keyword">WHERE</span> a.EmpID<span class="operator">=</span><span class="variable">@i</span> <span class="keyword">AND</span> DATEPART(<span class="keyword">YEAR</span>,a.AbsenceDate)<span class="operator">=</span><span class="variable">@year</span> <span class="keyword">AND</span> DATEPART(<span class="keyword">MONTH</span>,a.AbsenceDate)<span class="operator">=</span><span class="variable">@month</span>     </span><br><span class="line">        IF <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sysobjects <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;salaryTbl&#x27;</span>)</span><br><span class="line">        <span class="keyword">BEGIN</span></span><br><span class="line">            PRINT <span class="string">&#x27;工资表已存在&#x27;</span></span><br><span class="line">            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> salaryTbl</span><br><span class="line">            <span class="keyword">SELECT</span> <span class="variable">@year</span>,<span class="variable">@month</span>,<span class="variable">@salary</span><span class="operator">-</span><span class="variable">@sumAbsenceMoney</span>,<span class="variable">@i</span></span><br><span class="line">        <span class="keyword">END</span></span><br><span class="line">        <span class="keyword">ELSE</span></span><br><span class="line">        <span class="keyword">BEGIN</span></span><br><span class="line">            PRINT <span class="string">&#x27;工资表不存在&#x27;</span></span><br><span class="line">            <span class="keyword">SELECT</span> SalID<span class="operator">=</span><span class="keyword">IDENTITY</span>(<span class="type">INT</span>,<span class="number">1</span>,<span class="number">1</span>),SalYear<span class="operator">=</span><span class="variable">@year</span>,SalMonth<span class="operator">=</span><span class="variable">@month</span>,SalMoney<span class="operator">=</span><span class="variable">@salary</span><span class="operator">-</span><span class="variable">@sumAbsenceMoney</span>,FEmpID<span class="operator">=</span><span class="variable">@i</span></span><br><span class="line">            <span class="keyword">INTO</span> salaryTbl          </span><br><span class="line">        <span class="keyword">END</span></span><br><span class="line">        PRINT <span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>),<span class="variable">@i</span>)<span class="operator">+</span><span class="string">&#x27;号工资已生成&#x27;</span>      </span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line">    <span class="keyword">SET</span> <span class="variable">@i</span><span class="operator">=</span><span class="variable">@i</span><span class="operator">+</span><span class="number">1</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br><span class="line"><span class="keyword">EXEC</span> PROC_GETSalary <span class="variable">@year</span><span class="operator">=</span><span class="number">2011</span>,<span class="variable">@month</span><span class="operator">=</span><span class="number">9</span></span><br><span class="line"><span class="keyword">EXEC</span> PROC_GETSalary <span class="variable">@year</span><span class="operator">=</span><span class="number">2012</span>,<span class="variable">@month</span><span class="operator">=</span><span class="number">5</span></span><br><span class="line"><span class="keyword">EXEC</span> PROC_GETSalary <span class="variable">@year</span><span class="operator">=</span><span class="number">2019</span>,<span class="variable">@month</span><span class="operator">=</span><span class="number">10</span></span><br><span class="line"><span class="keyword">EXEC</span> PROC_GETSalary <span class="number">2011</span>,<span class="number">9</span></span><br><span class="line"><span class="keyword">EXEC</span> PROC_GETSalary <span class="variable">@month</span><span class="operator">=</span><span class="number">5</span>,<span class="variable">@year</span><span class="operator">=</span><span class="number">2012</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> [salaryTbl]</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [salaryTbl]</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [dbo].[salaryTbl]</span><br><span class="line">GO</span><br><span class="line">USE StudentDB20240508</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>
<h3 id="设置输入参数的默认值"><a href="#设置输入参数的默认值" class="headerlink" title="设置输入参数的默认值"></a>设置输入参数的默认值</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--考试的及格线一般都是60，如果没有指定则使用60分作为考试及格线</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_getnopassscores2</span><br><span class="line"><span class="variable">@writtenExam</span> <span class="type">int</span><span class="operator">=</span><span class="number">60</span>,  <span class="comment">--笔试及格线</span></span><br><span class="line"><span class="variable">@labExam</span> <span class="type">int</span><span class="operator">=</span><span class="number">60</span>  <span class="comment">--机试及格线</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">    PRINT <span class="string">&#x27;笔试及格线：&#x27;</span><span class="operator">+</span><span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>),<span class="variable">@writtenExam</span>)</span><br><span class="line">    PRINT <span class="string">&#x27;机试及格线：&#x27;</span><span class="operator">+</span><span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>),<span class="variable">@labExam</span>)</span><br><span class="line">    PRINT <span class="string">&#x27;未通过成绩信息：&#x27;</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores2 <span class="keyword">WHERE</span> writtenExam<span class="operator">&lt;</span><span class="variable">@writtenExam</span> <span class="keyword">OR</span> labExam<span class="operator">&lt;</span><span class="variable">@labExam</span>    </span><br><span class="line">GO</span><br><span class="line"><span class="keyword">EXEC</span> proc_getnopassscores2  <span class="comment">--都使用默认值</span></span><br><span class="line"><span class="keyword">EXEC</span> proc_getnopassscores2 <span class="variable">@labExam</span><span class="operator">=</span><span class="number">55</span> <span class="comment">--笔试默认值，机试提供 值</span></span><br><span class="line"><span class="keyword">EXEC</span> proc_getnopassscores2 <span class="variable">@writtenExam</span><span class="operator">=</span><span class="number">56</span> <span class="comment">--笔试提供 值，机试默认值</span></span><br><span class="line"><span class="keyword">EXEC</span> proc_getnopassscores2 <span class="number">55</span></span><br></pre></td></tr></table></figure>

<h3 id="带有输出参数的存储过程"><a href="#带有输出参数的存储过程" class="headerlink" title="带有输出参数的存储过程"></a>带有输出参数的存储过程</h3><p><strong>根据指定的及格线，查询出未通过考试的信息，以及人数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> proc_getnopassscores3</span><br><span class="line"><span class="variable">@noPassCount</span> <span class="type">int</span> output, <span class="comment">--输出 参数</span></span><br><span class="line"><span class="variable">@writtenExam</span> <span class="type">int</span><span class="operator">=</span><span class="number">60</span>,  <span class="comment">--笔试及格线</span></span><br><span class="line"><span class="variable">@labExam</span> <span class="type">int</span><span class="operator">=</span><span class="number">60</span>  <span class="comment">--机试及格线</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span></span><br><span class="line">    PRINT <span class="string">&#x27;笔试及格线：&#x27;</span><span class="operator">+</span><span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>),<span class="variable">@writtenExam</span>)</span><br><span class="line">    PRINT <span class="string">&#x27;机试及格线：&#x27;</span><span class="operator">+</span><span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>),<span class="variable">@labExam</span>)</span><br><span class="line">    PRINT <span class="string">&#x27;未通过成绩信息：&#x27;</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> scores2 <span class="keyword">WHERE</span> writtenExam<span class="operator">&lt;</span><span class="variable">@writtenExam</span> <span class="keyword">OR</span> labExam<span class="operator">&lt;</span><span class="variable">@labExam</span>    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="variable">@noPassCount</span><span class="operator">=</span><span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> scores2 <span class="keyword">WHERE</span> writtenExam<span class="operator">&lt;</span><span class="variable">@writtenExam</span> <span class="keyword">OR</span> labExam<span class="operator">&lt;</span><span class="variable">@labExam</span>    </span><br><span class="line">GO</span><br></pre></td></tr></table></figure>
<p><strong>声明变量</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@count</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">EXEC</span> proc_getnopassscores3 <span class="variable">@noPassCount</span><span class="operator">=</span><span class="variable">@count</span> output,<span class="variable">@writtenExam</span><span class="operator">=</span><span class="number">56</span></span><br><span class="line">PRINT <span class="string">&#x27;未通过考试的人数是：&#x27;</span><span class="operator">+</span><span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>), <span class="variable">@count</span>)</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">USE StudentDB20240508</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">DROP</span> PROC proc_addStudent</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>
<p><strong>综合案例：创建存储过程，实现新增学员信息，需要判断学号不能重复，班级编号需要存在</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_addStudent</span><br><span class="line"><span class="variable">@message</span> <span class="type">varchar</span>(<span class="number">100</span>) output,</span><br><span class="line"><span class="variable">@sno</span> <span class="type">varchar</span>(<span class="number">10</span>),<span class="comment">--学号</span></span><br><span class="line"><span class="variable">@sname</span> nvarchar(<span class="number">10</span>),<span class="comment">--姓名</span></span><br><span class="line"><span class="variable">@sex</span> bit, <span class="comment">--性别</span></span><br><span class="line"><span class="variable">@classId</span> <span class="type">int</span>, <span class="comment">--班级编号</span></span><br><span class="line"><span class="variable">@birthday</span> <span class="type">date</span><span class="operator">=</span><span class="keyword">null</span>,<span class="comment">--出生日期</span></span><br><span class="line"><span class="variable">@phoneNo</span> <span class="type">char</span>(<span class="number">11</span>)<span class="operator">=</span><span class="keyword">null</span>,<span class="comment">--手机号码</span></span><br><span class="line"><span class="variable">@email</span> <span class="type">varchar</span>(<span class="number">50</span>)<span class="operator">=</span><span class="keyword">null</span>, <span class="comment">--邮箱</span></span><br><span class="line"><span class="variable">@personId</span> <span class="type">char</span>(<span class="number">18</span>)<span class="operator">=</span><span class="keyword">null</span><span class="comment">--身份证</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">    <span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span></span><br><span class="line">    <span class="comment">--学号不能重复</span></span><br><span class="line">    IF <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [dbo].[students] <span class="keyword">WHERE</span> sno<span class="operator">=</span><span class="variable">@sno</span>)</span><br><span class="line">        <span class="keyword">SET</span> <span class="variable">@message</span><span class="operator">=</span><span class="string">&#x27;学号&#x27;</span><span class="operator">+</span><span class="variable">@sno</span><span class="operator">+</span><span class="string">&#x27;已存在！&#x27;</span></span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="comment">--班级编号需要存在</span></span><br><span class="line">        IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> classes <span class="keyword">WHERE</span> [classId]<span class="operator">=</span><span class="variable">@classId</span>)</span><br><span class="line">            <span class="keyword">SET</span> <span class="variable">@message</span><span class="operator">=</span><span class="string">&#x27;班级编号&#x27;</span><span class="operator">+</span><span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>),<span class="variable">@classId</span>)<span class="operator">+</span><span class="string">&#x27;不存在，无法添加学员！&#x27;</span></span><br><span class="line">        <span class="keyword">ELSE</span></span><br><span class="line">        <span class="keyword">BEGIN</span></span><br><span class="line">            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> students(sno,sname,sex,birthday,phoneNo,email,personID,classId)</span><br><span class="line">            <span class="keyword">VALUES</span>(<span class="variable">@sno</span>,<span class="variable">@sname</span>,<span class="variable">@sex</span>,<span class="variable">@birthday</span>,<span class="variable">@phoneNo</span>,<span class="variable">@email</span>,<span class="variable">@personId</span>,<span class="variable">@classId</span>)</span><br><span class="line">            IF @<span class="variable">@ROWCOUNT</span><span class="operator">&gt;</span><span class="number">0</span></span><br><span class="line">                <span class="keyword">SET</span> <span class="variable">@message</span><span class="operator">=</span><span class="string">&#x27;新增学员信息成功！&#x27;</span></span><br><span class="line">            <span class="keyword">ELSE</span></span><br><span class="line">                <span class="keyword">SET</span> <span class="variable">@message</span><span class="operator">=</span><span class="string">&#x27;新增学员信息失败！&#x27;</span></span><br><span class="line">        <span class="keyword">END</span></span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@msg</span> <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line"><span class="comment">--EXEC proc_addStudent @message=@msg output,@sno=&#x27;s009&#x27;,@sname=&#x27;TEST01&#x27;,@sex=1,@classId=1</span></span><br><span class="line"><span class="keyword">EXEC</span> proc_addStudent <span class="variable">@message</span><span class="operator">=</span><span class="variable">@msg</span> output,<span class="variable">@sno</span><span class="operator">=</span><span class="string">&#x27;s010&#x27;</span>,<span class="variable">@sname</span><span class="operator">=</span><span class="string">&#x27;TEST02&#x27;</span>,<span class="variable">@sex</span><span class="operator">=</span><span class="number">0</span>,</span><br><span class="line"><span class="variable">@classId</span><span class="operator">=</span><span class="number">2</span>,<span class="variable">@birthday</span><span class="operator">=</span><span class="string">&#x27;1994-5-8&#x27;</span>,<span class="variable">@phoneNo</span><span class="operator">=</span><span class="string">&#x27;15856859685&#x27;</span>,<span class="variable">@email</span><span class="operator">=</span><span class="string">&#x27;TEST02@163.com&#x27;</span>,<span class="variable">@personId</span><span class="operator">=</span><span class="string">&#x27;125632525785856965&#x27;</span></span><br><span class="line">PRINT <span class="variable">@msg</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure>


<h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>触发器是一种特殊的存储过程，它主要在表之间制定一些业务规则，并具备事务模型<br>触发器是在对表进行插入、更新或删除操作时自动执行的存储过程</p>
<h3 id="触发器类型"><a href="#触发器类型" class="headerlink" title="触发器类型"></a>触发器类型</h3><ul>
<li><p><strong>After触发器</strong></p>
<ul>
<li><p>只能定义在数据表上</p>
</li>
<li><p>对表执行操作之后触发的触发器</p>
</li>
<li><p>对于表的同一个操作只能有一个触发器</p>
</li>
</ul>
</li>
<li><p><strong>instead of触发器</strong></p>
<ul>
<li>定义在数据表上或视图上</li>
<li>不执行预定义的操作，只触发触发器，执行触发器中的代码</li>
<li>对于同一个操作可以有多个触发器</li>
</ul>
</li>
</ul>
<p>触发器触发后，在内存在会生成两张临时表，inserted表和deleted表</p>
<ul>
<li>insert:inserted表中保存新增的数据</li>
<li>delete:deleted表中保存删除的数据</li>
<li>update:更新之前的数据保存在deleted表，更新之后的数据保存在inserted表中</li>
</ul>
<h3 id="After触发器"><a href="#After触发器" class="headerlink" title="After触发器"></a>After触发器</h3><p><strong>insert触发器</strong><br>当成功插入一条交易信息时，要自动更新对应的账户余额</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trig_insert_transInfo</span><br><span class="line"><span class="keyword">on</span> TransInfo</span><br><span class="line"><span class="keyword">with</span> encryption  <span class="comment">--加密文本</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">insert</span> </span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">    <span class="keyword">set</span> nocount <span class="keyword">on</span></span><br><span class="line">    print <span class="string">&#x27;insert触发器触发&#x27;</span></span><br><span class="line">    <span class="keyword">declare</span> <span class="variable">@cardID</span> <span class="type">varchar</span>(<span class="number">10</span>),<span class="variable">@transType</span> <span class="type">varchar</span>(<span class="number">10</span>),<span class="variable">@transMoney</span> money</span><br><span class="line">    <span class="keyword">select</span>  <span class="variable">@cardID</span><span class="operator">=</span>cardID,<span class="variable">@transType</span><span class="operator">=</span>transType,<span class="variable">@transMoney</span><span class="operator">=</span>transMoney  <span class="keyword">from</span> inserted  <span class="comment">--从临时表中查询新增的数据</span></span><br><span class="line">    if <span class="variable">@transType</span><span class="operator">=</span><span class="string">&#x27;支取&#x27;</span></span><br><span class="line">        <span class="keyword">update</span> bank <span class="keyword">set</span> currentMoney<span class="operator">=</span>currentMoney<span class="operator">-</span><span class="variable">@transMoney</span> <span class="keyword">where</span> cardID<span class="operator">=</span><span class="variable">@cardID</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">update</span> bank <span class="keyword">set</span> currentMoney<span class="operator">=</span>currentMoney<span class="operator">+</span><span class="variable">@transMoney</span> <span class="keyword">where</span> cardID<span class="operator">=</span><span class="variable">@cardID</span></span><br><span class="line"></span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> trig_insert_transInfo</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> nocount <span class="keyword">on</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> TransInfo(transDate,cardID,transType,transMoney) <span class="keyword">values</span>(getdate(),<span class="string">&#x27;10010001&#x27;</span>,<span class="string">&#x27;支取&#x27;</span>,<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> TransInfo(transDate,cardID,transType,transMoney) <span class="keyword">values</span>(getdate(),<span class="string">&#x27;10010001&#x27;</span>,<span class="string">&#x27;存款&#x27;</span>,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">exec</span> sp_helptext <span class="variable">@objname</span><span class="operator">=</span><span class="string">&#x27;trig_insert_transInfo&#x27;</span></span><br><span class="line">go</span><br></pre></td></tr></table></figure>
<p><strong>delete触发器</strong><br>删除交易记录时，将其备份到交易记录备份表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trig_delete_transInfo</span><br><span class="line"><span class="keyword">on</span> TransInfo</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">delete</span> </span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">    <span class="keyword">set</span> nocount <span class="keyword">on</span></span><br><span class="line">    print <span class="string">&#x27;正在备份...&#x27;</span></span><br><span class="line">    if <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sysobjects <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;transInfo2&#x27;</span>)</span><br><span class="line">        <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">into</span> transInfo2 <span class="keyword">from</span> deleted</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> transInfo2</span><br><span class="line">        <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> deleted</span><br><span class="line">    print <span class="string">&#x27;备份成功&#x27;</span></span><br><span class="line"></span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> trig_delete_transInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> TransInfo <span class="keyword">where</span> transDate<span class="operator">=</span><span class="string">&#x27;2024-05-14 15:27:10.273&#x27;</span></span><br><span class="line"><span class="comment">--触发delete触发器</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> TransInfo</span><br><span class="line"></span><br><span class="line"><span class="comment">--不触发delete触发器</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> TransInfo</span><br><span class="line">go</span><br></pre></td></tr></table></figure>
<p><strong>update触发器</strong><br>跟踪用户的交易，交易金额超过20000元，则取消交易，并给出错误提示。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trig_update_bank</span><br><span class="line"><span class="keyword">on</span> bank</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">update</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">    <span class="keyword">set</span> nocount <span class="keyword">on</span></span><br><span class="line">    print <span class="string">&#x27;update触发器触发&#x27;</span></span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> bank</span><br><span class="line">    <span class="keyword">declare</span> <span class="variable">@beforeMoney</span> money,<span class="variable">@afterMoney</span> money</span><br><span class="line">    <span class="keyword">select</span> <span class="variable">@beforeMoney</span><span class="operator">=</span>currentMoney <span class="keyword">from</span> deleted</span><br><span class="line">    <span class="keyword">select</span> <span class="variable">@afterMoney</span><span class="operator">=</span>currentMoney <span class="keyword">from</span> inserted</span><br><span class="line"></span><br><span class="line">    if <span class="built_in">ABS</span>(<span class="variable">@afterMoney</span><span class="operator">-</span><span class="variable">@beforeMoney</span>)<span class="operator">&gt;</span><span class="number">20000</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        print <span class="string">&#x27;单笔交易金额不能超过20000元&#x27;</span></span><br><span class="line">        <span class="keyword">rollback</span> transaction</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> trig_update_bank</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> bank <span class="keyword">set</span> currentMoney<span class="operator">+</span><span class="operator">=</span><span class="number">25000</span> <span class="keyword">where</span> cardID<span class="operator">=</span><span class="string">&#x27;10010001&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> TransInfo(transDate,cardID,transType,transMoney) <span class="keyword">values</span>(getdate(),<span class="string">&#x27;10010001&#x27;</span>,<span class="string">&#x27;存款&#x27;</span>,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">go</span><br></pre></td></tr></table></figure>
<h3 id="instead-of触发器"><a href="#instead-of触发器" class="headerlink" title="instead of触发器"></a>instead of触发器</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trig_update_insteadof_bank</span><br><span class="line"><span class="keyword">on</span> bank</span><br><span class="line">instead <span class="keyword">of</span> <span class="keyword">update</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">    print <span class="string">&#x27;instead of 触发器触发&#x27;</span></span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> bank</span><br><span class="line">    <span class="keyword">declare</span> <span class="variable">@beforeMoney</span> money,<span class="variable">@afterMoney</span> money,<span class="variable">@cardID</span> <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">select</span> <span class="variable">@beforeMoney</span><span class="operator">=</span>currentMoney,<span class="variable">@cardID</span><span class="operator">=</span>cardID <span class="keyword">from</span> deleted</span><br><span class="line">    <span class="keyword">select</span> <span class="variable">@afterMoney</span><span class="operator">=</span>currentMoney <span class="keyword">from</span> inserted</span><br><span class="line"></span><br><span class="line">    if <span class="built_in">ABS</span>(<span class="variable">@afterMoney</span><span class="operator">-</span><span class="variable">@beforeMoney</span>)<span class="operator">&lt;=</span><span class="number">20000</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        print <span class="string">&#x27;账户更新成功&#x27;</span></span><br><span class="line">        <span class="keyword">update</span> bank <span class="keyword">set</span> currentMoney<span class="operator">=</span><span class="variable">@afterMoney</span> <span class="keyword">where</span> cardID<span class="operator">=</span><span class="variable">@cardID</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> trig_update_insteadof_bank</span><br><span class="line"><span class="keyword">update</span> bank <span class="keyword">set</span> currentMoney<span class="operator">+</span><span class="operator">=</span><span class="number">1000</span> <span class="keyword">where</span> cardID<span class="operator">=</span><span class="string">&#x27;10010001&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>sqlserver</tag>
      </tags>
  </entry>
  <entry>
    <title>Csharp</title>
    <url>/Csharp/</url>
    <content><![CDATA[<p>C#（读作C Sharp）是一种由微软开发的通用、面向对象的编程语言。它结合了C和C++语言的强大功能，同时又去掉了一些繁琐的特性，使得编程更加简单和高效。</p>
<span id="more"></span>

<h2 id="NET-Framework入门"><a href="#NET-Framework入门" class="headerlink" title=".NET Framework入门"></a>.NET Framework入门</h2><p>.NET Framework 是微软开发的一个面向对象的软件开发框架，用于构建各种类型的应用程序，包括桌面应用、Web 应用、服务、库以及移动应用。它提供了一系列的类库和运行时环境，使得开发人员能够更快速、更简单地开发和部署应用程序。</p>
<h3 id="CLR-公共语言运行时"><a href="#CLR-公共语言运行时" class="headerlink" title="CLR(公共语言运行时)"></a>CLR(公共语言运行时)</h3><p>CLR（Common Language Runtime，公共语言运行时）是 .NET Framework 的核心组件之一，它提供了一个统一的运行时环境，用于执行 .NET 应用程序。CLR 负责管理 .NET 应用程序的执行过程，并提供了许多重要的功能和服务，包括：</p>
<p><strong>即时编译（Just-In-Time Compilation，JIT）：</strong> CLR 包含了一个即时编译器，它将中间语言（IL）代码转换为特定平台的本机机器代码。这样，CLR 可以在运行时将 IL 代码编译成可执行的代码，并在处理器上执行。</p>
<p><strong>内存管理：</strong> CLR 负责管理应用程序的内存分配和释放。它包含了一个垃圾回收器（Garbage Collector，GC），用于自动回收不再使用的对象，并释放它们所占用的内存。这样，开发人员无需手动管理内存，可以避免内存泄漏和资源泄漏。</p>
<p><strong>异常处理：</strong> CLR 提供了强大的异常处理机制，用于捕获和处理应用程序中的异常情况。开发人员可以使用 try-catch-finally 块来捕获和处理异常，确保应用程序的稳定性和可靠性。</p>
<p><strong>安全性：</strong> CLR 实施了严格的安全性机制，用于保护应用程序免受恶意代码的攻击和破坏。它包含了代码访问安全性（CAS）、代码验证、代码签名等机制，确保应用程序在安全的环境中运行。</p>
<p><strong>类型系统和元数据：</strong> CLR 包含了一个强大的类型系统和元数据系统，用于描述和管理应用程序中的类型和成员。它支持面向对象编程的特性，如封装、继承、多态等，并提供了丰富的类型库和类库，帮助开发人员构建高质量的应用程序。</p>
<p><strong>多语言互操作性：</strong> CLR 支持多种编程语言的开发，并提供了一致的运行时环境和类型系统，使得不同语言编写的程序可以互相调用和交互。这样，开发人员可以根据自己的喜好和需求选择最适合的编程语言进行开发。</p>
<p>总的来说，CLR 是 .NET Framework 的核心组件，它为 .NET 应用程序提供了一个统一的运行时环境和执行引擎，提供了许多重要的功能和服务，帮助开发人员构建高质量、可靠性和安全性的应用程序。</p>
<h3 id="FCL-统一的类库集"><a href="#FCL-统一的类库集" class="headerlink" title="FCL(统一的类库集)"></a>FCL(统一的类库集)</h3><p>FCL 是 .NET Framework 的一部分，它指的是 Framework Class Library（框架类库），也称为 Base Class Library（基础类库）。FCL 是 .NET Framework 的核心组件之一，提供了一组通用的类和类型，用于开发各种类型的应用程序。</p>
<h3 id="特点和功能："><a href="#特点和功能：" class="headerlink" title="特点和功能："></a>特点和功能：</h3><ol>
<li><p><strong>提供丰富的功能：</strong> FCL 包含了大量的类和方法，涵盖了各种常见的编程任务，如文件操作、网络通信、图形界面、数据库访问、加密解密、XML 处理等。</p>
</li>
<li><p><strong>提供跨平台的一致性：</strong> FCL 提供了一组跨平台的类和接口，使得开发人员可以编写跨平台的代码，不受操作系统和硬件平台的限制。</p>
</li>
<li><p><strong>支持面向对象编程：</strong> FCL 中的类和类型都是面向对象的，它们遵循了面向对象编程的原则，如封装、继承、多态等。</p>
</li>
<li><p><strong>提供了强大的异常处理机制：</strong> FCL 提供了强大的异常处理机制，使得开发人员可以轻松地捕获和处理异常，确保程序的稳定性和可靠性。</p>
</li>
<li><p><strong>易于使用和扩展：</strong> FCL 中的类和方法都经过了精心设计和测试，具有良好的文档和示例，使得开发人员可以快速上手并进行开发。此外，FCL 还支持扩展和定制，开发人员可以根据自己的需求进行扩展和定制。</p>
</li>
</ol>
<p>总的来说，FCL 是 .NET Framework 的重要组成部分，为开发人员提供了丰富的功能和强大的工具，帮助他们构建高质量、可靠性和安全性的应用程序。</p>
<h3 id="多语言的融合"><a href="#多语言的融合" class="headerlink" title="多语言的融合"></a>多语言的融合</h3><p>.NET 平台是一个多语言的平台，它支持多种编程语言的开发，并且能够实现这些语言之间的融合和互操作。以下是实现多语言融合的一些主要机制：</p>
<ol>
<li><p><strong>通用类型系统（Common Type System，CTS）：</strong> .NET 平台定义了一种通用的类型系统，所有支持的编程语言都必须遵循该类型系统。这意味着不同的语言可以共享相同的数据类型和对象模型，使得它们可以互相调用和交互。</p>
</li>
<li><p><strong>公共语言运行时（Common Language Runtime，CLR）：</strong> CLR 提供了一个统一的运行时环境，负责管理和执行中间语言（IL）代码。不同的语言编译器可以将源代码编译成 IL，然后由 CLR 执行。这样，不同语言编写的程序可以在相同的运行时环境中运行，并且可以互相调用和交互。</p>
</li>
<li><p><strong>互操作性（Interoperability）：</strong> .NET 平台支持不同语言之间的互操作性。例如，C# 可以调用由 Visual Basic .NET 编写的类，反之亦然。这是通过 CLR 提供的一致的类型系统和通用的对象模型来实现的。</p>
</li>
<li><p><strong>跨语言框架和类库：</strong> .NET 平台提供了许多通用的框架和类库，这些框架和类库可以被不同的语言所使用。例如，Windows Presentation Foundation (WPF)、ASP.NET 和 Windows Communication Foundation (WCF) 等框架都可以被多种语言调用和扩展。</p>
</li>
<li><p><strong>公共语言规范（Common Language Specification，CLS）：</strong> CLS 是一组语言和编译器要遵循的规则和约定，以确保语言间的互操作性和互通性。通过遵循 CLS，开发人员可以编写可在任何 CLR 兼容的语言中使用的代码。</p>
</li>
</ol>
<p>总的来说，.NET 平台提供了一种统一的环境和基础设施，使得不同的编程语言可以共享资源、互相调用和交互，从而实现了多语言的融合和互操作。</p>
<h3 id="语言无关性"><a href="#语言无关性" class="headerlink" title="语言无关性"></a>语言无关性</h3><p> .NET 实现语言无关性的核心在于它的中间语言（Intermediate Language，IL）和公共语言运行时（Common Language Runtime，CLR）的设计。</p>
<p><strong>中间语言（IL）：</strong> .NET 编译器将源代码编译成中间语言（IL），也称为 MSIL（Microsoft Intermediate Language）或 CIL（Common Intermediate Language）。IL 是一种与平台无关的中间表示，类似于汇编语言，但比汇编语言更高级。IL 是一种面向堆栈的语言，它包含了一组指令，这些指令可以在任何实现了 CLR 的平台上运行。</p>
<p><strong>公共语言运行时（CLR）：</strong> CLR 是 .NET 平台的核心组件，负责管理和执行中间语言代码。CLR 提供了许多服务，包括即时编译（Just-In-Time Compilation，JIT）、内存管理、异常处理和安全性等。CLR 将 IL 代码转换为特定平台的本地机器代码，并在运行时执行。这意味着同样的 IL 代码可以在不同的操作系统和架构上运行，因为 CLR 负责处理平台特定的细节。</p>
<p><strong>公共语言规范（CLS）：</strong> .NET 平台还定义了公共语言规范（Common Language Specification，CLS），它是一组语言和编译器要遵循的规则和约定，以确保语言间的互操作性和互通性。通过遵循 CLS，开发人员可以编写可在任何 CLR 兼容的语言中使用的代码。</p>
<p>总的来说，通过 IL 和 CLR 的设计，.NET 平台实现了语言无关性，使得不同的编程语言可以共享相同的运行时环境和类库，从而实现了跨语言的互操作性和代码重用。</p>
<h3 id="第一个c-程序"><a href="#第一个c-程序" class="headerlink" title="第一个c#程序"></a>第一个c#程序</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;<span class="comment">//导入系统命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NotePad</span> <span class="comment">//定义一个命名空间(不要加分号)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//定义一个类</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title">HelloWorld</span>&#123;</span><br><span class="line">    <span class="comment">//Main主方法：程序的入口点</span></span><br><span class="line">    <span class="comment">//public公共的 static静态的 void表示该方法无返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>()</span>&#123;</span><br><span class="line">      <span class="comment">//输出信息 Console控制台类 writeLink输出一行</span></span><br><span class="line">      	console.writeLine(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>在 Windows 操作系统上配置 C# 的环境变量通常是通过安装 .NET Framework 或者 .NET Core SDK 来完成的。下面是基本的步骤：</p>
<p><strong>安装 .NET Framework 或者 .NET Core SDK：</strong></p>
<ul>
<li><p><strong>.NET Framework：</strong> 如果你使用的是旧版的 Windows 操作系统（如 Windows 7、Windows 8.1 或者 Windows 10 中的旧版本），你可以通过安装 .NET Framework 来配置 C# 的环境变量。你可以从 Microsoft 官方网站下载并安装适合你操作系统版本的 .NET Framework。</p>
</li>
<li><p><strong>.NET Core SDK：</strong> 如果你使用的是较新版本的 Windows 操作系统，推荐安装 .NET Core SDK，因为它是跨平台的，并且支持最新的 .NET 开发。你可以从 Microsoft 官方网站下载并安装最新版本的 .NET Core SDK。</p>
</li>
</ul>
<p><strong>配置环境变量：</strong></p>
<ul>
<li><strong>设置 PATH 变量：</strong> 安装完成后，系统会自动配置好 .NET 的相关环境变量。如果没有自动配置，你需要手动将 .NET 相关的可执行文件路径添加到系统的 PATH 环境变量中。通常，.NET Framework 的可执行文件位于 <code>C:\Windows\Microsoft.NET\Framework</code> 或 <code>C:\Windows\Microsoft.NET\Framework64</code> 下，而 .NET Core SDK 的可执行文件位于其安装目录下的 <code>bin</code> 文件夹中。</li>
</ul>
<p><strong>验证安装：</strong></p>
<ul>
<li><p>打开命令提示符或者 PowerShell，输入以下命令来验证 C# 环境是否配置成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">csc -version</span><br></pre></td></tr></table></figure>

<p>如果显示了 C# 编译器的版本信息，说明环境配置成功。</p>
</li>
</ul>
<p>请注意，这些步骤可能会因你所使用的 .NET 版本和操作系统版本而略有不同，具体步骤可能需要根据你的环境和需求进行调整。建议在安装过程中仔细阅读官方文档并按照说明进行操作。</p>
<h3 id="Macos上配置dotnet"><a href="#Macos上配置dotnet" class="headerlink" title="Macos上配置dotnet"></a>Macos上配置dotnet</h3><p>在 macOS 上使用 Visual Studio Code 进行 .NET 开发非常方便。以下是一些基本步骤：</p>
<p><strong>安装 .NET Core SDK</strong></p>
<p>首先，你需要安装 .NET Core SDK。你可以从 <a href="https://dotnet.microsoft.com/download">.NET 官方网站</a> 下载最新版本的 .NET Core SDK，并按照安装说明进行安装。</p>
<p><strong>安装 Visual Studio Code</strong></p>
<p>如果你还没有安装 Visual Studio Code，可以从 <a href="https://code.visualstudio.com/">Visual Studio Code 官方网站</a> 下载最新版本，并按照安装说明进行安装。</p>
<p><strong>安装 C# 扩展</strong></p>
<p>打开 Visual Studio Code，点击左侧的扩展图标（或者按下 <code>Ctrl+Shift+X</code>），搜索并安装 C# 扩展。这个扩展提供了丰富的功能，包括代码补全、调试等。</p>
<p><strong>创建 .NET 项目</strong></p>
<p>在终端中，使用 <code>dotnet new</code> 命令创建一个新的 .NET 项目。例如，要创建一个新的控制台应用程序项目，可以运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet new console -n MyConsoleApp</span><br></pre></td></tr></table></figure>

<p>这会在当前目录下创建一个名为 <code>MyConsoleApp</code> 的新的控制台应用程序项目。</p>
<p><strong>打开项目</strong></p>
<p>在 Visual Studio Code 中，选择 <code>文件 -&gt; 打开文件夹</code>，然后选择你刚刚创建的项目文件夹（例如 <code>MyConsoleApp</code> 文件夹），点击 <code>打开</code>。</p>
<p>** 编写代码**</p>
<p>在 Visual Studio Code 中编辑 <code>Program.cs</code> 文件（或者其他你想编辑的文件），编写 C# 代码。</p>
<p><strong>运行项目</strong></p>
<p>在终端中，导航到项目文件夹（例如 <code>MyConsoleApp</code> 文件夹），然后运行以下命令来构建和运行项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet run</span><br></pre></td></tr></table></figure>

<p>这会编译并执行你的项目。你也可以使用 Visual Studio Code 提供的调试功能来调试你的代码。</p>
<p>通过这些步骤，你就可以在 macOS 上使用 Visual Studio Code 进行 .NET 开发了。</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>在 C# 中，有三种主要的注释形式：单行注释、多行注释和文档注释。</p>
<p><strong>单行注释</strong></p>
<p>单行注释以双斜杠 <code>//</code> 开头，用于在代码中添加单行注释。单行注释会从 <code>//</code> 开始一直到行尾。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一个单行注释</span></span><br><span class="line"><span class="built_in">int</span> x = <span class="number">10</span>; <span class="comment">// 这是另一个单行注释</span></span><br></pre></td></tr></table></figure>

<p><strong>多行注释</strong></p>
<p>多行注释以 <code>/*</code> 开始，以 <code>*/</code> 结束，用于在代码中添加多行注释。</p>
<p>示例</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是一个多行注释</span></span><br><span class="line"><span class="comment">可以跨越多行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">int</span> x = <span class="number">10</span>; <span class="comment">/* 这是一个带有单行注释的多行注释 */</span></span><br></pre></td></tr></table></figure>

<p><strong>文档注释</strong></p>
<p>文档注释以 <code>///</code> 开始，用于为代码中的类型、成员或参数添加注释。文档注释通常用于生成代码文档，可以使用工具如 Visual Studio 的 IntelliSense 来查看。</p>
<p>示例</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 这是一个类的说明文档注释</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 这是一个方法的说明文档注释</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;x&quot;&gt;</span>参数 x 的说明<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;y&quot;&gt;</span>参数 y 的说明<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回值的说明<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文档注释以 <code>&lt;summary&gt;</code> 标签开始，用于描述类型、成员或参数的摘要信息。其他常用的标签包括 <code>&lt;param&gt;</code>（描述方法参数）、<code>&lt;returns&gt;</code>（描述返回值）等。</p>
<p><strong>折叠</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">region</span> 折叠</span></span><br><span class="line"><span class="meta"># <span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure>

<h3 id="main方法的四种写法"><a href="#main方法的四种写法" class="headerlink" title="main方法的四种写法"></a>main方法的四种写法</h3><p>在 C# 中，<code>Main</code> 方法是程序的入口点，是程序开始执行的地方。通常情况下，<code>Main</code> 方法有四种不同的写法：</p>
<p><strong>最基本的写法</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>带参数的写法</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> arg <span class="keyword">in</span> args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用 <code>Main</code> 方法返回 <code>int</code> 类型的写法（用于表示程序的执行状态）</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 表示程序正常退出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>带参数并返回 <code>int</code> 类型的写法</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> arg <span class="keyword">in</span> args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(arg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 表示程序正常退出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这些写法都是合法的 <code>Main</code> 方法的写法，具体选择哪种写法取决于你的需求和习惯。</p>
<h3 id="项目下的文件含义"><a href="#项目下的文件含义" class="headerlink" title="项目下的文件含义"></a>项目下的文件含义</h3><p><strong>.sln</strong></p>
<p>解决方案，一个解决方案里可以包含多个项目，双击可以同时打开多项目</p>
<p><strong>.csproj</strong></p>
<p>c#项目的启动文件，双击之后可以打开此项目</p>
<p><strong>App.config</strong></p>
<p>配置文件，后面会讲到</p>
<p><strong>bin目录</strong></p>
<p>用来保存项目生成后的程序集，它有debug和release版本，下面有exe文件(项目的可执行文件)</p>
<p><strong>obj目录</strong></p>
<p>用来保存每个模块的编译结果，在.net中，编译是分模块进行的，编译整个完成后会合并成一个.dll或exe文件，保存到bin目录下</p>
<p>**.dll **</p>
<p>项目的类库集</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="两种数据类型"><a href="#两种数据类型" class="headerlink" title="两种数据类型"></a>两种数据类型</h3><ul>
<li>基本数据类型(值类型数据):<ul>
<li>int uint float double char long byte bool Datetime</li>
</ul>
</li>
<li>引用数据类型<ul>
<li>class null</li>
<li>:string是一种特殊引用、类、接口、集合、泛数据类型型等</li>
</ul>
</li>
</ul>
<h3 id="常用的基本数据类型"><a href="#常用的基本数据类型" class="headerlink" title="常用的基本数据类型"></a>常用的基本数据类型</h3><table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
<th>范围</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>bool</td>
<td>布尔值</td>
<td>True 或 False</td>
<td>False</td>
</tr>
<tr>
<td>byte</td>
<td>8 位无符号整数</td>
<td>0 到 255</td>
<td>0</td>
</tr>
<tr>
<td>char</td>
<td>16 位 Unicode 字符</td>
<td>U+0000 到 U+ffff</td>
<td>‘\0’</td>
</tr>
<tr>
<td>decimal</td>
<td>128 位精确的十进制值，28-29 有效位数</td>
<td>(-7.9 x 10<sup>28</sup> 到 7.9 x 10<sup>28</sup>) &#x2F; 10<sup>0 到 28</sup></td>
<td>0.0M</td>
</tr>
<tr>
<td>double</td>
<td>64 位双精度浮点型</td>
<td>(+&#x2F;-)5.0 x 10<sup>-324</sup> 到 (+&#x2F;-)1.7 x 10<sup>308</sup></td>
<td>0.0D</td>
</tr>
<tr>
<td>float</td>
<td>32 位单精度浮点型</td>
<td>-3.4 x 10<sup>38</sup> 到 + 3.4 x 10<sup>38</sup></td>
<td>0.0F</td>
</tr>
<tr>
<td>int</td>
<td>32 位有符号整数类型</td>
<td>-2,147,483,648 到 2,147,483,647</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>64 位有符号整数类型</td>
<td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td>
<td>0L</td>
</tr>
<tr>
<td>sbyte</td>
<td>8 位有符号整数类型</td>
<td>-128 到 127</td>
<td>0</td>
</tr>
<tr>
<td>short</td>
<td>16 位有符号整数类型</td>
<td>-32,768 到 32,767</td>
<td>0</td>
</tr>
<tr>
<td>uint</td>
<td>32 位无符号整数类型</td>
<td>0 到 4,294,967,295</td>
<td>0</td>
</tr>
<tr>
<td>ulong</td>
<td>64 位无符号整数类型</td>
<td>0 到 18,446,744,073,709,551,615</td>
<td>0</td>
</tr>
<tr>
<td>ushort</td>
<td>16 位无符号整数类型</td>
<td>0 到 65,535</td>
<td>0</td>
</tr>
</tbody></table>
<h3 id="Datetime"><a href="#Datetime" class="headerlink" title="Datetime"></a>Datetime</h3><p><code>DateTime</code> 是 C# 中表示日期和时间的数据类型之一。它是一个结构体（struct），位于 <code>System</code> 命名空间中。<code>DateTime</code> 结构体用于表示从公元 1 年 1 月 1 日到 9999 年 12 月 31 日之间的日期和时间。</p>
<p>特点：</p>
<ul>
<li><strong>不可变性</strong>：<code>DateTime</code> 结构体是不可变的，一旦创建了一个 <code>DateTime</code> 对象，就不能修改它的值。</li>
<li><strong>精度</strong>：<code>DateTime</code> 提供了秒的精度，可以表示从 0:00:00 到 23:59:59 之间的时间。</li>
<li><strong>范围</strong>：<code>DateTime</code> 可以表示的日期范围是从公元 1 年 1 月 1 日到 9999 年 12 月 31 日。</li>
<li><strong>时区</strong>：<code>DateTime</code> 本身不包含时区信息，但可以通过 <code>DateTimeKind</code> 枚举来指定日期时间是本地时间、协调世界时 (UTC) 还是未指定的本地时间。</li>
</ul>
<p>常用属性和方法：</p>
<ul>
<li><strong>Now</strong>: 获取当前的日期和时间。</li>
<li><strong>Today</strong>: 获取当前日期的日期部分，时间部分为 00:00:00。</li>
<li><strong>UtcNow</strong>: 获取当前的 UTC 时间。</li>
<li><strong>Parse(string s)</strong>: 将表示日期和时间的字符串转换为 <code>DateTime</code> 对象。</li>
<li><strong>ToString()</strong>: 将 <code>DateTime</code> 对象转换为字符串表示形式。</li>
<li><strong>AddXXX()</strong>: 添加一段时间间隔，例如 <code>AddDays()</code>、<code>AddHours()</code>、<code>AddMinutes()</code> 等。</li>
<li><strong>Subtract(DateTime value)</strong>: 计算两个日期时间之间的时间间隔。</li>
</ul>
<p>示例</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        DateTime now = DateTime.Now;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Current date and time: &quot;</span> + now);</span><br><span class="line"></span><br><span class="line">        DateTime tomorrow = now.AddDays(<span class="number">1</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Tomorrow: &quot;</span> + tomorrow);</span><br><span class="line"></span><br><span class="line">        DateTime birthday = <span class="keyword">new</span> DateTime(<span class="number">1990</span>, <span class="number">5</span>, <span class="number">20</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Birthday: &quot;</span> + birthday);</span><br><span class="line"></span><br><span class="line">        TimeSpan age = now - birthday;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Age: &quot;</span> + age.Days / <span class="number">365</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，我们演示了如何创建 <code>DateTime</code> 对象、获取当前日期和时间、进行日期时间的计算等操作。<code>DateTime</code> 类型在 C# 中是非常常用的，用于处理各种与日期时间相关的任务。</p>
<h3 id="隐式类型转换-自动类型转换"><a href="#隐式类型转换-自动类型转换" class="headerlink" title="隐式类型转换&#x2F;自动类型转换"></a>隐式类型转换&#x2F;自动类型转换</h3><p>定义</p>
<p>同一类型的数据(是指都为数值类型),将小范围数据赋值给大范围的目标类型时，将发生自动类型转换</p>
<p>主要应用于数值类型的数据之间的转换，从低精度自动转换到高精度<br>小范围到大范围:低精度到高精度</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">byte</span>--<span class="built_in">short</span>--<span class="built_in">int</span>--<span class="built_in">long</span>--<span class="built_in">float</span>--<span class="built_in">double</span></span><br></pre></td></tr></table></figure>

<p>特点</p>
<ul>
<li><p>bool类型不能转换成其他的数值类型，数值类型也不能转换为bool类型</p>
</li>
<li><p>byte short char int 四种类型存储的实际上都是整数，int类型的数据可以赋值给byte、short，但是不能超过其数据类型的范围<br>int类型 short byte可以赋给char类型的</p>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">char</span> c1=(<span class="built_in">char</span>)<span class="number">100</span>; <span class="comment">//强制类型转换</span></span><br></pre></td></tr></table></figure>

<ul>
<li>byte short int char之间存在如下隐式转换关系</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">byte</span>--<span class="built_in">short</span></span><br><span class="line"><span class="built_in">byte</span>--<span class="built_in">int</span></span><br><span class="line"><span class="built_in">short</span>--<span class="built_in">int</span></span><br><span class="line"><span class="built_in">char</span>--<span class="built_in">int</span></span><br></pre></td></tr></table></figure>

<ul>
<li>byte short char三种类型的数据参与运算时，先一律转换为int类型再进行运算的</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">short</span> s1=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">short</span> s2=<span class="number">20</span>;</span><br><span class="line"><span class="built_in">short</span> s3=s1+s2;<span class="comment">//报错</span></span><br><span class="line">s4 = s3 + <span class="string">&#x27;A&#x27;</span>;<span class="comment">//正确，把A转换为ASCII码，再参与运算</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多种基本数据参与的表达式运算中，运算结果会自动的向较大的类型进行转换，个别时候会有精度的丢失,但不影响运算</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> n1 = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">float</span> f1 = <span class="number">200.5f</span>;</span><br><span class="line"><span class="built_in">short</span> sss = <span class="number">25</span>;</span><br><span class="line"><span class="built_in">float</span> ddd = n1 + f1 + sss;</span><br></pre></td></tr></table></figure>

<h3 id="显式类型转换-强制类型转换"><a href="#显式类型转换-强制类型转换" class="headerlink" title="显式类型转换&#x2F;强制类型转换"></a>显式类型转换&#x2F;强制类型转换</h3><p>定义</p>
<p>主要应用于数值类型的数据之间的转换，从高精度自动转换到低精度</p>
<blockquote>
<p>double–&gt;float–&gt;long–&gt;int–&gt;short–&gt;byte</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">double d=10.5;</span><br><span class="line">int num=dd;//报错</span><br><span class="line">int num=(int)dd;//强制，精度丢失</span><br></pre></td></tr></table></figure>

<h3 id="值类型和引用类型的转换"><a href="#值类型和引用类型的转换" class="headerlink" title="值类型和引用类型的转换"></a>值类型和引用类型的转换</h3><p>值类型转换为引用类型</p>
<ul>
<li>ToString()</li>
</ul>
<p>引用类型转换值类型</p>
<ul>
<li>引用类型转换值类型:XXX.Parse()方法</li>
<li>引用类型转换值类型:Convert.ToXXX()</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Convert.ToInt16() <span class="comment">//short类型</span></span><br><span class="line">Convert.ToInt32()<span class="comment">//int类型</span></span><br><span class="line">Convert.ToInt64() <span class="comment">//long类型</span></span><br><span class="line">Convert.ToSingle() <span class="comment">//float类型</span></span><br><span class="line">Convert.ToDouble() <span class="comment">//double类型</span></span><br><span class="line">Convert.ToChar() <span class="comment">//char类型</span></span><br><span class="line">Convert.ToByte() <span class="comment">//byte类型</span></span><br></pre></td></tr></table></figure>

<h3 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h3><p>值类型和引用类型之间的转换</p>
<ul>
<li><p>装箱 将值类型转换为引用类型的过程</p>
</li>
<li><p>拆箱 将引用类型转换为值类型的过程</p>
</li>
</ul>
<blockquote>
<p>object类是C#中所有类的根类或基类或父类</p>
</blockquote>
<p>作用</p>
<p>装箱和拆箱的功能，可通过值类型的任何值与object类型的值相互转换，将值类型与引用和类型衔接起来</p>
<p>注意事项</p>
<blockquote>
<p>因为装箱时是什么样的数据类型，拆箱时就必须拆成什么样的类型</p>
</blockquote>
<h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>变量就是内存中一块存储区域的名称，叫变量</p>
<h3 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h3><p>建议使用<strong>驼峰命名法</strong>，第一个单词首字母小写，其余单词首字母大写</p>
<ul>
<li><p>在C#中，定义变量要见名知意，不要随意使用a b c d 例num&#x3D;100</p>
</li>
<li><p>变量名一般不建议使用中文命名</p>
</li>
<li><p>不能使用一些关键字来作为变量名<br>关键字:在C#中赋予特定含义的单词</p>
</li>
<li><p>特点：全部为小写的，常用的代码编译器，关键字都有特殊颜色标记，非常直观的，不需要记忆</p>
<ul>
<li>变量名不能以数字开头，但是可以用下划线开头</li>
<li>变量名中不能包含一些特殊字符，比如制表符\t  换行符\n  空格 、 * &amp; ？等</li>
<li>在C#中大小写敏感的，区分大小写的</li>
</ul>
</li>
<li><p>注意点:</p>
<ul>
<li><p>同一变量不允许重复定义(同一个作用域{}),一对{}代表一个作用域</p>
</li>
<li><p>变量的定义，先定义后赋值再使用</p>
</li>
</ul>
</li>
</ul>
<h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>先声明后赋值</p>
<p>数据类型  变量名;    &#x2F;&#x2F;变量的声明<br>变量名&#x3D;值;   &#x2F;&#x2F;变量的初始化，给变量赋值，从右向左赋值</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> num;  <span class="comment">//声明变量</span></span><br><span class="line">num =<span class="number">100</span>;  <span class="comment">//把100赋给num</span></span><br></pre></td></tr></table></figure>

<p>在声明的同时直接赋值</p>
<p>数据类型  变量名&#x3D;值;</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> num=<span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<h3 id="定义变量的注意事项"><a href="#定义变量的注意事项" class="headerlink" title="定义变量的注意事项"></a>定义变量的注意事项</h3><ul>
<li><p>未经声明的变量不能使用，否则会报错</p>
</li>
<li><p>一条语句可以同时声明多个变量，但是必须是同一个类型的变量</p>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>;<span class="comment">//正确</span></span><br><span class="line"><span class="built_in">int</span> b=<span class="number">2</span>,c=<span class="number">3.2f</span>;<span class="comment">//错误的</span></span><br></pre></td></tr></table></figure>

<ul>
<li>未经初始化的变量不能使用</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a;</span><br><span class="line">cw(a); <span class="comment">//报错</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以对变量的值进行存取操作，但是其结果必须与原类型相匹配</li>
<li>在同一个作用域(一对花括号就是一个作用域)，变量的名称是不可以重复的</li>
<li>如何从键盘接收数据以及进行数据类型的转换:</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine（“请输入一个数:”）；</span><br><span class="line"><span class="built_in">string</span> num=Console.ReadLine();<span class="comment">//接收一行</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>如何转换为数值类型:</p>
<ul>
<li>int类型:int.Parse();</li>
<li>float类型:float.Parse();</li>
<li>double类型:double.Parse();short.Parse(); long.Parse();  decimal.Parse();char.Parse():注意输入的字符串必须是单个的字符，否则报错</li>
</ul>
</li>
<li><p>char类型:char其实是一个16位无符号的整数，这个值对应字符的编码，.net中采用的国际统一的标准的unicode双字节编码格式,char型可以存储数字、英文、中文字符</p>
<ul>
<li>字符可以采用单个中文的形式<br>char c&#x3D;’中’</li>
<li>也可以是16进制的表示形式<br>char c&#x3D;’\u4e2d’;</li>
<li>可以直接字符对应的ASCII码赋给char型的变量,char类型的数据可以int类型之间进行相互转换  (int)a    (char)100<br>ASCII码:美国标准信息交换码</li>
<li>char型 可以参与运算，此时会将字符转换ASCII码再去运算</li>
</ul>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">char</span> c=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">cw(c+<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>其他的数据类型<ul>
<li>sbyte:范围-128–+127之间</li>
<li>byte:范围0–255之间</li>
<li>uint ushort ulong:无符号整型  正数</li>
</ul>
</li>
</ul>
<blockquote>
<p>数据类型后面加？，变量可以为空</p>
</blockquote>
<h3 id="var关键字"><a href="#var关键字" class="headerlink" title="var关键字"></a>var关键字</h3><p>在 C# 中，<code>var</code> 关键字用于声明隐式类型变量，即编译器根据初始化语句的类型自动推断变量的类型。使用 <code>var</code> 关键字可以简化代码，减少重复，并提高代码的可读性。</p>
<p>用法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> variableName = <span class="keyword">value</span>;</span><br></pre></td></tr></table></figure>

<p>其中，<code>variableName</code> 是变量名，<code>value</code> 是变量的初始化值。编译器会根据 <code>value</code> 的类型推断出 <code>variableName</code> 的类型。</p>
<p>示例</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;Hello, world!&quot;</span>; <span class="comment">// 推断为 string 类型</span></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">10</span>; <span class="comment">// 推断为 int 类型</span></span><br><span class="line"><span class="keyword">var</span> pi = <span class="number">3.14</span>; <span class="comment">// 推断为 double 类型</span></span><br><span class="line"><span class="keyword">var</span> numbers = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;; <span class="comment">// 推断为 int[] 类型</span></span><br></pre></td></tr></table></figure>

<p>在上面的示例中，编译器会根据初始化语句的类型自动推断变量的类型，并将其替换为对应的类型。使用 <code>var</code> 关键字时，变量的类型必须在初始化时被确定，因此无法使用 <code>var</code> 声明未初始化的变量。</p>
<p>需要注意的是，<code>var</code> 关键字声明的变量是静态类型，即一旦推断出变量的类型，它就不能更改。因此，<code>var</code> 关键字不能用于声明匿名类型（anonymous types）的变量，因为匿名类型的类型在编译时无法确定。</p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>在程序运行过程中，其值一直保持不变，可以定义成常量</p>
<p>示例</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> 数据类型  <span class="comment">//常量名=常量值;</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> PI=<span class="number">3.14</span>;  <span class="comment">//常量的定义的初始化</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p> 一般情况下，常量名建议使用纯大写的</p>
</blockquote>
<blockquote>
<p>在程序运行中，不可以修改常量值</p>
</blockquote>
<h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><h3 id="连接符"><a href="#连接符" class="headerlink" title="连接符"></a>连接符</h3><p><strong>加号运算符（+）</strong>：加号运算符是最常见的连接字符串的方式。它可以将两个字符串连接起来，并返回一个新的字符串。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> str2 = <span class="string">&quot;World&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> result = str1 + <span class="string">&quot; &quot;</span> + str2; <span class="comment">// 连接两个字符串并赋值给result变量</span></span><br></pre></td></tr></table></figure>

<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>转义字符是在字符串中使用的特殊字符序列，用于表示一些特殊的字符或控制字符。在C#中，常见的转义字符包括：</p>
<ol>
<li><strong>\n</strong>：换行符，表示在字符串中换行。</li>
<li><strong>\r</strong>：回车符，表示将光标移到当前行的开头。</li>
<li><strong>\t</strong>：制表符，表示在字符串中插入一个制表符。</li>
<li><strong>\</strong>：反斜杠，表示在字符串中插入一个反斜杠。</li>
<li><strong>&#39;</strong>：单引号，表示在字符串中插入一个单引号。</li>
<li><strong>&quot;</strong>：双引号，表示在字符串中插入一个双引号。</li>
</ol>
<p>下面是一些示例</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str1 = <span class="string">&quot;Hello\nWorld&quot;</span>; <span class="comment">// 换行</span></span><br><span class="line"><span class="built_in">string</span> str2 = <span class="string">&quot;C:\\Users\\&quot;</span>; <span class="comment">// 插入反斜杠</span></span><br><span class="line"><span class="built_in">string</span> str3 = <span class="string">&quot;She said: \&quot;Hello!\&quot;&quot;</span>; <span class="comment">// 插入双引号</span></span><br><span class="line"><span class="built_in">string</span> str4 = <span class="string">&quot;It\&#x27;s raining&quot;</span>; <span class="comment">// 插入单引号</span></span><br></pre></td></tr></table></figure>

<p>在字符串中，如果想要表示这些特殊字符，就需要使用转义字符。通过转义字符，可以使字符串中包含一些无法直接输入的字符，从而实现更灵活的字符串处理。</p>
<h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&#123;2&#125;,name,id,sex&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;name&#125;</span><span class="subst">&#123;id&#125;</span><span class="subst">&#123;sex&#125;</span>);</span></span><br></pre></td></tr></table></figure>

<h3 id="Console类"><a href="#Console类" class="headerlink" title="Console类"></a>Console类</h3><p><strong>Console.ReadKey();</strong></p>
<p>是一个 C# 中的方法，它用于从控制台读取用户输入的单个字符，并返回表示该字符的 ConsoleKeyInfo 对象。Console.ReadKey() 方法通常用于等待用户按下一个键，然后继续执行程序的后续逻辑。<br>该方法在程序执行时会阻塞（即暂停执行），直到用户按下一个键为止。一旦用户按下了一个键，程序将会继续执行。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure>

<p>Console.Clear();</p>
<p>当用户按下任意键后，调用 <code>Console.Clear()</code> 方法将清空控制台窗口上的所有文本内容，然后输出两行新的文本。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.Clear(); <span class="comment">// 清屏</span></span><br></pre></td></tr></table></figure>

<p>Console.WriteLine();</p>
<p> C# 中用于在控制台窗口中输出文本的方法。它接受一个字符串作为参数，并在控制台中显示该字符串，然后自动换行。如果不传递任何参数，它将只输出一个空行。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine();</span><br></pre></td></tr></table></figure>

<p>Console.ReadLine();</p>
<p>C# 中用于从控制台读取用户输入的方法。它会在程序执行时暂停，并等待用户在控制台中输入文本，直到用户按下回车键为止。然后，该方法将返回用户输入的文本作为一个字符串。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.ReadLine() </span><br></pre></td></tr></table></figure>

<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>优先级：小括号&gt;一元运算符&gt;二元元算符</p>
<h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">++ <span class="comment">//自身加一</span></span><br><span class="line">-- <span class="comment">//自身减一</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果++–作为一条单独的语句，不管++–在前在后，都是表示自身加一或自身减一</li>
<li>如果++–参与操作时（输出，赋值，运算）的时候，如果++–在前时，表示先自身加一或减一，再参与操作</li>
<li>如果++–参与操作时（输出，赋值，运算）的时候，如果++–在后时，表示先参与操作，再自身加一或减一</li>
</ul>
<h3 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">+ <span class="comment">//加</span></span><br><span class="line">- <span class="comment">//减</span></span><br><span class="line">* <span class="comment">//乘</span></span><br><span class="line">/ <span class="comment">//除</span></span><br><span class="line">% <span class="comment">//取余</span></span><br></pre></td></tr></table></figure>

<p>二元运算符的应用</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> num1 = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">int</span> num2 = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">double</span> num3 = <span class="number">3.0</span>;</span><br><span class="line">Console.WriteLine(num1 + num2);</span><br></pre></td></tr></table></figure>

<p>保留两位小数输出</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WiteLine(<span class="string">&quot;&#123;0:f2&#125;&quot;</span>,num1/num2)</span><br><span class="line">Console.WiteLine(<span class="string">&quot;&#123;0:0.00&#125;&quot;</span>,num1/num2)</span><br></pre></td></tr></table></figure>

<p>使用命令行参数为main方法传递值：调试&gt;项目属性&gt;</p>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">== 等于</span><br><span class="line">=！ 不等于</span><br><span class="line">&gt; 大于</span><br><span class="line">&lt; 小于</span><br><span class="line">&gt;= 大于等于</span><br><span class="line">&lt;= 小于等于</span><br></pre></td></tr></table></figure>

<p>运算结果都为bool型，结果为true或者false。</p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>一般情况下，用来连接bool类型的表达式或值</p>
<p>表达式：就是把运算符把常量或变量连接起来的式子</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">&amp; 逻辑与 <span class="comment">//并且的关系 有false结果为false</span></span><br><span class="line">| 逻辑或 <span class="comment">//或者的关系 有true结果为true</span></span><br><span class="line">! 逻辑非 <span class="comment">//取反的操作 </span></span><br><span class="line">^ 逻辑异或 <span class="comment">//相同为false 不同为true 按位异或</span></span><br><span class="line"><span class="comment">/*0代表false 1代表true*/</span></span><br></pre></td></tr></table></figure>

<h3 id="短路操作"><a href="#短路操作" class="headerlink" title="短路操作"></a>短路操作</h3><p>&amp;&amp;:短路与 </p>
<p>||:短路或</p>
<ul>
<li><p>&amp;&amp;与&amp;的区别</p>
<ul>
<li>最终结果一样</li>
<li>.&amp;&amp;具有短路效果，如果左边表达式是false,则右边不执行<br>&amp;无论左边是false还是true,右边表达式都会执行</li>
</ul>
</li>
<li><p>||和|的区别:</p>
<ul>
<li>最终结果一样</li>
<li>||具有短路效果，如果左边表达式是true时，右边不执行<br>|无论左边是true或false，右边都会执行</li>
</ul>
</li>
</ul>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>复合赋值运算符:扩展运算符</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">+=   -+   /=   *=   %=</span><br><span class="line">num=<span class="number">5</span>;</span><br><span class="line">num+=<span class="number">10</span>;等价于num=num+<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>三目运算符(条件运算符)<br>示例</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">(关系表达式)?表达式<span class="number">1</span>:表达式<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>执行原理:</p>
<ul>
<li>如果关系表达式的值true时，运算后的结果就是表达式1；</li>
<li>如果关系表达式的值为false时，运算后的结果就是表达式2;</li>
</ul>
<p>例如:求两个数的较大数</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> x=<span class="number">3</span>,y=<span class="number">4</span>;</span><br><span class="line"><span class="built_in">int</span> z=(x&gt;y)?x:y;</span><br></pre></td></tr></table></figure>

<h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><p>一元运算符&gt;二元运算符&gt;关系运算符&gt;逻辑运算符&gt;赋值运算符</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">()</span><br><span class="line">++ -- !</span><br><span class="line">* / %</span><br><span class="line">+ -</span><br><span class="line">&gt;= &lt;= &gt; &lt;</span><br><span class="line">== !=</span><br><span class="line">| ||</span><br><span class="line">= += -= *= /= %=</span><br></pre></td></tr></table></figure>

<h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>程序中最简单的最基本的流程控制，没有特定的语法结构，按照代码的先后顺序依次执行，程序中的大多数的代码都是这样执行的。</p>
<h3 id="判断结构"><a href="#判断结构" class="headerlink" title="判断结构"></a>判断结构</h3><p>根据不同的条件执行不同的语句</p>
<p>If单分支结构</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  语句体</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果true，就执行语句体</span></span><br><span class="line"><span class="comment">//如果false，就不执行语句体</span></span><br></pre></td></tr></table></figure>

<p>判断成绩是否合格</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> score</span><br><span class="line">Console.WirteLine(<span class="string">&quot;请输入一个成绩：（0-100）&quot;</span>);</span><br><span class="line">score = convert.Toint32(Console.ReadLine());</span><br><span class="line"><span class="comment">//进行条件判断</span></span><br><span class="line"><span class="keyword">if</span>(score &gt;=<span class="number">60</span>)&#123;</span><br><span class="line">  Console.WiteLine(<span class="string">&quot;恭喜成绩合格&quot;</span>)；</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;抱歉成绩不合格&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>if…else双分支结构</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  语句体<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  语句体<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">执行流程:</span><br><span class="line">首先判断条件表达式看其结果是<span class="literal">true</span>还是<span class="literal">false</span></span><br><span class="line">如果是<span class="literal">true</span>就执行语句体<span class="number">1</span></span><br><span class="line">如果是<span class="literal">false</span>就执行语句体<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><strong>If..else if..else多分支结构</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  语句<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  语句<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  语句<span class="number">3</span>&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">执行流程:</span><br><span class="line">首先判断条件表达式<span class="number">1</span>,看其结果是<span class="literal">true</span>还是<span class="literal">false</span></span><br><span class="line">如果是<span class="literal">true</span>,就执行语句体<span class="number">1</span></span><br><span class="line">如果是<span class="literal">false</span>，就继续判断条件表达式<span class="number">2</span>,看其结果是<span class="literal">true</span>还是<span class="literal">false</span></span><br><span class="line">如果是<span class="literal">true</span>,就执行语句体<span class="number">2</span></span><br><span class="line">如果是如果是<span class="literal">false</span>，就继续判断条件表达式<span class="number">3</span>,看其结果是<span class="literal">true</span>还是<span class="literal">false</span></span><br><span class="line">......</span><br><span class="line">如果以上所有条件表达式均不成立时，就执行<span class="keyword">else</span>后的语句体n</span><br><span class="line"></span><br><span class="line">注意:在众多分支中，只执行一个分支</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>if多分支总结</p>
<ul>
<li>else分支可有可无，不满足条件时的情况处理</li>
<li>if后面可以有多个else-if，但是不能单独出现和if一起使用</li>
<li>每个分支都可做条件判断，最终有且只能执行一个分支</li>
<li>多分支结构适合判断某个范围时或精确的判断也可以使用</li>
</ul>
<p><strong>switch-case</strong></p>
<p>多重条件</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(条件变量)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">        语句体<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">        语句体<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      ......</span><br><span class="line">     <span class="literal">default</span>:</span><br><span class="line">        语句n;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程:</p>
<ul>
<li>当条件变量和常量1匹配时，就执行语句体1,然后break退出条件匹配</li>
<li>当条件变量和常量1不匹配时，继续和常量2相匹配，如果匹配则执行语句体2,break退出</li>
<li>当条件变量和常量2不匹配时，继续和常量3相匹配,…..</li>
<li>如果条件变量和case后面每个条件都不匹配，则执行default语句</li>
</ul>
<blockquote>
<p>注意：case后面的常量类型只能是byte或short或int或char或enum或String类型</p>
</blockquote>
<p>区分两个多重条件匹配:</p>
<ul>
<li>如果精确的匹配时，量不多时，二者均可使用</li>
<li>如果要判断某个范围时，那要用if-else if</li>
</ul>
<h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>循环定义:循环重复地做某件事情，在某个时刻满足某个条件时，就退出循环</p>
<p>while循环、do-while循环、for循环、foreach</p>
<p>循环的三要素:</p>
<ul>
<li>循环变量初始化</li>
<li>循环条件表达式</li>
<li>循环的更新：改变循环变量的值</li>
</ul>
<p><strong>while</strong></p>
<p>也叫前置循环或当型循环</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)</span><br><span class="line">&#123;</span><br><span class="line"> 循环操作的内容;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当满足某一个条件时才去执行循环操作的内容，其中循环条件是一个布尔类型的值(true&#x2F;false)</p>
<p>执行流程:</p>
<ul>
<li><p>计算条件表达式的值</p>
</li>
<li><p>如果值为true时，就执行循环体语句，语句块执行完成后，再次判断条件表达式的值，如果为true,就继续执行循环体语句，如此往复循环，直到某一个时刻，条件表达式的值为false时，退出while循环</p>
</li>
</ul>
<p><strong>do-while</strong></p>
<p>后置循环也叫直到型循环</p>
<p>无论是否满足循环的条件，都会至少执行一次循环体的内容。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure>

<p>执行流程:</p>
<ul>
<li>先执行循环体语句一次</li>
<li>再计算条件表达式的值，如果true，再次执行循环体语句，如此往复循环，直到某个时刻条件表达式的值为false时退出循环</li>
</ul>
<blockquote>
<p>注意：无论条件表达式的式值为真为假，循环体语句至少执行一次</p>
</blockquote>
<p><strong>for</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span>;表达式<span class="number">2</span>;表达式<span class="number">3</span>)&#123;</span><br><span class="line">  (语句四)循环体语句;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表达式1:用来初始化循环变量 int i=1；</span></span><br><span class="line"><span class="comment">//表达式2:用来进行条件判断的，他是条件表达式</span></span><br><span class="line"><span class="comment">//表达式3:循环变量的更新，改变循环量大值</span></span><br></pre></td></tr></table></figure>

<p>执行流程</p>
<ul>
<li>计算表达式1的值</li>
<li>计算表达式2的值，如果是true，执行循环体语句，否则推出</li>
<li>执行循环体语句</li>
<li>执行表达式3改变循环变量的值</li>
<li>计算表达式2（条件表达式）如果为true，执行循环语句，如果假则推出</li>
</ul>
<p>如此往复</p>
<p>执行过程1&gt;2&gt;4&gt;3&gt;2&gt;4&gt;3&gt;2&gt;4</p>
<blockquote>
<p> 用的几率最高，表达式写在一起不容易遗忘</p>
</blockquote>
<p>注意事项：for循环的特殊用法</p>
<ul>
<li>循环变量初始化的位置可以为空。</li>
<li>表达式3的位置可以为空，可以写在循环体内</li>
<li>表达式123均为空（死循环）</li>
<li>表达式1，3内容多样化：1，3可以使用逗号表达式，隔开多个表达式，从左向右计算</li>
</ul>
<p>#for循环和while的区别</p>
<p>for循环做定值循环时比较方便</p>
<ul>
<li>不用定定义多个变量，一个变量可以多次引用</li>
</ul>
<p>#循环的嵌套</p>
<p>外层循环打印行数，内层循环负责每行打印的具体内容</p>
<p>#打印99乘法表</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		Console.Write(<span class="string">&quot;&#123;0&#125;*&#123;1&#125;=&#123;2&#125;\t&quot;</span>, i, j, i * j);</span><br><span class="line">	&#125;</span><br><span class="line">Console.WriteLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>foreach</strong></p>
<p><code>foreach</code> 循环是 C# 中一种用于遍历集合类型（如数组、列表、集合等）的简便方式。它提供了一种更简洁、更直观的方式来遍历集合中的元素，而无需使用索引或迭代器。</p>
<p>其基本语法如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> collection)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 循环体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>**<code>var item</code>**：定义一个临时变量 <code>item</code>，用于存储集合中的每个元素。</li>
<li>**<code>collection</code>**：要遍历的集合，可以是数组、列表、集合等实现了 <code>IEnumerable</code> 或 <code>IEnumerable&lt;T&gt;</code> 接口的类型。</li>
</ul>
<p>下面是一个简单的示例，演示了如何使用 <code>foreach</code> 循环遍历数组并计算数组元素的总和：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] numbers = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> number <span class="keyword">in</span> numbers)</span><br><span class="line">&#123;</span><br><span class="line">    sum += number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Sum of numbers: &quot;</span> + sum);</span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>foreach</code> 循环会自动迭代数组 <code>numbers</code> 中的每个元素，并将当前元素赋值给变量 <code>number</code>，然后执行循环体中的代码。这种方式简化了遍历数组的过程，让代码更加简洁和易读</p>
<p><strong>break</strong></p>
<p>用在switch-case语句中，表示中止或中断条件匹配（推出条件匹配），如果用在循环里面，跳出当前所在的循环，常常与条件语句一起来使用。</p>
<p><strong>continue</strong></p>
<p>与break不同，不能用于在循环中，其作用是跳过本次循环，尝试进入下一次循环。</p>
<p><strong>goto</strong></p>
<p>跳出两层循环，但是不推荐使用</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> playAgain = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">int</span> num1;</span><br><span class="line"><span class="built_in">int</span> num2; </span><br><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line">num2 = r.Next(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>次机会&quot;</span>);</span><br><span class="line">        num1 = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">        <span class="keyword">if</span> (num1 == num2)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;恭喜你猜中了&quot;</span>);</span><br><span class="line">            <span class="keyword">goto</span> playagain;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;正确答案是<span class="subst">&#123;num2&#125;</span>&quot;</span>);</span><br><span class="line">    playagain:</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;是否再来一局,输入y/Y,其他键退出&quot;</span>);</span><br><span class="line">    playAgain = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (playAgain == <span class="string">&quot;y&quot;</span> | playAgain == <span class="string">&quot;Y&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>c#中的一种数据类型，是引用数据类型</p>
<p>是用来保存一组数据类型相同的值称为数组</p>
<p>数组是种引用的数据类型</p>
<p>值类型的数据在内存中：存储在栈中的</p>
<p>引用类型的数据在内存中：存储在堆（堆栈中）</p>
<h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><ul>
<li><p>表示一组值的时候，可以使用数组（可以是学过的任意的类型，但是同一个数组中的数据类型必须是相同的）</p>
</li>
<li><p>一组数据的遍历（for或foreach）</p>
</li>
<li><p>组操作&gt;赋值&gt;取值&gt;最大值&gt;最小值&gt;排序&gt;平均值等</p>
</li>
</ul>
<h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>)数据类型[] 数组名=&#123;值<span class="number">1</span>，值<span class="number">2</span>,值<span class="number">3.</span>.....&#125;;<span class="comment">//声明数组的同时直接初始化</span></span><br><span class="line">这是简化版本:</span><br><span class="line">例如:</span><br><span class="line"><span class="built_in">int</span>[]  arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//在数组存储了5个int类型的数据</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>)数据类型[] 数组名=<span class="keyword">new</span> 数据类型[数组的长度]&#123;值<span class="number">1</span>,值<span class="number">2</span>,.....&#125;;</span><br><span class="line">例如:</span><br><span class="line"><span class="built_in">int</span>[] arr=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>)数据类型[] 数组名=<span class="keyword">new</span> 数据类型[N];<span class="comment">//定义一个数组</span></span><br><span class="line">例如:</span><br><span class="line"><span class="built_in">int</span>[] arr=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>)数据类型[]  数组名;<span class="comment">//数组的声明</span></span><br><span class="line">数组名=<span class="keyword">new</span> 数据类型[N];</span><br><span class="line">例如:</span><br><span class="line"><span class="built_in">double</span>[] arr;</span><br><span class="line">arr=<span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<h3 id="如何访问数组"><a href="#如何访问数组" class="headerlink" title="如何访问数组"></a>如何访问数组</h3><p>通过下标&#x2F;索引来访问数组中的元素</p>
<p>数组名[索引下标] ;</p>
<p>注意:数组中的第一个元素索引下标为0</p>
<p>第二元素索引下标为1……….</p>
<p>数组的长度:数组名.Length;&#x2F;&#x2F;获得数组的长度</p>
<p>通过索引下标访问数组元素</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">console.WriyeLine(arr1[<span class="number">0</span>]); <span class="comment">//第一个元素</span></span><br><span class="line">...</span><br><span class="line">console.WriyeLine(arr1[<span class="number">6</span>]); <span class="comment">//第六个元素</span></span><br><span class="line"><span class="comment">//不存在，会有一个错误（异常）索引超出数组界限</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用循环来输出数组中的元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> =<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">  Console.WriteLine(arr1[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用foreach</span></span><br></pre></td></tr></table></figure>

<h3 id="数组的典型应用"><a href="#数组的典型应用" class="headerlink" title="数组的典型应用"></a>数组的典型应用</h3><p><strong>最大值、最小值的求法:</strong></p>
<p>算法:一般情况下，是把数组中的第一个元素默认为最大值或最小值，然后拿着这个默认的值，去和数组中的每一个元素相比较，如果大的就赋给最大值，如果小的就赋给最小值</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最大值</span></span><br><span class="line"><span class="built_in">int</span> [] num=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">int</span> max=num[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(max&lt;num[i])&#123;</span><br><span class="line">    max = num[i]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最小值</span></span><br><span class="line"><span class="built_in">int</span> [] num=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">int</span> min=num[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(min&lt;num[i])&#123;</span><br><span class="line">    min = num[i]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>线性查找:顺序查找</strong></p>
<p>从头找到尾，找到了，给出在第几个位置，如果找不到要给出相应的提示</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;nums.Length;i++) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//将数组中的元素一个一个与被查找的数相比较</span></span><br><span class="line">  <span class="keyword">if</span> (searchNum == nums[i])</span><br><span class="line">  &#123;</span><br><span class="line">    isExist= <span class="literal">true</span>;<span class="comment">//找到了</span></span><br><span class="line">    index = i;<span class="comment">//记录找到的数的索引下标</span></span><br><span class="line">    <span class="keyword">break</span>;<span class="comment">//找到了退出循环，不再继续找了</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>排序:对数组中的元素进行升序或降排序</strong></p>
<ul>
<li>冒泡排序:相邻的两个数之间进行相比较，如果是升序，那么就把较小的交接到前面的位置</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//外循环：负责一共进行几轮比较的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;score.Length<span class="number">-1</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//内循环：相邻的两个数之间进行相比较</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; score.Length<span class="number">-1</span>-i; j++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//进行比较：&gt;升序，小的往前交换  &lt;降序</span></span><br><span class="line">      <span class="keyword">if</span> (score[j] &lt; score[j+<span class="number">1</span>])</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">//完成两个数的交换</span></span><br><span class="line">        <span class="built_in">int</span> temp = score[j];</span><br><span class="line">        score[j] = score[j + <span class="number">1</span>];</span><br><span class="line">        score[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>选择排序:(升序)</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;score.Length<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//内循环:负责第N个位置的数去和后面的每一个相比较：j的初值是可变的</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">int</span> j=i+<span class="number">1</span>;j&lt;score.Length;j++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//比较的是i和j的值</span></span><br><span class="line">    <span class="keyword">if</span> (score[i] &gt; score[j])</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">int</span> temp = score[i];</span><br><span class="line">        score[i] = score[j];</span><br><span class="line">        score[j] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>反序输出:倒数输出</strong></p>
<p>原理 :第一个位置和最后一个位置交换,第二个位置和倒数第二个位置交换,一直交换到中间位置结束</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>,j=score.Length<span class="number">-1</span>;i&lt;j;i++,j--) </span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//完成i和j的交换</span></span><br><span class="line">	<span class="built_in">int</span> temp = score[i];</span><br><span class="line">	score[i] = score[j];</span><br><span class="line">	score[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; score.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">	Console.Write(score[i] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">定义<span class="number">1</span>:定义一个五行五列的数组:二维数组</span><br><span class="line"><span class="built_in">int</span>[,] arr=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>,<span class="number">5</span>];<span class="comment">//五行，五列  默认初始化0</span></span><br><span class="line">在定义的同时直接初始化</span><br><span class="line">例如:</span><br><span class="line"><span class="built_in">int</span>[,] num=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;<span class="comment">//两行三列的数组</span></span><br><span class="line">取值、赋值:</span><br><span class="line">num[<span class="number">0</span>,<span class="number">0</span>]:第一行第一列的值</span><br><span class="line">num[<span class="number">1</span>,<span class="number">0</span>]:第二行第一列的值</span><br><span class="line">num[<span class="number">1</span>,<span class="number">2</span>]:第二行第三列的值</span><br><span class="line">......</span><br><span class="line"><span class="comment">//GetLength(0):获得二组数组中的第一个维数（行数）</span></span><br><span class="line"><span class="comment">//GetLength(1):获得二组数组中的第二个维数（列数）</span></span><br><span class="line"> Console.WriteLine(arr.Rank);<span class="comment">//1表示一维数组，2表二维数组</span></span><br></pre></td></tr></table></figure>

<p><strong>应用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//二维数组的赋值</span><br><span class="line">arr[1, 2] = 1000;</span><br><span class="line">arr.SetValue(2000, 2, 1);//2000表示赋值的值，2第三行 1第二列</span><br><span class="line"></span><br><span class="line">//获得二维数组的值</span><br><span class="line">Console.WriteLine(&quot;第二行第三列的值:&quot; + arr[1,2]);</span><br><span class="line">Console.WriteLine(&quot;第三行第二列的值:&quot;+arr.GetValue(2,1));</span><br></pre></td></tr></table></figure>

<h3 id="交错数组"><a href="#交错数组" class="headerlink" title="交错数组"></a>交错数组</h3><p>称为锯齿数组，数组的元素可以是另一个数组</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明:</span></span><br><span class="line"><span class="built_in">int</span>[][] arr=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>][];<span class="comment">//只行指定行数，列数待定</span></span><br><span class="line">arr[<span class="number">0</span>]=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">4</span>]; <span class="comment">//第一行</span></span><br><span class="line">arr[<span class="number">1</span>]=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];<span class="comment">//第二行</span></span><br><span class="line">arr[<span class="number">2</span>]=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">6</span>]&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>&#125;;<span class="comment">//直接初始化，第三行</span></span><br></pre></td></tr></table></figure>

<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举（Enumeration）是一种用户定义的数据类型，用于表示一组命名的常数值。在 C# 中，枚举类型允许您定义一个命名的整数常量集合，这些常量称为枚举成员。枚举成员的值可以是整数、浮点数或字符类型。</p>
<h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ol>
<li><strong>简化代码：</strong> 枚举使代码更易于理解和维护，因为它提供了有意义的命名，而不是硬编码的数字或字符串。</li>
<li><strong>类型安全：</strong> 枚举提供了类型安全，因为它只允许使用在枚举中定义的成员。</li>
<li><strong>可读性：</strong> 使用枚举可以提高代码的可读性，因为它使得代码更易于理解。</li>
</ol>
<h3 id="定义枚举"><a href="#定义枚举" class="headerlink" title="定义枚举"></a>定义枚举</h3><p>在 C# 中，枚举通过 <code>enum</code> 关键字定义。以下是一个示例</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> DayOfWeek</span><br><span class="line">&#123;</span><br><span class="line">    Sunday,</span><br><span class="line">    Monday,</span><br><span class="line">    Tuesday,</span><br><span class="line">    Wednesday,</span><br><span class="line">    Thursday,</span><br><span class="line">    Friday,</span><br><span class="line">    Saturday</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，我们定义了一个名为 <code>DayOfWeek</code> 的枚举，它包含了一周中的每一天。默认情况下，枚举成员的值从 0 开始，依次递增。在这个例子中，<code>Sunday</code> 的值为 0，<code>Monday</code> 的值为 1，依此类推。</p>
<h3 id="使用枚举"><a href="#使用枚举" class="headerlink" title="使用枚举"></a>使用枚举</h3><p>使用枚举时，您可以直接通过枚举的名称来访问其成员。例如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">DayOfWeek today = DayOfWeek.Friday;</span><br><span class="line">Console.WriteLine(today); <span class="comment">// 输出: Friday</span></span><br></pre></td></tr></table></figure>

<p>您还可以将枚举成员的值转换为整数，并将整数值转换为枚举成员：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> dayValue = (<span class="built_in">int</span>)DayOfWeek.Wednesday;</span><br><span class="line">Console.WriteLine(dayValue); <span class="comment">// 输出: 3</span></span><br><span class="line"></span><br><span class="line">DayOfWeek nextDay = (DayOfWeek)(dayValue + <span class="number">1</span>);</span><br><span class="line">Console.WriteLine(nextDay); <span class="comment">// 输出: Thursday</span></span><br></pre></td></tr></table></figure>

<h3 id="枚举的底层实现"><a href="#枚举的底层实现" class="headerlink" title="枚举的底层实现"></a>枚举的底层实现</h3><p>在底层，枚举成员的值实际上是整数常量。默认情况下，第一个成员的值为 0，并依次递增。您可以显式地指定枚举成员的值：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Status</span><br><span class="line">&#123;</span><br><span class="line">    Inactive = <span class="number">0</span>,</span><br><span class="line">    Active = <span class="number">1</span>,</span><br><span class="line">    Pending = <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>Inactive</code> 的值为 0，<code>Active</code> 的值为 1，<code>Pending</code> 的值为 2。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>枚举是一种强大的工具，用于定义一组命名的常量值。它使得代码更易于理解和维护，提高了代码的可读性和可维护性。枚举还提供了类型安全和更清晰的语义，使得程序员能够更轻松地操作常量值。</p>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>在 C# 中，结构体（Struct）是一种用户自定义的值类型。与类（Class）不同，结构体是一种轻量级的数据结构，通常用于表示具有少量数据成员的简单对象。结构体在内存中的存储方式和类有所不同，它们通常被分配在栈上，而不是堆上，这使得它们在内存管理方面更加高效。</p>
<h3 id="特点和用法"><a href="#特点和用法" class="headerlink" title="特点和用法"></a>特点和用法</h3><ul>
<li>值类型</li>
</ul>
<p>结构体是值类型，因此它们的实例在传递给方法时是按值传递的，而不是按引用传递。这意味着当传递结构体实例时，将会复制整个结构体的内容。</p>
<ul>
<li>轻量级</li>
</ul>
<p>结构体通常用于表示简单的数据结构，比如坐标、颜色、矩形等。由于它们比类更轻量级，所以在某些情况下更适合用于存储小型数据。</p>
<ul>
<li>不支持继承</li>
</ul>
<p>结构体不支持继承，即不能派生出其他结构体或类。它们是最基本的自定义类型。</p>
<ul>
<li>默认构造函数</li>
</ul>
<p>结构体会自动创建一个默认的无参数构造函数，该构造函数会将所有成员变量初始化为其默认值。但也可以手动定义构造函数。</p>
<ul>
<li>可包含字段、属性、方法等</li>
</ul>
<p> 结构体可以包含字段、属性、方法等成员，可以定义其行为和状态。</p>
<ul>
<li>性能优化</li>
</ul>
<p>结构体通常比类更高效，因为它们在栈上分配内存，而不需要额外的垃圾回收操作。</p>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>在 C# 中，类（Class）是一种用户自定义的数据类型，用于表示一组具有相似特征和行为的对象。类是面向对象编程的基本构建块，它可以包含字段、方法、属性、构造函数、事件等成员，以及内部类、枚举等其他类型。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p><strong>封装性</strong>：类封装了数据（字段）和行为（方法），对外部隐藏了内部实现细节，只暴露公共的接口。</p>
<p><strong>继承性</strong>：类可以通过继承机制派生出子类，子类可以继承父类的成员并扩展或修改其行为。</p>
<p><strong>多态性</strong>：通过虚方法和抽象类等特性，实现了多态性，使得不同的对象可以以相同的方式被操作。</p>
<h3 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h3><p>实例化对象:根据student类型创建了一个stu1变量，他进行了赋值，指向了一个Student类型的对象。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Student stu1=<span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure>

<h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p>变量名访问成员变量</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">对象名.成员   </span><br><span class="line">stu1.name</span><br></pre></td></tr></table></figure>

<h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><ul>
<li>pravate 私有的</li>
<li>protected 被保护的</li>
<li>internal （类默认）可以在同一个程序集里被访问</li>
<li>public 公开的（权限最大）</li>
</ul>
<blockquote>
<p>成员变量前面省略修饰符默认为pravate</p>
<p>类前面省略修饰符默认为internal</p>
</blockquote>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>在实例化对象时自动调用的方法</p>
<p>定义：成员变量做初始化</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Cellphone（）&#123;</span><br><span class="line">  Console.WriteLine(<span class="string">&quot;调用了构造方法&quot;</span>)</span><br><span class="line">  band = <span class="string">&quot;iphone&quot;</span>;</span><br><span class="line">  color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//带参数的构造方法，用来给成员变量做初始化</span></span><br><span class="line"><span class="keyword">public</span> Phone（<span class="built_in">string</span> b）</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>this代表一个对象，在构造方法中，他代表的是正在示例化的这个对象</p>
<p>**构造方法的重载 **</p>
<p>可以是有多个构造方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Card</span> ()</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Card</span> (<span class="params"><span class="built_in">long</span> id,<span class="built_in">string</span> name</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Card</span> (<span class="params"><span class="built_in">long</span> id,<span class="built_in">string</span> name,<span class="built_in">bool</span> sex</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项</strong></p>
<ul>
<li>构造方法的名称必须和类相同</li>
<li>在示例化对象时自动调用的方法</li>
<li>构造方法用于对成员变量进行初始化，不做其他业务处理</li>
<li>构造方法中的this代表一个对象，在构造方法中，他代表的是正在示例化的这个对象。</li>
<li>类中默认会提供一个无参对构造方法，如果自定义了构造方法，则类中不会知道生成无参构造</li>
<li>构造方法的参数可以是变量</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>方法在类中代表一种行为能力，代表对象应该具有的功能，实现代码的复用</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[访问修饰符]返回类型 方法名([参数列表])</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//方法的主体语法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">method</span> (<span class="params"><span class="built_in">int</span> r</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">double</span> area;</span><br><span class="line">  arra=<span class="number">3.14</span>*r*r;</span><br><span class="line">  <span class="keyword">return</span> area;  <span class="comment">// 获取圆的面积，返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意</p>
<ul>
<li>方法名采用Pascal命名法，要体现方法的作用，一般是动词或动词加名词的形式。</li>
<li>方法的参数可以为空，也可以又一个或多个参数，多个参数之间用逗号取分割</li>
<li>如果方法没有返回值，返回类型声明为viod，如果有返回值，返回类型必须和返回值的类型匹配</li>
<li>访问修饰符省略时，默认为pravate</li>
</ul>
<h3 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h3><p>实例方法要通过对象调用</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">对象名.方法名(参数)</span><br></pre></td></tr></table></figure>

<p>this代表正在调用这个方法的对象</p>
<h3 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h3><p>在 C# 中，递归调用是指一个方法在执行过程中调用了自身。递归通常用于解决可以被拆解为相同问题的子问题的情况，例如树遍历、阶乘计算、斐波那契数列等。在使用递归时，需要确保在适当的条件下结束递归，以避免无限循环。</p>
<p>下面是一个计算阶乘的递归函数的示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> n = <span class="number">5</span>;</span><br><span class="line">        <span class="built_in">int</span> factorial = Factorial(n);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Factorial of &#123;0&#125; is &#123;1&#125;&quot;</span>, n, factorial);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Factorial</span>(<span class="params"><span class="built_in">int</span> n</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="comment">// 递归结束条件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> n * Factorial(n - <span class="number">1</span>); <span class="comment">// 递归调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>Factorial()</code> 方法在递归调用中调用了自身。当 <code>n</code> 等于 0 时，递归结束，返回 1，否则返回 <code>n</code> 乘以 <code>Factorial(n - 1)</code>。</p>
<p>递归调用需要小心处理，因为如果没有正确的结束条件，会导致无限递归，消耗大量的内存和 CPU 资源，最终导致程序崩溃。因此，在编写递归函数时，确保定义了正确的递归终止条件是非常重要的。</p>
<h3 id="OOP思想"><a href="#OOP思想" class="headerlink" title="OOP思想"></a>OOP思想</h3><ul>
<li>分析业务逻辑，找到核心对象，并且找出对象的特征和行为</li>
<li>根据分析的情况，定义相关的类，并将特征封装成成员变量</li>
</ul>
<h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><ul>
<li><p>return是方法的出口语句；</p>
</li>
<li><p>返回值的类型必须与return 之后的变量值的类型相同</p>
</li>
</ul>
<h3 id="方法的参数"><a href="#方法的参数" class="headerlink" title="方法的参数"></a>方法的参数</h3><p>作用：接收外部提供的数据，如果方法有参数的，则调用方法时，必须提供和参数个数和类型都匹配的实参，实参传递给形参</p>
<h3 id="关于方法参数的类型"><a href="#关于方法参数的类型" class="headerlink" title="关于方法参数的类型"></a>关于方法参数的类型</h3><p>值类型和引用类型都可以作为方法的参数。</p>
<p>值类型：将实参的值拷贝给形参，在方法内部对行参进行修改，不会影响实参。</p>
<p>引用类型参数：将实际参数的值拷贝给形参，此时实参和形参的值相同，所指向的堆内存是同一块区域，所以在方法内部修改形参的值，影响要实参。</p>
<h3 id="参数的修饰符"><a href="#参数的修饰符" class="headerlink" title="参数的修饰符"></a>参数的修饰符</h3><ul>
<li><p>ref     reference 引用，地址。用在值类型参数前，表示传递的是实参的地址给行参，而不是做值的拷贝，行参进行修改，会影响实参。递的是参数的地址。</p>
</li>
<li><p>out  输出参数，传递out类型的参数可以不进行初始化，在方法内部必须对out类型的参数改变值，调用完毕，通过实参接收输出参数的值。</p>
</li>
<li><p>params 修饰数组类型的参数，且放在方法的最后一个参数的位置，此时调用方法时可以传递数组对象，或者传递数组元素</p>
</li>
</ul>
<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>静态的成员都是属于类的成员，和对象没关系，通过类名。成员名访问（统一个类中，）</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> j; <span class="comment">//静态变量</span></span><br><span class="line">类名.j.  <span class="comment">//调用</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>静态成员不能用对象名调用，不能使用this</p>
<p>静态方法中要访问非静态成员一定要使用对象去访问（可以是传递进来的参数，也可是示例化的对象）</p>
<p>如果类是静态的，下面所有的变量都要是静态的，否则会报错</p>
</blockquote>
<h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><p>方法的重载（Method Overloading）是指在同一个类中可以定义多个具有相同名称但参数列表不同的方法。通过方法重载，可以让同一个方法名称在不同的上下文中具有不同的行为，从而提高了代码的灵活性和可读性。</p>
<h3 id="空引用异常"><a href="#空引用异常" class="headerlink" title="空引用异常"></a>空引用异常</h3><p>C# 中的空引用异常（Null Reference Exception）是一种常见的运行时异常，通常在试图访问空对象或未初始化的引用时抛出。当您尝试对一个空引用（即值为 null 的引用）调用方法、访问属性或访问字段时，就会触发空引用异常。</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><p><strong>属性的定义</strong>：是一种封装思想，用来对封装类中的私有字段进行读和写。属于一种操作成员。</p>
<p><strong>属性的分类</strong></p>
<ul>
<li><strong>只读属性</strong>：只能读取到字段的值，不能给字段赋值，只有get访问器</li>
<li><strong>只写属性</strong>：只能对字段赋值，不能对字段读区，只有set访问器</li>
<li><strong>读写属性</strong>：可以对字段进行读写，有get，set两种访问器。</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;	</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Age 属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">value</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">value</span> &lt;= <span class="number">150</span>) <span class="comment">// 简单的年龄验证</span></span><br><span class="line">            &#123;</span><br><span class="line">                age = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;Age must be between 0 and 150.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：</p>
<ul>
<li><p>访问的修饰符大多数是public</p>
</li>
<li><p>属性的类型和封装的字段类型一致</p>
</li>
<li><p>属性名和字段名相同，但是采用帕斯卡命名法，即单词的每个字首字母大写</p>
</li>
</ul>
<p><strong>lambda 表达式添加属性</strong></p>
<p>在成员变量上点灯泡，封装字段并使用属性</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">double</span> Price &#123; <span class="keyword">get</span> =&gt; price; <span class="keyword">set</span> =&gt; price = <span class="keyword">value</span>; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a>索引器</h2><h3 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h3><p>索引器也是一种封装思想，主要是用来封装对于类中数组元素的操作。</p>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span>[] data = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>]; <span class="comment">// 假设这是我们要管理的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 索引器的声明与属性类似，但使用 this 关键字指定索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> data[index]; <span class="comment">// 索引器的 get 访问器用于获取特定索引处的数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            data[index] = <span class="keyword">value</span>; <span class="comment">// 索引器的 set 访问器用于设置特定索引处的数据</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyClass myObject = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用索引器设置和获取数据</span></span><br><span class="line">        myObject[<span class="number">0</span>] = <span class="number">10</span>; <span class="comment">// 设置索引为0处的值为10</span></span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">value</span> = myObject[<span class="number">0</span>]; <span class="comment">// 获取索引为0处的值</span></span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="keyword">value</span>); <span class="comment">// 输出10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h3><p>为了减少重复的代码，我们使用继承。</p>
<p>继承的特点</p>
<ul>
<li><p>继承的传递性：可以从任意的父类访问成员</p>
</li>
<li><p>继承的单根性：只能有一个父类，不能有多个父类</p>
</li>
</ul>
<p>继承的优点</p>
<ul>
<li>模拟了现实世界的关系</li>
<li>实现代码的复用</li>
<li>结构关系更清晰</li>
</ul>
<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//定义一个父类</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Student</span>:<span class="title">Person</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 注意：实例化子类对象时，在调用子类的构造方法之前，默认先调用父类的无参构造方法</p>
</blockquote>
<h3 id="base关键字"><a href="#base关键字" class="headerlink" title="base关键字"></a>base关键字</h3><p>使用base关键字，强制调用父类中制定的构造方法</p>
<blockquote>
<p> protected 修饰符：父类中的成员在子类中只能通过子类对象访问，无法通过父类对象访问</p>
</blockquote>
<p>示例</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">HRSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Employee</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//声明变量</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> education;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//带name，qulification的构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Employee</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">string</span> education</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.education = education;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个显示信息的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowMsg</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;姓名：<span class="subst">&#123;name&#125;</span>\t学历：<span class="subst">&#123;education&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Programmer</span>:<span class="title">Employee</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> languages;</span><br><span class="line">        <span class="built_in">string</span> os;</span><br><span class="line">        <span class="built_in">string</span> database;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义构造函数</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="title">Programmer</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">string</span> education,<span class="built_in">string</span> languages,<span class="built_in">string</span> os,<span class="built_in">string</span> database</span>)</span></span><br><span class="line"><span class="function">            :<span class="title">base</span>(<span class="params">name,education</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">this</span>.languages = languages;</span><br><span class="line">            <span class="keyword">this</span>.os = os;</span><br><span class="line">            <span class="keyword">this</span>.database = database;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//显示程序员信息</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowMSG</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;姓名：<span class="subst">&#123;name&#125;</span>学历：<span class="subst">&#123;education&#125;</span>语言：<span class="subst">&#123;languages&#125;</span>操作系统<span class="subst">&#123;os&#125;</span>数据库：<span class="subst">&#123;database&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="定义-8"><a href="#定义-8" class="headerlink" title="定义"></a>定义</h3><p>不同的的子类对象在运行时调用不同子类中的同名方法</p>
<p><strong>实现多态的方法</strong></p>
<ul>
<li>抽象方法</li>
<li>虚方法</li>
<li>接口</li>
</ul>
<p><strong>seale关键字</strong></p>
<p>密封类不允许被继承</p>
<p>static 静态方法不能被重写的</p>
<h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p>根据里氏替换原则，可以创建一个父类的数组，保存子类对象到数组中</p>
<p>强制转换，如果转换失败，会抛出一个异常。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个矩形类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Rectangle</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> Width &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Area</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Width * Height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个正方形类，继承自矩形类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Square</span> : <span class="title">Rectangle</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _side;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正方形的边长</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Side</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _side; &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            _side = <span class="keyword">value</span>;</span><br><span class="line">            Width = Height = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Rectangle rectangle = <span class="keyword">new</span> Square();</span><br><span class="line">        rectangle.Width = <span class="number">5</span>;</span><br><span class="line">        rectangle.Height = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果使用了里氏替换原则，下面的输出结果应该是20</span></span><br><span class="line">        <span class="comment">// 因为正方形是矩形的子类型，所以可以用正方形替换矩形</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;矩形的面积：&quot;</span> + rectangle.Area());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="构造方法的多态性"><a href="#构造方法的多态性" class="headerlink" title="构造方法的多态性"></a>构造方法的多态性</h3><p>在 C# 中，当你写下 <code>Class1 obj = new Class2();</code> 这样的语句时，你实际上是在创建一个名为 <code>obj</code> 的对象，其类型是 <code>Class1</code>，但是你使用的是 <code>Class2</code> 类的构造函数来初始化这个对象。</p>
<p>这种行为在面向对象编程中称为多态性（Polymorphism）。它是面向对象编程中的一个重要定义，允许你使用基类的引用来引用子类的对象，从而实现了代码的灵活性和可扩展性。</p>
<p>具体来说，假设 <code>Class2</code> 是 <code>Class1</code> 的子类，那么你可以将 <code>Class2</code> 的对象赋值给 <code>Class1</code> 类型的变量，因为 <code>Class2</code> 是 <code>Class1</code> 的一个特例。这样的赋值是允许的，因为 <code>Class2</code> 继承了 <code>Class1</code> 的所有成员，所以它具有与 <code>Class1</code> 相同的行为和属性，但可能会添加一些额外的功能或重写一些方法。</p>
<h3 id="抽象方法-abstract"><a href="#抽象方法-abstract" class="headerlink" title="抽象方法 abstract"></a>抽象方法 abstract</h3><ul>
<li>在父类定义的一个没有实现的方法</li>
<li>抽象方法一定要定义在抽象类中</li>
<li>子类继承自一个抽象父类，这一定要重写父类中的抽象方法，使用override显示重写</li>
<li>抽象类本身不能实例化</li>
</ul>
<blockquote>
<p>小结：使用抽象方法的好处是约束子类的行为，在不同子类中有</p>
</blockquote>
<p>示例</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个抽象动物类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 声明一个抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">MakeSound</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个狗类，继承自动物类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 实现抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MakeSound</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;狗发出汪汪的声音&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个猫类，也继承自动物类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 实现抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MakeSound</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;猫发出喵喵的声音&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Animal animal1 = <span class="keyword">new</span> Dog();</span><br><span class="line">        Animal animal2 = <span class="keyword">new</span> Cat();</span><br><span class="line">        animal1.MakeSound(); <span class="comment">// 输出：狗发出汪汪的声音</span></span><br><span class="line">        animal2.MakeSound(); <span class="comment">// 输出：猫发出喵喵的声音</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="virtual虚方法"><a href="#virtual虚方法" class="headerlink" title="virtual虚方法"></a>virtual虚方法</h3><p>在父类中定义一个有实现的方法，他可以在子类中被重写，也可以不被重写</p>
<p>抽象方法和虚方法的区别 </p>
<ul>
<li>抽象方法没有方法体，虚方法有方法体</li>
<li>抽象方法一定要重写，虚方法可以重写也可以不重写</li>
<li>抽象方法必须定义在抽象类中，虚方法可以定义在抽象类或普通类中</li>
</ul>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="定义-9"><a href="#定义-9" class="headerlink" title="定义"></a>定义</h3><p>接口是一组规范和标准。在接口中定义一组规范和标准，是没有具体实现的，由类进行实现，从而约束类的行为</p>
<h3 id="接口的特点"><a href="#接口的特点" class="headerlink" title="接口的特点"></a>接口的特点</h3><ul>
<li><p>接口的成员一般没有访问修饰符，是公开的</p>
</li>
<li><p>接口无法实例化，但是我们可以创建接口类型的变量去指向实现接口的对象</p>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Itest test = <span class="keyword">new</span> Test();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>接口的成员只能是属性，索引器，方法，在新的.net版本方法可以用括号</p>
</li>
<li><p>一个类可以实现多个接口</p>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Test</span>:<span class="title">ITest1</span>,<span class="title">ITest2</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口的应用场景"><a href="#接口的应用场景" class="headerlink" title="接口的应用场景"></a>接口的应用场景</h3><p>接口作为方法的参数去使用，可以传递任意一个实现了接口的对象</p>
<p>接口作为方法的返回值使用，可以返回的是任意实现接口的对象</p>
<h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><p>接口名称的命名规则：一般以I打头，后面的单词用帕斯卡命名法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">ITest</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口使用，定义一个类去实现接口</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Test</span>:<span class="title">ITest</span> <span class="comment">//接口和类是实现的关系</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意事项</p>
<ul>
<li>如果一个类去实现接口，则必须对接口中的所有未实现的成员进行实现</li>
<li>接口无法实例化</li>
<li>一个类可以实现多个接口，多个接口之间用逗号分隔</li>
<li>一个类继承基类，又实现接口时，接口必须放在最前面</li>
<li>一个类实现接口时，如果接口有其他同名的成员，可以使用显式实现接口，此时需要通过接口类型去调用方法，不能使用实现类对象去调用。</li>
<li>接口之间可以多继承，一个接口可以继承多个接口。</li>
</ul>
<h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><h3 id="定义-10"><a href="#定义-10" class="headerlink" title="定义"></a>定义</h3><p>字符串构造原理</p>
<p>string是c#语言定义字符串的关键字</p>
<p>String是.NET中的字符串的类型定义字符串的方式</p>
<p>字符串的暂存池（常量池）</p>
<p>通过声明式定义的字符串会保存在CLR的暂存池中，在程序运行中，声明的字符串会先在暂存池中检查，看是否有需要的字符串，如果有的话，直接获得暂存池中字符串的地址，不会分配新的内存空间。</p>
<p>string具有不可变的特点</p>
<p>如果对string类型的字符串进行任何的操作，导致字符串的值发生改变的，不会在原来的内存空间中修改字符串的值，而是会重新开辟新的内存空间</p>
<p>string.Empty与””,null的区别</p>
<p>string.Empty与”” :分配了内存地址，只是内存中没有任何字符<br>null:空引用，没有分配内存地址</p>
<h3 id="创建字符串的方式"><a href="#创建字符串的方式" class="headerlink" title="创建字符串的方式"></a>创建字符串的方式</h3><p>声明式，放在常量池</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str1=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">String str1=<span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>构造式，使用new，会重新分配存储空间</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">String str3 = <span class="keyword">new</span> String(<span class="keyword">new</span> <span class="built_in">char</span>[]&#123;<span class="string">&quot;h&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;o&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="String的常用方法"><a href="#String的常用方法" class="headerlink" title="String的常用方法"></a>String的常用方法</h3><p>静态方法</p>
<p>**Compare()**用于比较两个字符串的方法，它返回一个整数，表示两个字符串的相对顺序。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(String.Compare(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;A&quot;</span>)); <span class="comment">//0123456789aAbB....</span></span><br></pre></td></tr></table></figure>

<p>**Concat()**拼接字符串</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(String.Concat(s1,s2));</span><br></pre></td></tr></table></figure>

<p>**Equals()**比较字符串的值是否相等</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(String.Equals(s1,s2));</span><br></pre></td></tr></table></figure>

<p>**Format()**格式化字符串</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(String.Format(<span class="string">&quot;s1的值是&#123;0&#125;,s2的值是&#123;1&#125;&quot;</span>, s1,s2));</span><br><span class="line">Console.WriteLine(String.Format(<span class="string">&quot;&#123;0:P&#125;&quot;</span>,<span class="number">123.005</span>));</span><br><span class="line">Console.WriteLine(String.Format(<span class="string">&quot;&#123;0:C&#125;&quot;</span>, <span class="number">123.005</span>));</span><br><span class="line">Console.WriteLine(String.Format(<span class="string">&quot;&#123;0:F2&#125;&quot;</span>, <span class="number">123.508</span>));</span><br><span class="line">Console.WriteLine(String.Format(<span class="string">&quot;&#123;0:yyyy-MM-dd&#125;&quot;</span>, DateTime.Now));</span><br><span class="line">Console.WriteLine(String.Format(<span class="string">&quot;&#123;0:yyyy年MM月dd&#125;&quot;</span>, DateTime.Now));</span><br></pre></td></tr></table></figure>

<p>**IsNullOrEmpty()**检查一个字符串是否为 null 或者为空字符串。如果字符串为 null 或者空字符串（长度为 0），则返回 true，否则返回 false。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s3 =<span class="string">&quot;    &quot;</span>;</span><br><span class="line">Console.WriteLine(<span class="built_in">string</span>.IsNullOrEmpty(s3)); <span class="comment">//&quot;&quot;, string.Empty, null</span></span><br></pre></td></tr></table></figure>

<p>**IsNullOrWhiteSpace()**方法在检查字符串是否为 null 或者为空字符串的基础上，还会额外检查字符串是否只包含空白字符（如空格、制表符、换行符等）</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="built_in">string</span>.IsNullOrWhiteSpace(s3)); <span class="comment">//&quot;&quot;, string.Empty, null, 空白字符</span></span><br></pre></td></tr></table></figure>

<p>**Join()**按照指定的分隔符串联字符串</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(String.Join(<span class="string">&#x27; &#x27;</span>,s1,s2));</span><br></pre></td></tr></table></figure>

<p>实例方法</p>
<p>**Contains()**测试字符串是否包含指定的字符或字符串，返回布尔值</p>
<p>**StartsWith()**测试是否以指定的字符串开头，返回布尔值</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>**EndsWith()**测试是否以指定的字符串结尾</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>[] names = &#123; <span class="string">&quot;jack&quot;</span>, <span class="string">&quot;TOM&quot;</span>, <span class="string">&quot;lucy&quot;</span>, <span class="string">&quot;ROSe&quot;</span>, <span class="string">&quot;tonny&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> item <span class="keyword">in</span> names)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span>[] names = &#123; <span class="string">&quot;jack&quot;</span>, <span class="string">&quot;TOM&quot;</span>, <span class="string">&quot;lucy&quot;</span>, <span class="string">&quot;ROSe&quot;</span>, <span class="string">&quot;tonny&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> item <span class="keyword">in</span> names)</span><br><span class="line">	&#123;</span><br><span class="line">		Console.WriteLine(<span class="string">&quot;包含o的姓名：&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (item.ToLower().Contains(<span class="string">&quot;o&quot;</span>))</span><br><span class="line">		Console.WriteLine(item);</span><br><span class="line"></span><br><span class="line">		Console.WriteLine(<span class="string">&quot;以t打头的姓名：&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (item.StartsWith(<span class="string">&quot;t&quot;</span>))</span><br><span class="line">		Console.WriteLine(item);</span><br><span class="line"></span><br><span class="line">		Console.WriteLine(<span class="string">&quot;以y结尾的姓名：&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (item.EndsWith(<span class="string">&quot;y&quot;</span>))</span><br><span class="line">		Console.WriteLine(item);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (item.IndexOf(<span class="string">&quot;o&quot;</span>) != <span class="number">-1</span>)</span><br><span class="line">		Console.WriteLine(item);</span><br><span class="line">		Console.<span class="function">Wr	<span class="title">iteLine</span>(<span class="params"><span class="string">&quot;----------------------------&quot;</span></span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**IndexOf()**测试字符串在指定字符串是第一次匹配成功时的位置 ，从0开始,没有查找到，则返回-1</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(s1.IndexOf(<span class="string">&quot;l&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>**LastIndexOf()**测试字符串在指定字符串是最后一次匹配成功时的位置</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(s1.LastIndexOf(<span class="string">&quot;l&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>**PadLeft()**用于在字符串的左侧填充指定字符，以使字符串达到指定的长度的方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> paddedStr2 = str.PadLeft(<span class="number">5</span>, <span class="string">&#x27;0&#x27;</span>); <span class="comment">// 使用 &#x27;0&#x27; 填充</span></span><br></pre></td></tr></table></figure>

<p>**PadRight()**用于在字符串的右侧填充指定字符，以使字符串达到指定的长度的方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(s1.PadLeft(<span class="number">20</span>,<span class="string">&#x27;*&#x27;</span>));<span class="comment">//右对齐，在左边填充</span></span><br><span class="line">Console.WriteLine(s1.PadRight(<span class="number">20</span>,<span class="string">&#x27;*&#x27;</span>));<span class="comment">//左对齐</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;1500&quot;</span>);</span><br><span class="line">Console.Write(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">Console.Write(<span class="string">&quot;5&quot;</span>.PadLeft(<span class="number">3</span>));</span><br><span class="line">Console.WriteLine(<span class="string">&quot;\n-----------------&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>**Split()**按指定的分隔符对字符串进行拆分，返回的拆分以后的数组</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> email = <span class="string">&quot;jacky@163.com&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(email.Contains(<span class="string">&#x27;@&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span>[] array = email.Split(<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">	Console.WriteLine(array[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(email.Substring(<span class="number">0</span>, email.IndexOf(<span class="string">&quot;@&quot;</span>)));</span><br></pre></td></tr></table></figure>

<p>**Substring()**从指定的下标位置处取子字符串，省略长度，一直取到最后</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(s1.Substring(<span class="number">1</span>));</span><br><span class="line">Console.WriteLine(s1.Substring(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">ToLower()</span><br></pre></td></tr></table></figure>

<p>**ToCharArray()**把字符串转换为字符数组</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">char</span>[] chars=s1.ToCharArray();</span><br><span class="line">把字符数组转换为字符串</span><br><span class="line"><span class="built_in">string</span> s3 = <span class="keyword">new</span> <span class="built_in">string</span>(chars);</span><br><span class="line">Console.WriteLine(s3);</span><br></pre></td></tr></table></figure>

<p>**ToLower()**转换为小写</p>
<p>**ToUpper()**转换为大写</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;names.Length;i++)</span><br><span class="line">&#123;</span><br><span class="line">	Console.WriteLine(names[i].Substring(<span class="number">0</span>,<span class="number">1</span>).ToUpper() + names[i].Substring(<span class="number">1</span>).ToLower());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**Trim()**去除字符串的前后空白字符</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(String.Concat(s1.Trim(), s2));</span><br><span class="line">\t \n</span><br><span class="line"><span class="built_in">string</span> path = <span class="string">@&quot;G:\20240325班级\1 - C#\DAY09-4.15\01-代码\MySolution0415\Demo002\bin\Debug\net6.0\Demo003.exe&quot;</span>;</span><br><span class="line"><span class="built_in">int</span> i = path.LastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>;</span><br><span class="line">Console.WriteLine(path.Substring(i));</span><br></pre></td></tr></table></figure>

<p>**Remove()**删除</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Remove()</span></span><br><span class="line"><span class="built_in">string</span> newStr =s1.Remove(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">Console.WriteLine(s1);</span><br><span class="line">Console.WriteLine(newStr);</span><br></pre></td></tr></table></figure>

<h3 id="StringBuilder可变字符串"><a href="#StringBuilder可变字符串" class="headerlink" title="StringBuilder可变字符串"></a>StringBuilder可变字符串</h3><p><code>StringBuilder</code> 是 .NET 中用于处理可变字符串的类，它位于 <code>System.Text</code> 命名空间中。与 <code>string</code> 类型不同，<code>StringBuilder</code> 允许你对字符串进行动态修改而不需要创建新的字符串对象，这在处理大量字符串拼接或者频繁修改字符串时能够提升性能。</p>
<p>主要特点</p>
<ol>
<li><p><strong>可变性</strong>：<code>StringBuilder</code> 允许在字符串中插入、追加、删除和替换字符，而不会创建新的字符串实例。</p>
</li>
<li><p><strong>性能</strong>：由于 <code>StringBuilder</code> 是可变的，所以在对字符串进行频繁操作时，避免了创建大量的临时字符串对象，从而提高了性能。</p>
</li>
</ol>
<p>常用方法</p>
<p><strong>Append</strong>: 将指定内容追加到字符串的末尾。</p>
<p><strong>nsert</strong>: 在指定位置插入指定内容。</p>
<p><strong>Remove</strong>: 从指定位置开始删除指定数量的字符。</p>
<p><strong>Replace</strong>: 替换字符串中的指定内容。</p>
<p><strong>Clear</strong>: 清空字符串内容。</p>
<p><strong>ToString</strong>: 将 <code>StringBuilder</code> 对象转换为 <code>string</code> 类型。</p>
<p><strong>Capacity</strong>: 获取或设置 <code>StringBuilder</code> 对象的容量。</p>
<p>#示例</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 追加字符串</span></span><br><span class="line">sb.Append(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入字符串</span></span><br><span class="line">sb.Insert(<span class="number">5</span>, <span class="string">&quot; World&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换字符串</span></span><br><span class="line">sb.Replace(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Hi&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除字符</span></span><br><span class="line">sb.Remove(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取最终字符串</span></span><br><span class="line"><span class="built_in">string</span> result = sb.ToString(); <span class="comment">// 输出为 &quot;Hi World&quot;</span></span><br></pre></td></tr></table></figure>

<p>在上面的示例中，我们创建了一个 <code>StringBuilder</code> 对象 <code>sb</code>，然后通过 <code>Append</code>、<code>Insert</code>、<code>Replace</code> 和 <code>Remove</code> 方法对字符串进行了修改，最后通过 <code>ToString</code> 方法将 <code>StringBuilder</code> 对象转换为 <code>string</code> 类型的结果。这个例子展示了 <code>StringBuilder</code> 的基本用法，它可以动态地构建和修改字符串而不会产生大量的临时字符串对象。</p>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="定义-11"><a href="#定义-11" class="headerlink" title="定义"></a>定义</h3><p>在 C# 中，正则表达式（Regular Expression，简称 Regex）是一个强大的工具，用于处理字符串的匹配、搜索和替换。C# 中的正则表达式由 <code>System.Text.RegularExpressions</code> 命名空间提供支持，其中包含了 <code>Regex</code> 类，用于处理正则表达式。</p>
<p>以下是一些在 C# 中使用正则表达式的常见操作：</p>
<h3 id="创建正则表达式对象"><a href="#创建正则表达式对象" class="headerlink" title="创建正则表达式对象"></a>创建正则表达式对象</h3><p>要使用正则表达式，首先需要创建一个 <code>Regex</code> 对象，可以使用 <code>Regex</code> 类的静态方法 <code>Regex.Compile</code> 或者 <code>Regex</code> 构造函数来创建。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Regex regex = <span class="keyword">new</span> Regex(<span class="string">@&quot;\d+&quot;</span>); <span class="comment">// 匹配一个或多个数字</span></span><br></pre></td></tr></table></figure>

<h3 id="匹配字符串"><a href="#匹配字符串" class="headerlink" title="匹配字符串"></a>匹配字符串</h3><p>可以使用 <code>Regex.IsMatch</code> 方法来判断一个字符串是否匹配指定的正则表达式。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> input = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line"><span class="built_in">bool</span> isMatch = regex.IsMatch(input); <span class="comment">// 判断 input 是否符合 @&quot;\d+&quot; 的模式</span></span><br></pre></td></tr></table></figure>

<h3 id="获取匹配结果"><a href="#获取匹配结果" class="headerlink" title="获取匹配结果"></a>获取匹配结果</h3><p>可以使用 <code>Match</code> 对象来获取匹配的结果，包括匹配的字符串、位置等信息。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Match match = regex.Match(input);</span><br><span class="line"><span class="keyword">if</span> (match.Success)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> matchedString = match.Value; <span class="comment">// 获取匹配的字符串</span></span><br><span class="line">    <span class="built_in">int</span> startIndex = match.Index; <span class="comment">// 获取匹配的起始位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查找所有匹配"><a href="#查找所有匹配" class="headerlink" title="查找所有匹配"></a>查找所有匹配</h3><p>可以使用 <code>Regex.Matches</code> 方法来查找输入字符串中所有匹配的子串。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> input = <span class="string">&quot;12345 67890&quot;</span>;</span><br><span class="line">MatchCollection matches = regex.Matches(input);</span><br><span class="line"><span class="keyword">foreach</span> (Match match <span class="keyword">in</span> matches)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(match.Value); <span class="comment">// 输出所有匹配的子串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="替换匹配的字符串"><a href="#替换匹配的字符串" class="headerlink" title="替换匹配的字符串"></a>替换匹配的字符串</h3><p>可以使用 <code>Regex.Replace</code> 方法来替换输入字符串中匹配的子串。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> input = <span class="string">&quot;I have 123 apples.&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> result = regex.Replace(input, <span class="string">&quot;XXX&quot;</span>); <span class="comment">// 将匹配的数字替换为 &quot;XXX&quot;</span></span><br></pre></td></tr></table></figure>

<p>以上是一些常见的使用方式，正则表达式在 C# 中还有更多的高级用法和特性，例如捕获组、零宽断言、贪婪与非贪婪匹配等。正则表达式是一项非常强大和灵活的技术，能够满足各种复杂的字符串匹配和处理需求。</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h3><ul>
<li>示例错误<ul>
<li>无法运行</li>
<li>易于确定，是编译时确定的错误，编译不成功</li>
</ul>
</li>
<li>逻辑错误<ul>
<li>错误的算法，错误的公式导致程序运行的结果和期望的结果不一致，难以确定</li>
<li>调试方法：断点调试（Debug）</li>
</ul>
</li>
<li>运行时错误<ul>
<li>编译没有错误，由于激发了系统的错误条件</li>
<li>比如数组越界，空引用异常</li>
</ul>
</li>
</ul>
<h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><ul>
<li>在关键语句去打断点</li>
<li>在Debug模式下进行断点调试（F5）</li>
<li>在调试过程中，可以使用逐语句F11，逐过程F10进行调试</li>
<li>可以观察局部变量窗口，监视窗口或即时窗口观察关键变量的变化过程，（没有的话，在调试菜单下找）</li>
<li>如果已确定出逻辑错误的语句，可以跳出调试Shift+F11</li>
</ul>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="定义-12"><a href="#定义-12" class="headerlink" title="定义"></a>定义</h3><p>在C#中，异常是指程序执行过程中遇到的错误或意外情况。异常处理是一种用于处理这些错误的机制，它允许你在发生异常时采取适当的措施，以确保程序的稳定性和可靠性。以下是C#中异常处理的基本定义和用法：</p>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul>
<li><p>在程序运行时，由于意外的数据导致程序崩溃，就称为异常</p>
</li>
<li><p>在程序运行中，必须对有可能产生异常的语句进行处理的</p>
</li>
<li><p>引发异常的方式</p>
<ul>
<li>使用语句或表达式在执行过程中激发了某个异常的条件，使得操作无法正常结束，从而引发异常</li>
<li>使用显式throw语句来引发异常</li>
</ul>
</li>
</ul>
<h3 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h3><p>异常基类是Exception，两个子类</p>
<ul>
<li>SystemException：由于激发了公共运行库的异常条件导致的异常，一般是致命性的。</li>
<li>ApplicationException：应用程序异常，作为自定义异常的基类，非致命性的。</li>
</ul>
<h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><p><strong>异常类</strong>：C#中的异常是由系统定义的异常类的实例表示的，这些异常类都继承自<code>System.Exception</code>类。常见的异常类包括<code>ArgumentException</code>（参数错误）、<code>InvalidOperationException</code>（操作无效）、<code>NullReferenceException</code>（空引用异常）等。</p>
<p><strong>抛出异常</strong>：你可以使用<code>throw</code>关键字手动抛出异常。当遇到程序错误或不符合预期的情况时，可以抛出异常来中断程序的执行并将控制权传递给异常处理程序。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;发生了错误&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>捕获异常</strong>：使用<code>try-catch</code>语句可以捕获和处理异常。<code>try</code>块包含可能引发异常的代码，而<code>catch</code>块用于处理异常。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 可能引发异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 处理异常的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>finally块</strong>：<code>finally</code>块中的代码在<code>try</code>块中的代码执行结束后始终执行，无论是否发生异常。通常用于释放资源或执行清理操作。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 可能引发异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 处理异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 执行清理操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>多重catch块</strong>：一个<code>try</code>块可以包含多个<code>catch</code>块，用于处理不同类型的异常。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 可能引发异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ArgumentException ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 处理 ArgumentException 异常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InvalidOperationException ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 处理 InvalidOperationException 异常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 处理其他类型的异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>自定义异常</strong>：除了使用系统定义的异常类，你还可以创建自定义的异常类来表示特定的错误或异常情况。自定义异常类通常继承自<code>System.Exception</code>类。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">CustomException</span> : <span class="title">Exception</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span>(<span class="params"><span class="built_in">string</span> message</span>) : <span class="title">base</span>(<span class="params">message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这些是C#中异常处理的基本定义和用法。异常处理是编写稳健和可靠代码的重要组成部分，它可以帮助你有效地处理程序运行过程中的错误和异常情况。</p>
<h3 id="throw引发异常"><a href="#throw引发异常" class="headerlink" title="throw引发异常"></a>throw引发异常</h3><p>在 C# 中，<code>throw</code> 关键字用于手动引发异常。通过 <code>throw</code> 关键字，你可以在代码中显式地抛出异常，从而中断程序的执行并将控制权传递给异常处理程序。下面是 <code>throw</code> 关键字的基本用法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;发生了错误&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面的代码将抛出一个 <code>Exception</code> 类型的异常，并且指定了异常的消息为 <code>&quot;发生了错误&quot;</code>。你可以根据需要选择合适的异常类型，并且可以提供自定义的异常消息。例如，你可以使用特定的异常类，如 <code>ArgumentException</code>、<code>InvalidOperationException</code>，或者创建自定义的异常类来表示特定的错误或异常情况。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用特定的异常类</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;参数错误&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建自定义的异常类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">CustomException</span> : <span class="title">Exception</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span>(<span class="params"><span class="built_in">string</span> message</span>) : <span class="title">base</span>(<span class="params">message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> CustomException(<span class="string">&quot;自定义异常消息&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>在实际开发中，你可以根据具体的情况在适当的地方使用 <code>throw</code> 关键字来引发异常，例如在输入参数验证失败时、不支持的操作时、或者其他不符合预期的情况下。引发异常有助于提高代码的可靠性和可维护性，同时也方便了程序员在调试和测试阶段发现问题。</p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="定义-13"><a href="#定义-13" class="headerlink" title="定义"></a>定义</h3><p>在 C# 中，集合（Collection）是用于存储和操作一组对象的数据结构。集合提供了一种更灵活、更方便的方式来管理多个对象，而不需要显式地管理内存分配和释放。C# 中常用的集合类包括泛型集合（Generic Collections）和非泛型集合（Non-generic Collections）。</p>
<h3 id="泛型集合（Generic-Collections）"><a href="#泛型集合（Generic-Collections）" class="headerlink" title="泛型集合（Generic Collections）"></a>泛型集合（Generic Collections）</h3><p>泛型集合是 .NET Framework 提供的强类型集合，它们使用泛型来指定集合中元素的类型，从而提供了类型安全和高效的存储和检索操作。常见的泛型集合包括：</p>
<ol>
<li>**List<T>**：动态数组，可以动态增长和缩减，用于存储列表数据。</li>
<li>**Dictionary&lt;TKey, TValue&gt;**：键值对集合，用于存储键值对数据，通过键快速查找值。</li>
<li>**HashSet<T>**：无重复元素集合，用于存储唯一的元素。</li>
<li>**Queue<T>**：先进先出（FIFO）队列，用于存储元素，并支持在队列的一端插入元素，在另一端移除元素。</li>
<li>**Stack<T>**：后进先出（LIFO）堆栈，用于存储元素，并支持在堆栈的顶部插入元素和移除元素。</li>
</ol>
<h3 id="非泛型集合（Non-generic-Collections）"><a href="#非泛型集合（Non-generic-Collections）" class="headerlink" title="非泛型集合（Non-generic Collections）"></a>非泛型集合（Non-generic Collections）</h3><p>非泛型集合是 .NET Framework 中早期的集合实现，它们不具有类型安全性，通常在早期版本的 .NET Framework 中使用。一般来说，推荐优先使用泛型集合而不是非泛型集合。常见的非泛型集合包括：</p>
<ol>
<li><strong>ArrayList</strong>：动态数组，与 List<T> 类似，但它可以存储任意类型的对象。</li>
<li><strong>Hashtable</strong>：哈希表，键值对集合，用于存储键值对数据，类似于 Dictionary&lt;TKey, TValue&gt;，但不具有类型安全性。</li>
<li><strong>Queue</strong>：先进先出（FIFO）队列，与 Queue<T> 类似，但它可以存储任意类型的对象。</li>
<li><strong>Stack</strong>：后进先出（LIFO）堆栈，与 Stack<T> 类似，但它可以存储任意类型的对象。</li>
</ol>
<p>总的来说，泛型集合提供了更安全、更高效的集合操作，而非泛型集合则是 .NET Framework 中较早的集合实现，在特定情况下仍然可以使用。</p>
<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p><code>ArrayList</code> 是 C# 中的一种动态数组，它可以根据需要自动增长或缩小大小，以容纳添加或删除的元素。<code>ArrayList</code> 位于 <code>System.Collections</code> 命名空间下。</p>
<h3 id="ArrayList特性和用途"><a href="#ArrayList特性和用途" class="headerlink" title="ArrayList特性和用途"></a>ArrayList特性和用途</h3><ol>
<li><strong>动态大小：</strong> <code>ArrayList</code> 的大小可以根据需要动态调整，因此你无需在使用前指定其大小。</li>
<li><strong>异构性：</strong> <code>ArrayList</code> 可以包含不同类型的元素，例如整数、字符串、对象等。</li>
<li><strong>索引访问：</strong> 与普通数组类似，你可以使用索引来访问 <code>ArrayList</code> 中的元素。</li>
<li><strong>丰富的方法：</strong> <code>ArrayList</code> 类提供了许多方法来操作元素，如添加 (<code>Add</code>)、插入 (<code>Insert</code>)、移除 (<code>Remove</code>)、清空 (<code>Clear</code>) 等。</li>
<li><strong>适用场景：</strong> <code>ArrayList</code> 适用于那些需要频繁添加或删除元素的情况，或者在编写代码时无法确定数组大小的情况。</li>
</ol>
<h3 id="ArrayList示例"><a href="#ArrayList示例" class="headerlink" title="ArrayList示例"></a>ArrayList示例</h3><p>创建 ArrayList 实例</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList(); <span class="comment">// 创建一个空的 ArrayList</span></span><br></pre></td></tr></table></figure>

<p>添加元素</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">list.Add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">list.Add(<span class="number">10</span>);</span><br><span class="line">list.Add(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>访问元素</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">object</span> item = list[<span class="number">0</span>]; <span class="comment">// 访问第一个元素</span></span><br></pre></td></tr></table></figure>

<p>修改元素</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">list[<span class="number">1</span>] = <span class="string">&quot;banana&quot;</span>; <span class="comment">// 修改第二个元素的值</span></span><br></pre></td></tr></table></figure>

<p>移除元素</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">list.Remove(<span class="string">&quot;apple&quot;</span>); <span class="comment">// 移除指定的元素</span></span><br></pre></td></tr></table></figure>

<p>获取元素个数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> count = list.Count; <span class="comment">// 获取 ArrayList 中元素的个数</span></span><br></pre></td></tr></table></figure>

<p>清空 ArrayList</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">list.Clear(); <span class="comment">// 清空 ArrayList 中的所有元素</span></span><br></pre></td></tr></table></figure>

<p>遍历 ArrayList</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> list)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意事项</p>
<ol>
<li>由于 <code>ArrayList</code> 存储的是 <code>object</code> 类型，因此在访问元素时需要进行类型转换。</li>
<li>当向 <code>ArrayList</code> 中添加大量元素时，可能会导致性能下降，因为它需要不断调整大小。在这种情况下，考虑使用 <code>List&lt;T&gt;</code> 进行替代，它提供了更好的性能和类型安全性。</li>
</ol>
<h3 id="HashTable-哈希表"><a href="#HashTable-哈希表" class="headerlink" title="HashTable 哈希表"></a>HashTable 哈希表</h3><p><code>Hashtable</code> 是 C# 中的一种集合，它提供了键值对的存储和检索功能，通过哈希表的方式实现快速的数据访问。<code>Hashtable</code> 位于 <code>System.Collections</code> 命名空间下。</p>
<p>特性和用途</p>
<ol>
<li><strong>键值对存储：</strong> <code>Hashtable</code> 存储的是键值对（key-value pairs），其中每个键都是唯一的。</li>
<li><strong>快速访问：</strong> 使用键来访问值时，<code>Hashtable</code> 可以在平均时间复杂度为 O(1) 的情况下实现快速检索。</li>
<li><strong>异构性：</strong> <code>Hashtable</code> 可以存储不同类型的键和值。</li>
<li><strong>动态调整大小：</strong> <code>Hashtable</code> 的大小可以根据需要动态调整。</li>
<li><strong>自动排序：</strong> <code>Hashtable</code> 不保证元素的顺序，而是根据哈希算法存储元素，因此它不是按照插入顺序来保存元素的。</li>
<li><strong>适用场景：</strong> <code>Hashtable</code> 适用于那些需要快速查找、插入和删除键值对的场景，特别是在不知道元素数量的情况下。</li>
</ol>
<p>示例</p>
<p>#创建 Hashtable 实例</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Hashtable hashtable = <span class="keyword">new</span> Hashtable(); <span class="comment">// 创建一个空的 Hashtable</span></span><br></pre></td></tr></table></figure>

<p>#添加键值对</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">hashtable.Add(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">hashtable.Add(<span class="number">2</span>, <span class="string">&quot;value2&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>#访问值</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">object</span> <span class="keyword">value</span> = hashtable[<span class="string">&quot;key1&quot;</span>]; <span class="comment">// 使用键来访问对应的值</span></span><br></pre></td></tr></table></figure>

<p>#修改值</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">hashtable[<span class="string">&quot;key1&quot;</span>] = <span class="string">&quot;updated value&quot;</span>; <span class="comment">// 修改指定键对应的值</span></span><br></pre></td></tr></table></figure>

<p>#移除键值对</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">hashtable.Remove(<span class="string">&quot;key1&quot;</span>); <span class="comment">// 移除指定的键值对</span></span><br></pre></td></tr></table></figure>

<p>#获取键值对数量</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> count = hashtable.Count; <span class="comment">// 获取 Hashtable 中键值对的数量</span></span><br></pre></td></tr></table></figure>

<p>#清空 Hashtable</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">hashtable.Clear(); <span class="comment">// 清空 Hashtable 中的所有键值对</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意事项</p>
<ol>
<li>由于 <code>Hashtable</code> 存储的是 <code>object</code> 类型，因此在访问值时需要进行类型转换。</li>
<li>如果需要类型安全和性能更好的集合，可以考虑使用泛型集合，如 <code>Dictionary&lt;TKey, TValue&gt;</code>。</li>
</ol>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="定义-14"><a href="#定义-14" class="headerlink" title="定义"></a>定义</h3><p>泛型是 C# 中的一个重要特性，它允许您编写能够与各种数据类型一起工作的灵活和可重用的代码。泛型使您能够编写与类型无关的代码，这意味着您可以编写一次代码，然后在许多不同的数据类型上使用它。</p>
<h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>泛型类是一种具有一个或多个类型参数的类。类型参数允许您在实例化类时指定实际的数据类型。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyGenericClass</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> T _value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyGenericClass</span>(<span class="params">T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _value = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">GetValue</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>泛型方法是一种具有一个或多个类型参数的方法。类型参数允许您在调用方法时指定实际的数据类型。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">Add</span>&lt;<span class="title">T</span>&gt;(<span class="params">T a, T b</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>泛型接口是一种具有一个或多个类型参数的接口。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IRepository</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span>(<span class="params">T entity</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Delete</span>(<span class="params">T entity</span>)</span>;</span><br><span class="line">    <span class="function">T <span class="title">GetById</span>(<span class="params"><span class="built_in">int</span> id</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>泛型约束允许您限制泛型类型参数的类型，从而提高泛型代码的灵活性和安全性。常见的约束包括 <code>where T : class</code>、<code>where T : struct</code>、<code>where T : new()</code> 等。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="keyword">class</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// T 必须是引用类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型优势"><a href="#泛型优势" class="headerlink" title="泛型优势"></a>泛型优势</h3><ul>
<li><strong>代码重用性</strong>：泛型使您能够编写与类型无关的代码，可以在多种数据类型上重用。</li>
<li><strong>类型安全</strong>：泛型提供了在编译时检查类型错误的能力，减少了在运行时出现类型错误的可能性。</li>
<li><strong>性能</strong>：泛型提供了更高的性能，因为它避免了装箱和拆箱操作。</li>
</ul>
<h3 id="泛型应用场景"><a href="#泛型应用场景" class="headerlink" title="泛型应用场景"></a>泛型应用场景</h3><ul>
<li><strong>集合类</strong>：例如 <code>List&lt;T&gt;</code>、<code>Dictionary&lt;TKey, TValue&gt;</code> 等。</li>
<li><strong>数据结构</strong>：例如栈、队列等。</li>
<li><strong>LINQ</strong>：Language Integrated Query（集成查询语言）中使用泛型。</li>
</ul>
<p>泛型是 C# 中的一项强大的特性，能够使您的代码更加灵活、可读、可维护，并提高性能和安全性。</p>
<h3 id="泛型集合：List"><a href="#泛型集合：List" class="headerlink" title="泛型集合：List&lt;&gt;"></a>泛型集合：List&lt;&gt;</h3><h3 id="List定义"><a href="#List定义" class="headerlink" title="List&lt;&gt;定义"></a>List&lt;&gt;定义</h3><p>泛型集合是 C# 中用于存储和操作数据的强大工具。<code>List&lt;T&gt;</code> 是其中最常用和最灵活的一种泛型集合类型。它允许您在运行时动态添加、删除和访问元素，并提供了丰富的方法和属性来方便地操作数据集合。</p>
<h3 id="List-的创建和初始化"><a href="#List-的创建和初始化" class="headerlink" title="List&lt;&gt; 的创建和初始化"></a>List&lt;&gt; 的创建和初始化</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个空的 List</span></span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; numbers = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用初始化器初始化 List</span></span><br><span class="line">List&lt;<span class="built_in">string</span>&gt; names = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="添加和访问元素"><a href="#添加和访问元素" class="headerlink" title="添加和访问元素"></a>添加和访问元素</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">numbers.Add(<span class="number">10</span>);</span><br><span class="line">numbers.Add(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问元素</span></span><br><span class="line"><span class="built_in">int</span> firstNumber = numbers[<span class="number">0</span>]; <span class="comment">// firstNumber = 10</span></span><br></pre></td></tr></table></figure>

<h3 id="判断元素是否存在"><a href="#判断元素是否存在" class="headerlink" title="判断元素是否存在"></a>判断元素是否存在</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (names.Contains(<span class="string">&quot;Alice&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// List 中包含 &quot;Alice&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据索引删除元素</span></span><br><span class="line">names.RemoveAt(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据值删除元素</span></span><br><span class="line">names.Remove(<span class="string">&quot;Charlie&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="获取-List-的大小"><a href="#获取-List-的大小" class="headerlink" title="获取 List 的大小"></a>获取 List 的大小</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> count = names.Count;</span><br></pre></td></tr></table></figure>

<h3 id="遍历-List"><a href="#遍历-List" class="headerlink" title="遍历 List"></a>遍历 List</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> name <span class="keyword">in</span> names)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="清空-List"><a href="#清空-List" class="headerlink" title="清空 List"></a>清空 List</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">names.Clear();</span><br></pre></td></tr></table></figure>

<p><code>List&lt;T&gt;</code> 是一种灵活且功能丰富的泛型集合类型，适用于许多场景，包括存储和操作各种类型的数据。它提供了丰富的方法和属性，能够方便地进行数据操作和管理。</p>
<h3 id="泛型集合：Dictionary"><a href="#泛型集合：Dictionary" class="headerlink" title="泛型集合：Dictionary&lt;&gt;"></a>泛型集合：Dictionary&lt;&gt;</h3><h3 id="定义-15"><a href="#定义-15" class="headerlink" title="定义"></a>定义</h3><p><code>Dictionary&lt;TKey, TValue&gt;</code> 是 C# 中的一个泛型集合类，用于存储键值对。它提供了高效的查找功能，允许您通过键快速检索到对应的值。每个键必须是唯一的，但值可以重复。</p>
<h3 id="Dictionary-的创建和初始化"><a href="#Dictionary-的创建和初始化" class="headerlink" title="Dictionary 的创建和初始化"></a>Dictionary 的创建和初始化</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个空的 Dictionary</span></span><br><span class="line">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; ages = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用初始化器初始化 Dictionary</span></span><br><span class="line">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; capitals = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;()</span><br><span class="line">&#123;</span><br><span class="line">    &#123; <span class="string">&quot;USA&quot;</span>, <span class="string">&quot;Washington, D.C.&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;UK&quot;</span>, <span class="string">&quot;London&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;France&quot;</span>, <span class="string">&quot;Paris&quot;</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="添加和访问元素-1"><a href="#添加和访问元素-1" class="headerlink" title="添加和访问元素"></a>添加和访问元素</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">ages[<span class="string">&quot;Alice&quot;</span>] = <span class="number">30</span>;</span><br><span class="line">ages[<span class="string">&quot;Bob&quot;</span>] = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问元素</span></span><br><span class="line"><span class="built_in">int</span> aliceAge = ages[<span class="string">&quot;Alice&quot;</span>]; <span class="comment">// aliceAge = 30</span></span><br></pre></td></tr></table></figure>

<h3 id="判断键是否存在"><a href="#判断键是否存在" class="headerlink" title="判断键是否存在"></a>判断键是否存在</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ages.ContainsKey(<span class="string">&quot;Alice&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Alice 的年龄已经存在</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据键删除元素</span></span><br><span class="line">ages.Remove(<span class="string">&quot;Bob&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="获取-Dictionary-的大小"><a href="#获取-Dictionary-的大小" class="headerlink" title="获取 Dictionary 的大小"></a>获取 Dictionary 的大小</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> count = ages.Count;</span><br></pre></td></tr></table></figure>

<h3 id="获取-Dictionary-中的键和值"><a href="#获取-Dictionary-中的键和值" class="headerlink" title="获取 Dictionary 中的键和值"></a>获取 Dictionary 中的键和值</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取所有键</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> key <span class="keyword">in</span> ages.Keys)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有值</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> <span class="keyword">value</span> <span class="keyword">in</span> ages.Values)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键值对</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> pair <span class="keyword">in</span> ages)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Key: <span class="subst">&#123;pair.Key&#125;</span>, Value: <span class="subst">&#123;pair.Value&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="清空-Dictionary"><a href="#清空-Dictionary" class="headerlink" title="清空 Dictionary"></a>清空 Dictionary</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ages.Clear();</span><br></pre></td></tr></table></figure>

<p><code>Dictionary&lt;TKey, TValue&gt;</code> 是一个非常有用的数据结构，用于在 C# 中存储键值对，并提供了高效的查找功能。</p>
<h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><h3 id="定义-16"><a href="#定义-16" class="headerlink" title="定义"></a>定义</h3><p>委托是 C# 中一种非常强大的类型，它允许将方法作为参数传递给其他方法，或者将方法保存为对象，然后在需要时调用它们。委托提供了一种间接调用方法的机制，这对于实现事件处理、回调函数和异步编程等场景非常有用。</p>
<p>在 C# 中，委托是一种类型，可以看作是对方法的封装，它包含了一个方法的引用。委托的定义包括两个主要部分：委托类型和委托实例。</p>
<ul>
<li><strong>委托类型</strong>：委托类型定义了委托可以引用的方法的签名（返回类型和参数列表）。委托类型使用 <code>delegate</code> 关键字定义。例如：</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>(<span class="params"><span class="built_in">int</span> x</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>上面的代码定义了一个委托类型 <code>MyDelegate</code>，它可以引用一个没有返回值且接受一个 <code>int</code> 类型参数的方法。</p>
<ul>
<li><strong>委托实例</strong>：委托实例是委托类型的一个具体实例，它可以引用一个或多个具有相同签名的方法。委托实例可以通过将方法直接赋值给委托变量来创建，也可以通过委托的构造函数来创建。例如：</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">MyDelegate myDelegate = SomeMethod;</span><br></pre></td></tr></table></figure>

<p>上面的代码创建了一个 <code>MyDelegate</code> 类型的委托实例 <code>myDelegate</code>，它引用了一个名为 <code>SomeMethod</code> 的方法。</p>
<h3 id="委托的使用"><a href="#委托的使用" class="headerlink" title="委托的使用"></a>委托的使用</h3><p>委托主要用于两个方面：委托作为方法参数和委托作为方法返回类型。</p>
<ol>
<li><strong>委托作为方法参数</strong>：在方法中可以将委托作为参数传递，允许调用方提供一个方法来执行某些操作。例如：</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessData</span>(<span class="params">MyDelegate del</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 调用委托</span></span><br><span class="line">    del(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>委托作为方法返回类型</strong>：方法可以返回委托类型，允许调用方获取一个方法的引用。例如：</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> MyDelegate <span class="title">GetMethod</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> SomeMethod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="委托的多播"><a href="#委托的多播" class="headerlink" title="委托的多播"></a>委托的多播</h3><p>委托可以引用多个方法，这种能力称为委托的多播。当调用委托时，它会依次调用引用的每个方法。可以使用 <code>+=</code> 运算符将多个方法添加到委托实例中，使用 <code>-=</code> 运算符将方法从委托实例中移除。例如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">MyDelegate myDelegate = SomeMethod1;</span><br><span class="line">myDelegate += SomeMethod2; <span class="comment">// 将 SomeMethod2 添加到委托中</span></span><br><span class="line">myDelegate -= SomeMethod1; <span class="comment">// 将 SomeMethod1 从委托中移除</span></span><br></pre></td></tr></table></figure>

<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>委托是 C# 中一种强大的类型，它提供了一种间接调用方法的机制。通过委托，可以将方法作为参数传递给其他方法，或者将方法保存为对象，然后在需要时调用它们。委托还支持多播，允许引用多个方法。</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件是 C# 中用于实现发布-订阅模式的重要机制，它允许一个对象通知其他对象发生了某个特定的事件，其他对象可以注册为该事件的监听器，并在事件发生时执行相应的操作。事件通常用于实现对象之间的解耦，使得对象能够以一种松散耦合的方式进行通信。</p>
<h3 id="事件的定义"><a href="#事件的定义" class="headerlink" title="事件的定义"></a>事件的定义</h3><p>事件是委托的一种特殊用法。在 C# 中，事件定义了委托的一个实例，通常包括两个部分：事件声明和事件触发器。</p>
<ul>
<li><strong>事件声明</strong>：事件声明定义了事件的名称和委托类型。它使用 <code>event</code> 关键字声明。例如：</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> EventHandler MyEvent;</span><br></pre></td></tr></table></figure>

<p>上面的代码定义了一个名为 <code>MyEvent</code> 的事件，它使用 <code>EventHandler</code> 委托作为事件的类型。</p>
<ul>
<li><strong>事件触发器</strong>：事件触发器用于触发事件，并通知所有注册的监听器。通常，事件触发器是一个专门的方法，负责触发事件。例如：</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnMyEvent</span>(<span class="params">EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    MyEvent?.Invoke(<span class="keyword">this</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码定义了一个名为 <code>OnMyEvent</code> 的事件触发器，它使用 <code>EventArgs</code> 参数触发 <code>MyEvent</code> 事件。</p>
<h3 id="事件的使用"><a href="#事件的使用" class="headerlink" title="事件的使用"></a>事件的使用</h3><p>使用事件的主要步骤包括定义事件、注册事件处理程序和触发事件。</p>
<ol>
<li><p><strong>定义事件</strong>：首先，在类中定义事件，声明事件的名称和类型。</p>
</li>
<li><p><strong>注册事件处理程序</strong>：其他对象可以注册为事件的监听器，以便在事件发生时执行相应的操作。通常使用 <code>+=</code> 运算符将事件处理程序添加到事件中。</p>
</li>
<li><p><strong>触发事件</strong>：在事件发生时，调用事件触发器方法，通知所有注册的事件处理程序。</p>
</li>
</ol>
<h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><p>下面是一个简单的示例，演示了如何使用事件：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Publisher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler MyEvent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发事件</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnMyEvent</span>(<span class="params">EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyEvent?.Invoke(<span class="keyword">this</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PublishEvent</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Publishing event...&quot;</span>);</span><br><span class="line">        OnMyEvent(EventArgs.Empty);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Subscriber</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 事件处理程序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HandleEvent</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Event handled by Subscriber.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Publisher publisher = <span class="keyword">new</span> Publisher();</span><br><span class="line">        Subscriber subscriber = <span class="keyword">new</span> Subscriber();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册事件处理程序</span></span><br><span class="line">        publisher.MyEvent += subscriber.HandleEvent;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发布事件</span></span><br><span class="line">        publisher.PublishEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的示例中，<code>Publisher</code> 类定义了一个名为 <code>MyEvent</code> 的事件，并提供了一个方法 <code>PublishEvent</code> 来触发该事件。<code>Subscriber</code> 类定义了一个事件处理程序 <code>HandleEvent</code>，用于处理事件。在 <code>Main</code> 方法中，创建了一个 <code>Publisher</code> 对象和一个 <code>Subscriber</code> 对象，并将 <code>Subscriber</code> 的 <code>HandleEvent</code> 方法注册为 <code>Publisher</code> 的事件处理程序。最后，调用 <code>PublishEvent</code> 方法触发事件，<code>Subscriber</code> 对象的事件处理程序被调用。</p>
<h3 id="事件的特点"><a href="#事件的特点" class="headerlink" title="事件的特点"></a>事件的特点</h3><ul>
<li><p><strong>安全性</strong>：事件是基于委托的，委托具有封装性和安全性，可以确保事件只能由定义它的类触发。</p>
</li>
<li><p><strong>解耦</strong>：事件允许对象之间以松散耦合的方式进行通信，提高了代码的可维护性和可扩展性。</p>
</li>
<li><p><strong>多播</strong>：事件支持多播委托，可以将多个事件处理程序注册到同一个事件上，以便在事件发生时依次调用它们。</p>
</li>
</ul>
<p>总的来说，事件是 C# 中一种非常有用的机制，用于实现发布-订阅模式，允许对象之间以松散耦合的方式进行通信。通过事件，可以更灵活地设计和实现应用程序。</p>
<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p>在 C# 中，I&#x2F;O（Input&#x2F;Output）流是用于在程序和外部数据源之间进行数据传输的重要机制。I&#x2F;O 流主要用于读取和写入文件、网络通信、处理内存流等操作。C# 提供了丰富的类库和接口，用于支持各种类型的 I&#x2F;O 操作。</p>
<h3 id="主要的-I-O-流类"><a href="#主要的-I-O-流类" class="headerlink" title="主要的 I&#x2F;O 流类"></a>主要的 I&#x2F;O 流类</h3><p>在 C# 中，常用的 I&#x2F;O 流类主要包括 <code>FileStream</code>、<code>StreamReader</code>、<code>StreamWriter</code>、<code>MemoryStream</code>、<code>NetworkStream</code> 等。下面是这些类的简要介绍：</p>
<ol>
<li><p><strong>FileStream</strong>：用于读取和写入文件的流。它直接操作文件系统，可以读取和写入任何类型的文件。</p>
</li>
<li><p><strong>StreamReader</strong>：用于从文本文件中读取字符流的流。它提供了各种读取文本文件的方法，例如逐行读取、读取到指定字符等。</p>
</li>
<li><p><strong>StreamWriter</strong>：用于向文本文件中写入字符流的流。它提供了各种写入文本文件的方法，例如写入字符串、写入字符数组等。</p>
</li>
<li><p><strong>MemoryStream</strong>：用于在内存中操作数据的流。它可以将数据读取到内存中，也可以将内存中的数据写入到流中。</p>
</li>
<li><p><strong>NetworkStream</strong>：用于与网络套接字进行数据交换的流。它可以用于与远程主机进行通信，发送和接收数据。</p>
</li>
</ol>
<h3 id="FileStream"><a href="#FileStream" class="headerlink" title="FileStream"></a>FileStream</h3><p><code>FileStream</code> 类的父类是 <code>Stream</code>。<code>Stream</code> 是抽象基类，定义了一些抽象方法和属性，用于在不同的 I&#x2F;O 操作中进行数据流的读取和写入。<code>FileStream</code> 类继承了 <code>Stream</code> 类，并实现了各种文件 I&#x2F;O 操作的具体细节。</p>
<p>当使用 <code>FileStream</code> 类进行文件操作时，通常会涉及创建、打开、读取、写入和关闭文件。下面是一些具体的示例，演示了如何使用 <code>FileStream</code> 类执行这些操作：</p>
<h3 id="FileStream创建文件并写入数据"><a href="#FileStream创建文件并写入数据" class="headerlink" title="FileStream创建文件并写入数据"></a>FileStream创建文件并写入数据</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> fileName = <span class="string">&quot;example.txt&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> content = <span class="string">&quot;Hello, FileStream!&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 FileStream 创建一个新文件，以写入方式打开</span></span><br><span class="line">        <span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(fileName, FileMode.Create, FileAccess.Write))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 将字符串内容转换为字节数组</span></span><br><span class="line">            <span class="built_in">byte</span>[] data = Encoding.UTF8.GetBytes(content);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 将字节数组写入文件</span></span><br><span class="line">            fs.Write(data, <span class="number">0</span>, data.Length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;File created and data written successfully.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FileStream打开文件并读取数据"><a href="#FileStream打开文件并读取数据" class="headerlink" title="FileStream打开文件并读取数据"></a>FileStream打开文件并读取数据</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> fileName = <span class="string">&quot;example.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 FileStream 打开一个现有文件，以只读方式打开</span></span><br><span class="line">        <span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(fileName, FileMode.Open, FileAccess.Read))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建一个缓冲区来存储读取的数据</span></span><br><span class="line">            <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 从文件中读取数据到缓冲区中</span></span><br><span class="line">            <span class="built_in">int</span> bytesRead = fs.Read(buffer, <span class="number">0</span>, buffer.Length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将读取的字节数组转换为字符串并输出到控制台</span></span><br><span class="line">            <span class="built_in">string</span> data = Encoding.UTF8.GetString(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Data read from file: &quot;</span> + data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FileStream追加数据到现有文件"><a href="#FileStream追加数据到现有文件" class="headerlink" title="FileStream追加数据到现有文件"></a>FileStream追加数据到现有文件</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> fileName = <span class="string">&quot;example.txt&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> newData = <span class="string">&quot;\nAppending additional data.&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 FileStream 打开一个现有文件，以追加方式打开</span></span><br><span class="line">        <span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(fileName, FileMode.Append, FileAccess.Write))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 将字符串内容转换为字节数组</span></span><br><span class="line">            <span class="built_in">byte</span>[] data = Encoding.UTF8.GetBytes(newData);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 将字节数组写入文件</span></span><br><span class="line">            fs.Write(data, <span class="number">0</span>, data.Length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Additional data appended to file successfully.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FileStream删除现有文件"><a href="#FileStream删除现有文件" class="headerlink" title="FileStream删除现有文件"></a>FileStream删除现有文件</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> fileName = <span class="string">&quot;example.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查文件是否存在，如果存在则删除</span></span><br><span class="line">        <span class="keyword">if</span> (File.Exists(fileName))</span><br><span class="line">        &#123;</span><br><span class="line">            File.Delete(fileName);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;File deleted successfully.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;File does not exist.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这些示例演示了如何使用 <code>FileStream</code> 类创建、打开、读取、写入和删除文件。记得在使用完毕后关闭文件流以释放资源，可以使用 <code>using</code> 语句确保在作用域结束时自动关闭文件流。</p>
<h3 id="StreamReader"><a href="#StreamReader" class="headerlink" title="StreamReader"></a>StreamReader</h3><p><code>StreamReader</code> 类的父类是 <code>TextReader</code>。<code>TextReader</code> 是一个抽象类，定义了读取字符流的基本方法和属性，而 <code>StreamReader</code> 则是实现了从字节流读取字符的具体类。</p>
<p><code>StreamReader</code> 是 .NET 中用于从流中读取文本数据的类之一。它提供了一种方便的方式来从文件流或其他文本输入流中读取字符或文本数据。</p>
<p><code>StreamReader</code> 类位于 <code>System.IO</code> 命名空间中，它包含了一系列用于读取文本的方法。你可以使用 <code>StreamReader</code> 来读取字符串、字符数组或者整行文本数据。常用的方法包括 <code>Read</code>、<code>ReadLine</code>、<code>ReadToEnd</code> 等。</p>
<p>下面是一个简单的示例，演示了如何使用 <code>StreamReader</code> 从文件中读取文本数据：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> filePath = <span class="string">&quot;example.txt&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用 StreamReader 读取文件中的文本</span></span><br><span class="line">        <span class="keyword">using</span> (StreamReader reader = <span class="keyword">new</span> StreamReader(filePath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.ReadLine()) != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，我们打开了一个名为 <code>example.txt</code> 的文件，并使用 <code>StreamReader</code> 逐行读取了文件中的文本数据，然后将每一行文本输出到控制台上。</p>
<h3 id="StreamWrite"><a href="#StreamWrite" class="headerlink" title="StreamWrite"></a>StreamWrite</h3><p><code>StreamReader</code> 类的父类是 <code>TextReader</code>。<code>TextReader</code> 是一个抽象类，定义了读取字符流的基本方法和属性，而 <code>StreamReader</code> 则是实现了从字节流读取字符的具体类。</p>
<p><code>StreamWriter</code> 是 .NET 中用于将文本写入流的类之一。它提供了一种方便的方式来将文本数据写入文件流或内存流等。<code>StreamWriter</code> 通常用于写入文本文件，但也可以用于其他文本输出流。</p>
<p><code>StreamWriter</code> 类位于 <code>System.IO</code> 命名空间中，它包含了一系列用于写入文本的方法。你可以使用 <code>StreamWriter</code> 来写入字符串、字符数组或者格式化的数据到流中。常用的方法包括 <code>Write</code>、<code>WriteLine</code>、<code>WriteAsync</code> 等。</p>
<p>下面是一个简单的示例，演示了如何使用 <code>StreamWriter</code> 将文本写入文件：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> filePath = <span class="string">&quot;example.txt&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用 StreamWriter 写入文本到文件</span></span><br><span class="line">        <span class="keyword">using</span> (StreamWriter writer = <span class="keyword">new</span> StreamWriter(filePath))</span><br><span class="line">        &#123;</span><br><span class="line">            writer.WriteLine(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">            writer.WriteLine(<span class="string">&quot;This is a test.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;文本已成功写入文件！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，我们创建了一个名为 <code>example.txt</code> 的文件，并使用 <code>StreamWriter</code> 写入了两行文本到该文件中。运行程序后，你将在当前目录下找到生成的 <code>example.txt</code> 文件，并包含了写入的文本内容。</p>
<h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><p><code>File</code> 类是 <code>System.IO</code> 命名空间下的一个静态类，提供了一组用于操作文件的静态方法。使用 <code>File</code> 类，你可以执行诸如创建、复制、删除文件等操作。以下是 <code>File</code> 类的一些常用方法：</p>
<ol>
<li><p><strong>创建文件：</strong> <code>Create</code> 方法用于创建一个新的文件。如果文件已存在，则会被覆盖。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">File.Create(<span class="string">@&quot;C:\ExampleFile.txt&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除文件：</strong> <code>Delete</code> 方法用于删除指定的文件。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">File.Delete(<span class="string">@&quot;C:\ExampleFile.txt&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>复制文件：</strong> <code>Copy</code> 方法用于将文件复制到新位置。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">File.Copy(<span class="string">@&quot;C:\SourceFile.txt&quot;</span>, <span class="string">@&quot;D:\DestinationFile.txt&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果想要覆盖目标文件，可以设置第三个参数为 <code>true</code>：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">File.Copy(<span class="string">@&quot;C:\SourceFile.txt&quot;</span>, <span class="string">@&quot;D:\DestinationFile.txt&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>移动文件：</strong> <code>Move</code> 方法用于将文件移动到新位置。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">File.Move(<span class="string">@&quot;C:\SourceFile.txt&quot;</span>, <span class="string">@&quot;D:\NewLocation\SourceFile.txt&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>检查文件是否存在：</strong> <code>Exists</code> 方法用于检查指定的文件是否存在。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (File.Exists(<span class="string">@&quot;C:\ExampleFile.txt&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 文件存在</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>读取文件内容：</strong> <code>ReadAllText</code> 和 <code>ReadAllLines</code> 方法用于读取文件的内容。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> text = File.ReadAllText(<span class="string">@&quot;C:\ExampleFile.txt&quot;</span>);</span><br><span class="line"><span class="built_in">string</span>[] lines = File.ReadAllLines(<span class="string">@&quot;C:\ExampleFile.txt&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>写入文件内容：</strong> <code>WriteAllText</code> 和 <code>WriteAllLines</code> 方法用于向文件中写入内容。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">File.WriteAllText(<span class="string">@&quot;C:\ExampleFile.txt&quot;</span>, <span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line"><span class="built_in">string</span>[] lines = &#123; <span class="string">&quot;Line 1&quot;</span>, <span class="string">&quot;Line 2&quot;</span>, <span class="string">&quot;Line 3&quot;</span> &#125;;</span><br><span class="line">File.WriteAllLines(<span class="string">@&quot;C:\ExampleFile.txt&quot;</span>, lines);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取文件的创建时间、访问时间和修改时间：</strong> <code>GetCreationTime</code>、<code>GetLastAccessTime</code> 和 <code>GetLastWriteTime</code> 方法用于获取文件的创建时间、访问时间和修改时间。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">DateTime creationTime = File.GetCreationTime(<span class="string">@&quot;C:\ExampleFile.txt&quot;</span>);</span><br><span class="line">DateTime lastAccessTime = File.GetLastAccessTime(<span class="string">@&quot;C:\ExampleFile.txt&quot;</span>);</span><br><span class="line">DateTime lastWriteTime = File.GetLastWriteTime(<span class="string">@&quot;C:\ExampleFile.txt&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置文件的创建时间、访问时间和修改时间：</strong> <code>SetCreationTime</code>、<code>SetLastAccessTime</code> 和 <code>SetLastWriteTime</code> 方法用于设置文件的创建时间、访问时间和修改时间。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">File.SetCreationTime(<span class="string">@&quot;C:\ExampleFile.txt&quot;</span>, DateTime.Now);</span><br><span class="line">File.SetLastAccessTime(<span class="string">@&quot;C:\ExampleFile.txt&quot;</span>, DateTime.Now);</span><br><span class="line">File.SetLastWriteTime(<span class="string">@&quot;C:\ExampleFile.txt&quot;</span>, DateTime.Now);</span><br></pre></td></tr></table></figure></li>
</ol>
<p>这些方法提供了对文件进行各种操作的便捷方式，可以方便地管理文件系统中的文件。</p>
<h3 id="Directory类"><a href="#Directory类" class="headerlink" title="Directory类"></a>Directory类</h3><p><code>Directory</code> 类是 <code>System.IO</code> 命名空间下的一个静态类，提供了一组用于操作目录的静态方法。使用 <code>Directory</code> 类，你可以执行诸如创建、移动、删除目录等操作。以下是 <code>Directory</code> 类的一些常用方法：</p>
<ol>
<li><p><strong>创建目录：</strong> <code>CreateDirectory</code> 方法用于创建一个新的目录。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Directory.CreateDirectory(<span class="string">@&quot;C:\ExampleDirectory&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除目录：</strong> <code>Delete</code> 方法用于删除指定的目录。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Directory.Delete(<span class="string">@&quot;C:\ExampleDirectory&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果目录不为空，可以使用第二个参数来指定是否递归删除子目录和文件：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Directory.Delete(<span class="string">@&quot;C:\ExampleDirectory&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>检查目录是否存在：</strong> <code>Exists</code> 方法用于检查指定的目录是否存在。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Directory.Exists(<span class="string">@&quot;C:\ExampleDirectory&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 目录存在</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取目录中的文件和子目录列表：</strong> <code>GetFiles</code> 和 <code>GetDirectories</code> 方法用于获取指定目录中的文件和子目录列表。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>[] files = Directory.GetFiles(<span class="string">@&quot;C:\ExampleDirectory&quot;</span>);</span><br><span class="line"><span class="built_in">string</span>[] directories = Directory.GetDirectories(<span class="string">@&quot;C:\ExampleDirectory&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>移动目录：</strong> <code>Move</code> 方法用于将指定目录移动到新位置。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Directory.Move(<span class="string">@&quot;C:\ExampleDirectory&quot;</span>, <span class="string">@&quot;D:\NewDirectory&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取目录的创建时间、访问时间和修改时间：</strong> <code>GetCreationTime</code>、<code>GetLastAccessTime</code> 和 <code>GetLastWriteTime</code> 方法用于获取目录的创建时间、访问时间和修改时间。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">DateTime creationTime = Directory.GetCreationTime(<span class="string">@&quot;C:\ExampleDirectory&quot;</span>);</span><br><span class="line">DateTime lastAccessTime = Directory.GetLastAccessTime(<span class="string">@&quot;C:\ExampleDirectory&quot;</span>);</span><br><span class="line">DateTime lastWriteTime = Directory.GetLastWriteTime(<span class="string">@&quot;C:\ExampleDirectory&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置目录的创建时间、访问时间和修改时间：</strong> <code>SetCreationTime</code>、<code>SetLastAccessTime</code> 和 <code>SetLastWriteTime</code> 方法用于设置目录的创建时间、访问时间和修改时间。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Directory.SetCreationTime(<span class="string">@&quot;C:\ExampleDirectory&quot;</span>, DateTime.Now);</span><br><span class="line">Directory.SetLastAccessTime(<span class="string">@&quot;C:\ExampleDirectory&quot;</span>, DateTime.Now);</span><br><span class="line">Directory.SetLastWriteTime(<span class="string">@&quot;C:\ExampleDirectory&quot;</span>, DateTime.Now);</span><br></pre></td></tr></table></figure></li>
</ol>
<p>这些方法提供了对目录进行各种操作的便捷方式，可以方便地管理文件系统中的目录结构。</p>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>C# 的 I&#x2F;O 流提供了丰富的功能和灵活的接口，用于实现各种类型的 I&#x2F;O 操作。通过合理地选择和使用不同的流类，可以轻松地处理文件、内存、网络等数据源，从而实现程序的各种需求。在实际开发中，要根据具体的需求和场景选择合适的流类，并注意及时释放资源以避免资源泄漏。</p>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>在 C# 中，序列化是将对象转换为可以存储或传输的格式的过程，而反序列化则是将序列化后的数据重新转换为对象的过程。C# 提供了多种序列化和反序列化的方式，包括二进制序列化、XML 序列化和 JSON 序列化等。</p>
<h3 id="二进制序列化"><a href="#二进制序列化" class="headerlink" title="二进制序列化"></a>二进制序列化</h3><p>二进制序列化是将对象转换为二进制格式的过程，可以将对象写入到文件中或通过网络传输。C# 中的二进制序列化通常使用 <code>BinaryFormatter</code> 类来实现。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个可序列化的类</span></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建一个 Person 对象</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person &#123; Name = <span class="string">&quot;Alice&quot;</span>, Age = <span class="number">30</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 BinaryFormatter 对象</span></span><br><span class="line">        BinaryFormatter formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文件流</span></span><br><span class="line">        <span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(<span class="string">&quot;person.dat&quot;</span>, FileMode.Create))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 将对象序列化到文件中</span></span><br><span class="line">            formatter.Serialize(fs, person);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Serialization complete.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二进制反序列化"><a href="#二进制反序列化" class="headerlink" title="二进制反序列化"></a>二进制反序列化</h3><p>反序列化是将序列化后的数据重新转换为对象的过程。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个可序列化的类</span></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建 BinaryFormatter 对象</span></span><br><span class="line">        BinaryFormatter formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文件流</span></span><br><span class="line">        <span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(<span class="string">&quot;person.dat&quot;</span>, FileMode.Open))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 从文件中反序列化对象</span></span><br><span class="line">            Person person = (Person)formatter.Deserialize(fs);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Name: <span class="subst">&#123;person.Name&#125;</span>, Age: <span class="subst">&#123;person.Age&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Deserialization complete.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="XML序列化"><a href="#XML序列化" class="headerlink" title="XML序列化"></a>XML序列化</h3><p>XML 序列化是将对象转换为 XML 格式的过程，通常用于在不同平台之间传输对象。C# 中的 XML 序列化通常使用 <code>XmlSerializer</code> 类来实现。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个可序列化的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建一个 Person 对象</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person &#123; Name = <span class="string">&quot;Bob&quot;</span>, Age = <span class="number">25</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 XmlSerializer 对象</span></span><br><span class="line">        XmlSerializer serializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(Person));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文件流</span></span><br><span class="line">        <span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(<span class="string">&quot;person.xml&quot;</span>, FileMode.Create))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 将对象序列化为 XML 格式并写入文件</span></span><br><span class="line">            serializer.Serialize(fs, person);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Serialization complete.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="XML反序列化"><a href="#XML反序列化" class="headerlink" title="XML反序列化"></a>XML反序列化</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个可序列化的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建 XmlSerializer 对象</span></span><br><span class="line">        XmlSerializer serializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(Person));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文件流</span></span><br><span class="line">        <span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(<span class="string">&quot;person.xml&quot;</span>, FileMode.Open))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 从文件中反序列化对象</span></span><br><span class="line">            Person person = (Person)serializer.Deserialize(fs);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Name: <span class="subst">&#123;person.Name&#125;</span>, Age: <span class="subst">&#123;person.Age&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Deserialization complete.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JSON-序列化"><a href="#JSON-序列化" class="headerlink" title="JSON 序列化"></a>JSON 序列化</h3><p>JSON 序列化是将对象转换为 JSON 格式的过程，通常用于在 Web 应用程序中传输数据。C# 中的 JSON 序列化通常使用第三方库，如 Newtonsoft.Json。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个可序列化的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建一个 Person 对象</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person &#123; Name = <span class="string">&quot;Alice&quot;</span>, Age = <span class="number">30</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将对象序列化为 JSON 字符串</span></span><br><span class="line">        <span class="built_in">string</span> json = JsonConvert.SerializeObject(person);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 JSON 字符串写入文件</span></span><br><span class="line">        File.WriteAllText(<span class="string">&quot;person.json&quot;</span>, json);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Serialization complete.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JSON-反序列化"><a href="#JSON-反序列化" class="headerlink" title="JSON 反序列化"></a>JSON 反序列化</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个可序列化的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 从文件中读取 JSON 字符串</span></span><br><span class="line">        <span class="built_in">string</span> json = File.ReadAllText(<span class="string">&quot;person.json&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 JSON 字符串反序列化为对象</span></span><br><span class="line">        Person person = JsonConvert.DeserializeObject&lt;Person&gt;(json);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Name: <span class="subst">&#123;person.Name&#125;</span>, Age: <span class="subst">&#123;person.Age&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Deserialization complete.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是在 C# 中进行序列化和反序列化的一般方法。根据具体的需求和场景，可以选择合适的序列化方式和相关库来实现对象的序列化和反序列化。</p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>C# 中的反射（Reflection）是指在运行时动态地获取类型信息、成员信息和调用成员的能力。反射使得程序能够在运行时查询和操作类型、对象和成员，而不需要事先知道它们的具体信息。</p>
<h3 id="主要的反射类"><a href="#主要的反射类" class="headerlink" title="主要的反射类"></a>主要的反射类</h3><p>在 C# 中，反射主要通过 <code>System.Reflection</code> 命名空间中的类来实现。</p>
<ol>
<li><p><strong>Assembly（程序集）：</strong> 表示一个已加载到应用程序域中的程序集，可以获取程序集的元数据信息，如类型、成员等。</p>
</li>
<li><p><strong>Type（类型）：</strong> 表示一个类、结构、接口、枚举或委托类型，可以获取类型的成员信息，如字段、属性、方法等。</p>
</li>
<li><p><strong>MethodInfo（方法信息）：</strong> 表示类中的方法，可以获取方法的参数、返回值等信息，并调用方法。</p>
</li>
<li><p><strong>FieldInfo（字段信息）：</strong> 表示类中的字段，可以获取字段的类型、值等信息，并设置字段的值。</p>
</li>
<li><p><strong>PropertyInfo（属性信息）：</strong> 表示类中的属性，可以获取属性的类型、值等信息，并设置属性的值。</p>
</li>
<li><p><strong>EventInfo（事件信息）：</strong> 表示类中的事件，可以获取事件的类型、订阅和取消订阅事件等信息。</p>
</li>
</ol>
<h3 id="使用反射的场景"><a href="#使用反射的场景" class="headerlink" title="使用反射的场景"></a>使用反射的场景</h3><ol>
<li><p><strong>动态加载程序集：</strong> 在运行时根据需要加载程序集，而不是在编译时将所有程序集都引入。</p>
</li>
<li><p><strong>动态创建对象：</strong> 根据类型信息创建对象，而不需要显式调用构造函数。</p>
</li>
<li><p><strong>动态调用方法：</strong> 根据方法信息调用对象的方法，而不需要提前知道方法名称。</p>
</li>
<li><p><strong>动态访问和修改成员：</strong> 获取和设置对象的字段和属性的值，动态调用事件等。</p>
</li>
</ol>
<h3 id="示例：使用反射获取类型信息和成员信息"><a href="#示例：使用反射获取类型信息和成员信息" class="headerlink" title="示例：使用反射获取类型信息和成员信息"></a>示例：使用反射获取类型信息和成员信息</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取程序集信息</span></span><br><span class="line">        Assembly assembly = Assembly.GetExecutingAssembly();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取类型信息</span></span><br><span class="line">        Type type = assembly.GetType(<span class="string">&quot;MyNamespace.MyClass&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取类型的字段信息</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Fields:&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> type.GetFields())</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;field.Name&#125;</span>: <span class="subst">&#123;field.FieldType&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取类型的属性信息</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Properties:&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> type.GetProperties())</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;prop.Name&#125;</span>: <span class="subst">&#123;prop.PropertyType&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取类型的方法信息</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Methods:&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> method <span class="keyword">in</span> type.GetMethods())</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;method.Name&#125;</span>: <span class="subst">&#123;method.ReturnType&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyNamespace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> MyField;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> MyProperty &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyMethod</span>()</span> &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的示例演示了如何使用反射获取程序集、类型、字段、属性和方法的信息。通过反射，可以在运行时动态地探索和操作类型的成员，从而实现更加灵活和动态的编程。但是需要注意，反射的使用可能会导致性能下降，并且使代码更加复杂，因此应该谨慎使用。</p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>多线程是指在单个进程中同时执行多个线程的编程模型。在 C# 中，多线程编程可以通过 <code>System.Threading</code> 命名空间中的类和方法来实现。下面是一些关于多线程的基本概念和常用方法：</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol>
<li><p><strong>线程（Thread）：</strong> 线程是执行程序代码的基本单元，每个线程都有自己的执行路径和执行上下文，可以独立运行。</p>
</li>
<li><p><strong>进程（Process）：</strong> 进程是程序的一个实例，在操作系统中具有独立的内存空间和系统资源，可以包含一个或多个线程。</p>
</li>
<li><p><strong>多线程（Multithreading）：</strong> 多线程是指在同一个进程中同时执行多个线程，每个线程可以独立执行不同的任务。</p>
</li>
<li><p><strong>并发（Concurrency）：</strong> 并发是指多个线程在同一时间段内执行，可以提高系统的吞吐量和响应速度。</p>
</li>
<li><p><strong>互斥（Mutual Exclusion）：</strong> 互斥是一种同步机制，用于保护共享资源，防止多个线程同时访问和修改。</p>
</li>
<li><p><strong>同步（Synchronization）：</strong> 同步是一种协调机制，用于控制线程的执行顺序和互斥访问共享资源。</p>
</li>
</ol>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol>
<li><p><strong>创建线程：</strong> 使用 <code>Thread</code> 类来创建和管理线程，可以通过构造函数传递一个委托（通常是 <code>ThreadStart</code> 委托或 <code>ParameterizedThreadStart</code> 委托）来指定线程要执行的方法。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Thread thread = <span class="keyword">new</span> Thread(MyThreadMethod);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动线程：</strong> 使用 <code>Start</code> 方法来启动线程，使其开始执行指定的方法。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">thread.Start();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>线程休眠：</strong> 使用 <code>Thread.Sleep</code> 方法来使当前线程休眠指定的时间。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Thread.Sleep(<span class="number">1000</span>); <span class="comment">// 休眠1秒钟</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>线程加入：</strong> 使用 <code>Join</code> 方法来等待一个线程完成执行。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">thread.Join(); <span class="comment">// 等待线程执行完毕</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>线程终止：</strong> 使用 <code>Abort</code> 方法来强制终止一个线程的执行。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">thread.Abort(); <span class="comment">// 终止线程的执行</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>线程池：</strong> 使用 <code>ThreadPool</code> 类来管理线程池，可以减少线程创建和销毁的开销。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ThreadPool.QueueUserWorkItem(MyThreadMethod); <span class="comment">// 将方法添加到线程池中执行</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>异步方法：</strong> .Net 5.0 中使用 <code>async</code> 和 <code>await</code> 关键字来定义异步方法，可以在不阻塞主线程的情况下执行耗时操作。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">async</span> Task <span class="title">MyAsyncMethod</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>); <span class="comment">// 异步等待1秒钟</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>线程同步：</strong> 使用 <code>lock</code> 关键字或 <code>Monitor</code> 类来实现线程同步和互斥。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lock</span> (lockObj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 同步代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="CancellationToken"><a href="#CancellationToken" class="headerlink" title="CancellationToken"></a>CancellationToken</h3><p>以上是一些基本的多线程概念和常用方法，多线程编程涉及到很多复杂的概念和技术，需要谨慎使用并注意线程安全性。</p>
<p>在C#中，可以通过调用 <code>Thread.Abort()</code> 方法来中断线程。这会引发 <code>ThreadAbortException</code>，如果线程没有处理此异常，线程将被中止。然而，使用 <code>Thread.Abort()</code> 方法来中断线程是一个比较粗暴的方法，因为它可能导致资源泄漏或不一致的状态。更好的方法是通过使用 <code>CancellationToken</code> 来请求取消操作，以便线程可以在合适的时候优雅地退出。</p>
<p>以下是使用 <code>Thread.Abort()</code> 方法中断线程的示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(DoWork);</span><br><span class="line">        thread.Start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在一定时间后中断线程</span></span><br><span class="line">        Thread.Sleep(<span class="number">3000</span>);</span><br><span class="line">        thread.Abort();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Thread has been aborted.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoWork</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Working...&quot;</span>);</span><br><span class="line">                Thread.Sleep(<span class="number">1000</span>); <span class="comment">// 模拟一些工作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ThreadAbortException)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Thread has been aborted.&quot;</span>);</span><br><span class="line">            <span class="comment">// 执行清理工作（如果有）</span></span><br><span class="line">            <span class="comment">// 最后，调用 Thread.ResetAbort() 方法来清除线程的中断请求</span></span><br><span class="line">            Thread.ResetAbort();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，虽然使用 <code>Thread.Abort()</code> 方法可以中断线程，但是它不太安全，因为它可能会导致线程在不恰当的时间点终止，从而可能导致资源泄漏或不一致的状态。因此，更推荐的做法是使用 <code>CancellationToken</code> 来请求取消操作，让线程在适当的时候自行退出。</p>
<h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>在.Net 4.0中基于ThreadPool的基础上封装的对象</p>
<p>Task解决了手动创建Thread线程带来的损耗，又解决了ThreadPool不能对单个</p>
<p>Action是一个委托，是一个无参无返回值的委托</p>
<p>start 可以带参数，带返回值</p>
<p>run 用的比较多，可以创建并运行，不好带参数，可以带返回值</p>
<h2 id="C-3-0中新语法"><a href="#C-3-0中新语法" class="headerlink" title="C#3.0中新语法"></a>C#3.0中新语法</h2><h3 id="自动属性"><a href="#自动属性" class="headerlink" title="自动属性"></a>自动属性</h3><p>在编译时自动生成对应的私有字段</p>
<h3 id="对象初始化器和集合初始化器"><a href="#对象初始化器和集合初始化器" class="headerlink" title="对象初始化器和集合初始化器"></a>对象初始化器和集合初始化器</h3><h3 id="隐式类型变量Var"><a href="#隐式类型变量Var" class="headerlink" title="隐式类型变量Var"></a>隐式类型变量Var</h3><p>在编译时根据上下文推断出变量的类型</p>
<ul>
<li>只能定义为局部变量</li>
<li>对象初始化器和集合初始化器</li>
<li>使用var声明的变量是强类型变量</li>
</ul>
<h3 id="匿名类型"><a href="#匿名类型" class="headerlink" title="匿名类型"></a>匿名类型</h3><p>在行内声明类型，而不是正式定义一个类</p>
<h3 id="拓展方法"><a href="#拓展方法" class="headerlink" title="拓展方法"></a>拓展方法</h3><p>对于原来的类型，拓展出新的功能</p>
<ul>
<li>拓展方法定义在静态类中</li>
<li>拓展方法定义成静态方法</li>
<li>拓展方法的第一个参数始终是this 类型 实例</li>
</ul>
<h2 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h2><p>Lambda 表达式是一种匿名函数，可以包含表达式和语句，并且可以用于创建委托或表达式树类型。Lambda 表达式使用 <code>=&gt;</code> 运算符，运算符左侧是输入参数，右侧是表达式或语句块。</p>
<h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">(parameters) =&gt; expression</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">(parameters) =&gt; &#123; statements &#125;</span><br></pre></td></tr></table></figure>

<h4 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; <span class="keyword">add</span> = (x, y) =&gt; x + y;</span><br><span class="line">Console.WriteLine(<span class="keyword">add</span>(<span class="number">2</span>, <span class="number">3</span>));  <span class="comment">// 输出 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Lambda表达式过滤列表</span></span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; numbers = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; evenNumbers = numbers.Where(n =&gt; n % <span class="number">2</span> == <span class="number">0</span>).ToList();</span><br></pre></td></tr></table></figure>

<h3 id="表达式树"><a href="#表达式树" class="headerlink" title="表达式树"></a>表达式树</h3><p>表达式树（Expression Trees）是 Lambda 表达式的一种特殊形式，可以在运行时动态创建和执行代码。表达式树表示代码结构，并可以用于 LINQ 提供程序，如 LINQ to SQL。</p>
<h4 id="创建表达式树"><a href="#创建表达式树" class="headerlink" title="创建表达式树"></a>创建表达式树</h4><p>表达式树是由 <code>System.Linq.Expressions</code> 命名空间中的类表示的。可以使用 <code>Expression</code> 类来创建表达式树。</p>
<h4 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq.Expressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建一个表达式树：表达式表示 x =&gt; x * 2</span></span><br><span class="line">        Expression&lt;Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;&gt; expr = x =&gt; x * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编译表达式树到可执行代码</span></span><br><span class="line">        Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; compiledExpr = expr.Compile();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行表达式</span></span><br><span class="line">        <span class="built_in">int</span> result = compiledExpr(<span class="number">5</span>);</span><br><span class="line">        Console.WriteLine(result);  <span class="comment">// 输出 10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印表达式树结构</span></span><br><span class="line">        Console.WriteLine(expr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的示例中，<code>Expression&lt;Func&lt;int, int&gt;&gt; expr = x =&gt; x * 2;</code> 创建了一个表达式树，表示一个输入为 <code>int</code>，输出为 <code>int</code> 的函数。然后使用 <code>Compile</code> 方法将表达式树编译为可执行代码，并执行。</p>
<h3 id="Lambda-表达式详细解析"><a href="#Lambda-表达式详细解析" class="headerlink" title="Lambda 表达式详细解析"></a>Lambda 表达式详细解析</h3><h4 id="1-单参数Lambda表达式"><a href="#1-单参数Lambda表达式" class="headerlink" title="1. 单参数Lambda表达式"></a>1. 单参数Lambda表达式</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; square = x =&gt; x * <span class="number">2</span>;</span><br><span class="line">Console.WriteLine(square(<span class="number">5</span>));  <span class="comment">// 输出 10</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>x =&gt; x * 2</code> 是一个 Lambda 表达式，接收一个参数 <code>x</code>，并返回 <code>x * 2</code>。</p>
<h4 id="2-多参数Lambda表达式"><a href="#2-多参数Lambda表达式" class="headerlink" title="2. 多参数Lambda表达式"></a>2. 多参数Lambda表达式</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; <span class="keyword">add</span> = (x, y) =&gt; x + y;</span><br><span class="line">Console.WriteLine(<span class="keyword">add</span>(<span class="number">2</span>, <span class="number">3</span>));  <span class="comment">// 输出 5</span></span><br></pre></td></tr></table></figure>

<p>这个例子中，Lambda 表达式 <code>(x, y) =&gt; x + y</code> 接收两个参数 <code>x</code> 和 <code>y</code>，并返回它们的和。</p>
<h4 id="3-没有参数的Lambda表达式"><a href="#3-没有参数的Lambda表达式" class="headerlink" title="3. 没有参数的Lambda表达式"></a>3. 没有参数的Lambda表达式</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Action greet = () =&gt; Console.WriteLine(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">greet();  <span class="comment">// 输出 &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure>

<p>这里的 Lambda 表达式 <code>() =&gt; Console.WriteLine(&quot;Hello, World!&quot;)</code> 不接收任何参数，并打印一条消息。</p>
<h4 id="4-具有语句块的Lambda表达式"><a href="#4-具有语句块的Lambda表达式" class="headerlink" title="4. 具有语句块的Lambda表达式"></a>4. 具有语句块的Lambda表达式</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; addAndMultiply = (x, y) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> sum = x + y;</span><br><span class="line">    <span class="keyword">return</span> sum * <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Console.WriteLine(addAndMultiply(<span class="number">2</span>, <span class="number">3</span>));  <span class="comment">// 输出 10</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，Lambda 表达式包含一个语句块 <code>&#123; ... &#125;</code>，可以包含多个语句。</p>
<h3 id="表达式树详细解析"><a href="#表达式树详细解析" class="headerlink" title="表达式树详细解析"></a>表达式树详细解析</h3><h4 id="1-创建简单的表达式树"><a href="#1-创建简单的表达式树" class="headerlink" title="1. 创建简单的表达式树"></a>1. 创建简单的表达式树</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq.Expressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建表达式树：表示 x =&gt; x + 1</span></span><br><span class="line">        ParameterExpression param = Expression.Parameter(<span class="keyword">typeof</span>(<span class="built_in">int</span>), <span class="string">&quot;x&quot;</span>);</span><br><span class="line">        ConstantExpression constant = Expression.Constant(<span class="number">1</span>);</span><br><span class="line">        BinaryExpression body = Expression.Add(param, constant);</span><br><span class="line">        Expression&lt;Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;&gt; expr = Expression.Lambda&lt;Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;&gt;(body, param);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编译并执行表达式树</span></span><br><span class="line">        Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; compiledExpr = expr.Compile();</span><br><span class="line">        <span class="built_in">int</span> result = compiledExpr(<span class="number">5</span>);</span><br><span class="line">        Console.WriteLine(result);  <span class="comment">// 输出 6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，我们手动构建了一棵表达式树，表示 <code>x =&gt; x + 1</code>，并编译和执行它。</p>
<h4 id="2-分析复杂表达式树"><a href="#2-分析复杂表达式树" class="headerlink" title="2. 分析复杂表达式树"></a>2. 分析复杂表达式树</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq.Expressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 表达式树：表示 (x, y) =&gt; x * y + 2</span></span><br><span class="line">        ParameterExpression param1 = Expression.Parameter(<span class="keyword">typeof</span>(<span class="built_in">int</span>), <span class="string">&quot;x&quot;</span>);</span><br><span class="line">        ParameterExpression param2 = Expression.Parameter(<span class="keyword">typeof</span>(<span class="built_in">int</span>), <span class="string">&quot;y&quot;</span>);</span><br><span class="line">        ConstantExpression constant = Expression.Constant(<span class="number">2</span>);</span><br><span class="line">        BinaryExpression multiply = Expression.Multiply(param1, param2);</span><br><span class="line">        BinaryExpression body = Expression.Add(multiply, constant);</span><br><span class="line">        Expression&lt;Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt;&gt; expr = Expression.Lambda&lt;Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt;&gt;(body, param1, param2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编译并执行表达式树</span></span><br><span class="line">        Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; compiledExpr = expr.Compile();</span><br><span class="line">        <span class="built_in">int</span> result = compiledExpr(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        Console.WriteLine(result);  <span class="comment">// 输出 14</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，我们构建了一个表示 <code>(x, y) =&gt; x * y + 2</code> 的表达式树，并编译和执行它。</p>
<h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>Lambda 表达式和表达式树是 C# 中非常强大的功能，允许开发人员编写简洁的内联代码，并在运行时动态生成和执行代码。Lambda 表达式主要用于简化委托的使用，而表达式树则用于构建动态查询和代码生成场景。</p>
<p>如果您有更多具体问题或更详细的需求，请提供更多上下文，我将更具体地回答您的问题。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/Docker/</url>
    <content><![CDATA[<p>Docker 是一个开源的平台，用于自动化部署、扩展和管理应用程序容器。容器是一种轻量级的虚拟化技术，它允许应用程序及其依赖项在隔离的环境中运行，而不需要完整的虚拟机。以下是 Docker 的一些关键特点和优势：</p>
<span id="more"></span>

<h3 id="关键特点"><a href="#关键特点" class="headerlink" title="关键特点"></a>关键特点</h3><ol>
<li><p><strong>容器化</strong>：</p>
<ul>
<li>Docker 使用容器来打包应用程序及其依赖项，使得应用程序可以在任何环境中一致地运行。</li>
<li>容器是独立的、轻量级的，并且共享主机操作系统的内核。</li>
</ul>
</li>
<li><p><strong>镜像</strong>：</p>
<ul>
<li>Docker 镜像是只读模板，用于创建 Docker 容器。每个镜像包含应用程序的文件系统、代码、运行时、库以及其他必要的文件。</li>
<li>镜像可以通过 Docker Hub 等仓库进行分发和共享。</li>
</ul>
</li>
<li><p><strong>Dockerfile</strong>：</p>
<ul>
<li>Dockerfile 是一个文本文件，包含构建 Docker 镜像的指令。用户可以通过编写 Dockerfile 来自动化镜像的创建。</li>
</ul>
</li>
<li><p><strong>跨平台</strong>：</p>
<ul>
<li>Docker 容器可以在各种操作系统上运行，包括 Linux、Windows 和 macOS，使得应用程序具有很强的可移植性。</li>
</ul>
</li>
</ol>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol>
<li><p><strong>一致性和可移植性</strong>：</p>
<ul>
<li>应用程序在开发、测试和生产环境中的运行环境一致，减少了“在我的机器上能跑”的问题。</li>
</ul>
</li>
<li><p><strong>资源效率</strong>：</p>
<ul>
<li>容器比虚拟机更轻量级，启动速度更快，资源开销更小，因为它们共享操作系统内核。</li>
</ul>
</li>
<li><p><strong>隔离性</strong>：</p>
<ul>
<li>容器在隔离的环境中运行，提供了安全性和可靠性。一个容器的问题不会影响其他容器或主机系统。</li>
</ul>
</li>
<li><p>**持续集成和持续交付 (CI&#x2F;CD)**：</p>
<ul>
<li>Docker 与 CI&#x2F;CD 工具（如 Jenkins、Travis CI 等）集成良好，有助于实现自动化构建、测试和部署流程。</li>
</ul>
</li>
<li><p><strong>可扩展性</strong>：</p>
<ul>
<li>Docker 支持服务的动态扩展和负载均衡，适合在微服务架构中使用。</li>
</ul>
</li>
</ol>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul>
<li><strong>开发环境</strong>：<ul>
<li>开发人员可以在本地运行与生产环境一致的容器，确保代码在不同环境中的行为一致。</li>
</ul>
</li>
<li><strong>测试环境</strong>：<ul>
<li>通过容器化，测试环境可以快速创建和销毁，保证测试的独立性和一致性。</li>
</ul>
</li>
<li><strong>生产环境</strong>：<ul>
<li>Docker 在生产环境中部署应用程序，使得扩展和管理更加简单高效。</li>
</ul>
</li>
</ul>
<h3 id="Docker-生态系统"><a href="#Docker-生态系统" class="headerlink" title="Docker 生态系统"></a>Docker 生态系统</h3><ul>
<li><strong>Docker Hub</strong>：<ul>
<li>一个公共的注册表，用于存储和分发 Docker 镜像。</li>
</ul>
</li>
<li><strong>Docker Compose</strong>：<ul>
<li>一个工具，允许用户定义和运行多容器的 Docker 应用程序。用户可以使用 YAML 文件来配置应用程序的服务、网络和卷。</li>
</ul>
</li>
<li><strong>Docker Swarm</strong>：<ul>
<li>Docker 的原生集群管理和编排工具，支持容器的自动调度和负载均衡。</li>
</ul>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Docker 通过提供轻量级的容器化解决方案，简化了应用程序的开发、测试和部署流程。它提高了资源利用率，增强了应用程序的可移植性和可扩展性，是现代 DevOps 实践中的重要工具。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name=&quot;scrypted&quot; --network=host --restart=always -v /volume1/docker/scrypted:/server/volume koush/scrypted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -d -v /volume1/docker/xunlei/data:/xunlei/data -v /volume1/downloads:/xunlei/downloads -p 2345:2345 cnk3x/xunlei xlp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">    --name=resilio-sync \</span><br><span class="line">    --network=host \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -v /home/draco/sync:/mnt/sync \</span><br><span class="line">    resilio/sync</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -d --name=&quot;homeassistant&quot; --network=host -v /volume1/docker/homeassistant:/config -e TZ=&quot;Asia/Shanghai&quot; --restart=always homeassistant/home-assistant</span><br><span class="line"></span><br><span class="line">docker run -d -v /volume1/docker/xunlei/configs/xunlei:/xunlei/data -v /home/draco/downloads:/xunlei/downloads -p 2345:2345 --privileged --restart=always cnk3x/xunlei</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -e &quot;ACCEPT_EULA=Y&quot; -e &quot;SA_PASSWORD=Abc@12332100&quot; --network=host -v /volume1/docker/sqlserver/data:/var/opt/mssql/data -v /volume1/docker/sqlserver/log:/var/opt/mssql/log --restart=always --name sqlserver -d mcr.microsoft.com/mssql/server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">  --name go2rtc \</span><br><span class="line">  --network host \</span><br><span class="line">  --privileged \</span><br><span class="line">  -e TZ=Atlantic/Bermuda \</span><br><span class="line">  -v /volume1/docker//go2rtc:/config \</span><br><span class="line">  --restart=always \</span><br><span class="line">  alexxit/go2rtc</span><br><span class="line">  </span><br><span class="line">  U%8xH7</span><br><span class="line">  funny dove jump trick already tortoise meadow leader below poet sad teach</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker build --platform linux/amd64 -t my-web-app:latest .</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>部署</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
</search>
